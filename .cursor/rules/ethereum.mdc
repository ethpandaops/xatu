---
description: Ethereum-specific coding practices and conventions
globs: ["**/ethereum/**/*.go", "**/eth/**/*.go"]
alwaysApply: false
---

# Ethereum Development Guidelines for Xatu

## Ethereum Concepts

### Data Types

- Use appropriate types for Ethereum-specific data:
  - `common.Hash` for 32-byte hashes
  - `common.Address` for 20-byte addresses
  - `*big.Int` for large integers (gas prices, values)
  - Custom types for specialized data (e.g., BLS signatures)

### Consensus Layer (Beacon Chain)

- Follow the Ethereum consensus specifications closely
- Use consistent terminology aligned with official specs
- Document any deviations or special handling
- Consider both Phase 0 and post-merge operation

### Execution Layer

- Handle both pre-merge and post-merge concepts appropriately
- Use consistent terminology for transactions, blocks, etc.
- Follow EIP standards for new features
- Document compatibility with different client implementations

## API Interaction

### Beacon API

- Use the official Beacon API specification as reference
- Handle different API versions appropriately
- Implement proper error handling for API responses
- Consider rate limiting and backoff strategies

### Execution API (JSON-RPC)

- Follow standard JSON-RPC calling conventions
- Use appropriate data types for parameters and results
- Implement retry logic for transient failures
- Consider batching requests when appropriate

## P2P Networking

### LibP2P

- Follow standard LibP2P patterns and practices
- Implement appropriate connection handling
- Consider security implications of P2P communication
- Document network protocol details

### Ethereum P2P Protocols

- Implement protocol versions correctly
- Handle negotiation and capability discovery
- Follow standard message formats
- Document wire protocol details

## Data Handling

### Block Processing

- Handle canonical chain and reorgs correctly
- Consider finality and fork choice rules
- Implement proper validation of block data
- Document assumptions about block data

### Event Processing

- Handle consensus events appropriately
- Process attestations efficiently
- Consider both live and historical data
- Document event ordering guarantees

## Terminology

Use consistent terminology throughout the codebase:

- "Consensus Layer" (not "Eth2" or "Beacon Chain")
- "Execution Layer" (not "Eth1")
- "Validator" (for consensus validators)
- "Block" (with appropriate context for consensus vs execution)
- "Transaction" (for execution layer transactions)

## Client Compatibility

- Test with multiple client implementations
- Document known compatibility issues
- Handle client-specific quirks appropriately
- Consider version matrix for support