---
description: Event handling patterns and guidelines for Xatu
globs: ["**/event/**/*.go", "**/events/**/*.go"]
alwaysApply: false
---

# Event Handling in Xatu

Xatu is fundamentally an event processing system. This document outlines patterns and guidelines for working with events throughout the codebase.

## Event Structure

### Event Types

Events in Xatu fall into these main categories:

1. **Ethereum Consensus Events**: Events from the Beacon API (blocks, attestations, etc.)
2. **Ethereum Execution Events**: Events from execution clients (transactions, blocks, etc.)
3. **P2P Network Events**: Events from network discovery and monitoring
4. **Internal System Events**: Events for system coordination and control flow

### Event Representation

- Events are defined using Protocol Buffers
- Each event type has a dedicated message definition
- Events include metadata about source, timestamp, and context

## Event Processing

### Processing Pipeline

The standard event processing pipeline includes:

1. **Collection**: Sourcing events from external systems
2. **Validation**: Ensuring events are well-formed
3. **Enrichment**: Adding additional context or derived data
4. **Transformation**: Converting between formats or representations
5. **Routing**: Directing events to appropriate handlers
6. **Storage/Forwarding**: Persisting or transmitting events

### Processing Guidelines

- Process events asynchronously where possible
- Use batching for efficiency with high-volume events
- Define clear interfaces between processing stages
- Handle backpressure appropriately

## Event Serialization

- Use Protocol Buffers for binary serialization
- Use JSON for human-readable representations
- Define clear versioning strategies for event schemas
- Include all necessary metadata for processing

## Event Routing

- Use consistent patterns for event subscription and delivery
- Support filtering events at the source when possible
- Consider performance implications of fan-out patterns
- Document expected event flow for each component

## Error Handling in Event Processing

- Define clear strategies for handling invalid events
- Consider dead-letter queues for failed processing
- Log appropriate context when event processing fails
- Implement retry logic with backoff for transient failures

## Event Observability

- Include transaction IDs or correlation IDs in events
- Implement metrics for event processing rates and errors
- Consider sampling for high-volume event streams
- Ensure proper logging at key points in the event lifecycle