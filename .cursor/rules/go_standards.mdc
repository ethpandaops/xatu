---
description: Go coding standards and best practices for Xatu
globs: ["**/*.go"]
alwaysApply: false
---

# Go Coding Standards for Xatu

## Code Structure

- Use the standard Go project layout patterns
- Each package should have a focused, single responsibility
- Avoid package names that are too generic (e.g., "utils", "common", "helpers")
- Avoid deeply nested code; refactor into separate functions

## Naming Conventions

- Use MixedCaps or mixedCaps rather than underscores to write multiword names
- Package names should be short, concise, and lowercase
- Interface names should usually end with "-er" (e.g., `Reader`, `Writer`)
- Keep acronyms uppercase (e.g., `HTTP`, `URL`, `ID`)
- Avoid package name stutter; if the package is called `event`, don't name the type `EventType`

## Error Handling

- Always check error returns
- Wrap errors with context using `fmt.Errorf("failed to do X: %w", err)`
- Return errors rather than panicking except in truly exceptional cases
- For public APIs, avoid returning sentinel errors; use error wrapping or custom error types

## Concurrency

- Use context for cancellation and timeouts
- For complex goroutine management, consider using errgroup
- Be cautious with mutexes; prefer simple concurrency patterns
- Document concurrent access requirements for shared data structures

## Testing

- Aim for table-driven tests using `t.Run()`
- Use meaningful test case names
- Test both success and error paths
- For mocks, use interfaces and dependency injection

## Documentation

- Public functions and types must have doc comments
- Document package-level constants, variables, and exported types
- Use complete sentences with proper punctuation
- Provide examples for non-trivial operations

## Configuration

- Prefer explicit configuration over discovery/auto-configuration
- Use structured config objects rather than global state
- Handle configuration in a centralized way through the top-level component 

## Metrics and Observability

- Every component should expose relevant metrics
- Use standard naming patterns for metrics (e.g., `subsystem_metric_unit`)
- Include appropriate labels but avoid high-cardinality labels
- Log important state transitions and errors at appropriate log levels