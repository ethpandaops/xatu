api:
  enabled: true
  address: 0.0.0.0:8686
  playground: false
acknowledgements:
  enabled: true
sources:
  xatu_server_events_http:
    address: 0.0.0.0:9005
    type: http
    encoding: ndjson
  internal_metrics:
    type: internal_metrics
transforms:
  xatu_server_events_router:
    type: route
    inputs:
      - xatu_server_events_http
    route:
      eth_v1_beacon_blob_sidecar: .event.name == "BEACON_API_ETH_V1_BEACON_BLOB_SIDECAR"
      eth_v1_beacon_committee: .event.name == "BEACON_API_ETH_V1_BEACON_COMMITTEE"
      eth_v1_debug_fork_choice_reorg_v2: .event.name == "BEACON_API_ETH_V1_DEBUG_FORK_CHOICE_REORG_V2"
      eth_v1_debug_fork_choice_reorg: .event.name == "BEACON_API_ETH_V1_DEBUG_FORK_CHOICE_REORG"
      eth_v1_debug_fork_choice_v2: .event.name == "BEACON_API_ETH_V1_DEBUG_FORK_CHOICE_V2"
      eth_v1_debug_fork_choice: .event.name == "BEACON_API_ETH_V1_DEBUG_FORK_CHOICE"
      eth_v1_events_attestation_v2: .event.name == "BEACON_API_ETH_V1_EVENTS_ATTESTATION_V2"
      eth_v1_events_attestation: .event.name == "BEACON_API_ETH_V1_EVENTS_ATTESTATION"
      eth_v1_events_blob_sidecar: .event.name == "BEACON_API_ETH_V1_EVENTS_BLOB_SIDECAR"
      eth_v1_events_data_column_sidecar: .event.name == "BEACON_API_ETH_V1_EVENTS_DATA_COLUMN_SIDECAR"
      eth_v1_events_block_v2: .event.name == "BEACON_API_ETH_V1_EVENTS_BLOCK_V2"
      eth_v1_events_block: .event.name == "BEACON_API_ETH_V1_EVENTS_BLOCK"
      eth_v1_events_block_gossip: .event.name == "BEACON_API_ETH_V1_EVENTS_BLOCK_GOSSIP"
      eth_v1_events_chain_reorg_v2: .event.name == "BEACON_API_ETH_V1_EVENTS_CHAIN_REORG_V2"
      eth_v1_events_chain_reorg: .event.name == "BEACON_API_ETH_V1_EVENTS_CHAIN_REORG"
      eth_v1_events_contribution_and_proof_v2: .event.name == "BEACON_API_ETH_V1_EVENTS_CONTRIBUTION_AND_PROOF_V2"
      eth_v1_events_contribution_and_proof: .event.name == "BEACON_API_ETH_V1_EVENTS_CONTRIBUTION_AND_PROOF"
      eth_v1_events_finalized_checkpoint_v2: .event.name == "BEACON_API_ETH_V1_EVENTS_FINALIZED_CHECKPOINT_V2"
      eth_v1_events_finalized_checkpoint: .event.name == "BEACON_API_ETH_V1_EVENTS_FINALIZED_CHECKPOINT"
      eth_v1_events_head_v2: .event.name == "BEACON_API_ETH_V1_EVENTS_HEAD_V2"
      eth_v1_events_head: .event.name == "BEACON_API_ETH_V1_EVENTS_HEAD"
      eth_v1_events_voluntary_exit_v2: .event.name == "BEACON_API_ETH_V1_EVENTS_VOLUNTARY_EXIT_V2"
      eth_v1_events_voluntary_exit: .event.name == "BEACON_API_ETH_V1_EVENTS_VOLUNTARY_EXIT"
      eth_v1_proposer_duty: .event.name == "BEACON_API_ETH_V1_PROPOSER_DUTY"
      eth_v1_validator_attestation_data: .event.name == "BEACON_API_ETH_V1_VALIDATOR_ATTESTATION_DATA"
      eth_v2_beacon_block_attester_slashing: .event.name == "BEACON_API_ETH_V2_BEACON_BLOCK_ATTESTER_SLASHING"
      eth_v2_beacon_block_elaborated_attestation: .event.name == "BEACON_API_ETH_V2_BEACON_BLOCK_ELABORATED_ATTESTATION"
      eth_v2_beacon_block_bls_to_execution_change: .event.name == "BEACON_API_ETH_V2_BEACON_BLOCK_BLS_TO_EXECUTION_CHANGE"
      eth_v2_beacon_block_deposit: .event.name == "BEACON_API_ETH_V2_BEACON_BLOCK_DEPOSIT"
      eth_v2_beacon_block_execution_transaction: .event.name == "BEACON_API_ETH_V2_BEACON_BLOCK_EXECUTION_TRANSACTION"
      eth_v2_beacon_block_proposer_slashing: .event.name == "BEACON_API_ETH_V2_BEACON_BLOCK_PROPOSER_SLASHING"
      eth_v2_beacon_block_v2: .event.name == "BEACON_API_ETH_V2_BEACON_BLOCK_V2"
      eth_v2_beacon_block_voluntary_exit: .event.name == "BEACON_API_ETH_V2_BEACON_BLOCK_VOLUNTARY_EXIT"
      eth_v2_beacon_block_withdrawal: .event.name == "BEACON_API_ETH_V2_BEACON_BLOCK_WITHDRAWAL"
      eth_v2_beacon_block: .event.name == "BEACON_API_ETH_V2_BEACON_BLOCK"
      mempool_transaction_v2: .event.name == "MEMPOOL_TRANSACTION_V2"
      mempool_transaction: .event.name == "MEMPOOL_TRANSACTION"
      libp2p_trace_connected: .event.name == "LIBP2P_TRACE_CONNECTED"
      libp2p_trace_disconnected: .event.name == "LIBP2P_TRACE_DISCONNECTED"
      libp2p_trace_add_peer: .event.name == "LIBP2P_TRACE_ADD_PEER"
      libp2p_trace_remove_peer: .event.name == "LIBP2P_TRACE_REMOVE_PEER"
      libp2p_trace_recv_rpc: .event.name == "LIBP2P_TRACE_RECV_RPC"
      libp2p_trace_send_rpc: .event.name == "LIBP2P_TRACE_SEND_RPC"
      libp2p_trace_drop_rpc: .event.name == "LIBP2P_TRACE_DROP_RPC"
      libp2p_trace_rpc_meta_control_ihave: .event.name == "LIBP2P_TRACE_RPC_META_CONTROL_IHAVE"
      libp2p_trace_rpc_meta_control_iwant: .event.name == "LIBP2P_TRACE_RPC_META_CONTROL_IWANT"
      libp2p_trace_rpc_meta_control_idontwant: .event.name == "LIBP2P_TRACE_RPC_META_CONTROL_IDONTWANT"
      libp2p_trace_rpc_meta_control_graft: .event.name == "LIBP2P_TRACE_RPC_META_CONTROL_GRAFT"
      libp2p_trace_rpc_meta_control_prune: .event.name == "LIBP2P_TRACE_RPC_META_CONTROL_PRUNE"
      libp2p_trace_rpc_meta_subscription: .event.name == "LIBP2P_TRACE_RPC_META_SUBSCRIPTION"
      libp2p_trace_rpc_meta_message: .event.name == "LIBP2P_TRACE_RPC_META_MESSAGE"
      libp2p_trace_join: .event.name == "LIBP2P_TRACE_JOIN"
      libp2p_trace_leave: .event.name == "LIBP2P_TRACE_LEAVE"
      libp2p_trace_graft: .event.name == "LIBP2P_TRACE_GRAFT"
      libp2p_trace_prune: .event.name == "LIBP2P_TRACE_PRUNE"
      libp2p_trace_deliver_message: .event.name == "LIBP2P_TRACE_DELIVER_MESSAGE"
      libp2p_trace_reject_message: .event.name == "LIBP2P_TRACE_REJECT_MESSAGE"
      libp2p_trace_publish_message: .event.name == "LIBP2P_TRACE_PUBLISH_MESSAGE"
      libp2p_trace_duplicate_message: .event.name == "LIBP2P_TRACE_DUPLICATE_MESSAGE"
      libp2p_trace_handle_metadata: .event.name == "LIBP2P_TRACE_HANDLE_METADATA"
      libp2p_trace_handle_status: .event.name == "LIBP2P_TRACE_HANDLE_STATUS"
      libp2p_trace_gossipsub_beacon_block: .event.name == "LIBP2P_TRACE_GOSSIPSUB_BEACON_BLOCK"
      libp2p_trace_gossipsub_beacon_attestation: .event.name == "LIBP2P_TRACE_GOSSIPSUB_BEACON_ATTESTATION"
      libp2p_trace_gossipsub_aggregate_and_proof: .event.name == "LIBP2P_TRACE_GOSSIPSUB_AGGREGATE_AND_PROOF"
      libp2p_trace_gossipsub_blob_sidecar: .event.name == "LIBP2P_TRACE_GOSSIPSUB_BLOB_SIDECAR"
      libp2p_trace_gossipsub_data_column_sidecar: .event.name == "LIBP2P_TRACE_GOSSIPSUB_DATA_COLUMN_SIDECAR"
      libp2p_rpc_data_column_custody_probe: .event.name == "LIBP2P_RPC_DATA_COLUMN_CUSTODY_PROBE"
      libp2p_trace_synthetic_heartbeat: .event.name == "LIBP2P_TRACE_SYNTHETIC_HEARTBEAT"
      beacon_api_eth_v1_beacon_validators: .event.name == "BEACON_API_ETH_V1_BEACON_VALIDATORS"
      mev_relay_bid_trace_builder_block_submission: .event.name == "MEV_RELAY_BID_TRACE_BUILDER_BLOCK_SUBMISSION"
      mev_relay_proposer_payload_delivered: .event.name == "MEV_RELAY_PROPOSER_PAYLOAD_DELIVERED"
      beacon_api_eth_v3_validator_block: .event.name == "BEACON_API_ETH_V3_VALIDATOR_BLOCK"
      mev_relay_validator_registration: .event.name == "MEV_RELAY_VALIDATOR_REGISTRATION"
      node_record_consensus: .event.name == "NODE_RECORD_CONSENSUS"
      node_record_execution: .event.name == "NODE_RECORD_EXECUTION"
sinks:
  metrics:
    type: prometheus_exporter
    address: 0.0.0.0:9598
    inputs:
      - xatu_server_events_router._unmatched
      - internal_metrics
  beacon_api_eth_v1_beacon_committee_kafka:
    type: kafka
    buffer:
      max_events: 500000
    batch:
      timeout_secs: 0.5
    inputs:
      - xatu_server_events_router.eth_v1_beacon_committee
    bootstrap_servers: "${KAFKA_BROKERS}"
    key_field: "event.id"
    topic: beacon-api-eth-v1-beacon-committee
    compression: snappy
    healthcheck:
      enabled: true
    encoding:
      codec: json
  beacon_api_eth_v1_events_head_kafka:
    type: kafka
    buffer:
      max_events: 500000
    batch:
      timeout_secs: 0.5
    inputs:
      - xatu_server_events_router.eth_v1_events_head
    bootstrap_servers: "${KAFKA_BROKERS}"
    key_field: "event.id"
    topic: beacon-api-eth-v1-events-head
    compression: snappy
    healthcheck:
      enabled: true
    encoding:
      codec: json
  beacon_api_eth_v1_events_head_v2_kafka:
    type: kafka
    buffer:
      max_events: 500000
    batch:
      timeout_secs: 0.5
    inputs:
      - xatu_server_events_router.eth_v1_events_head_v2
    bootstrap_servers: "${KAFKA_BROKERS}"
    key_field: "event.id"
    topic: beacon-api-eth-v1-events-head-v2
    compression: snappy
    healthcheck:
      enabled: true
    encoding:
      codec: json
  beacon_api_eth_v1_events_blob_sidecar_kafka:
    type: kafka
    buffer:
      max_events: 500000
    batch:
      timeout_secs: 0.5
    inputs:
      - xatu_server_events_router.eth_v1_events_blob_sidecar
    bootstrap_servers: "${KAFKA_BROKERS}"
    key_field: "event.id"
    topic: beacon-api-eth-v1-events-blob-sidecar
    compression: snappy
    healthcheck:
      enabled: true
    encoding:
      codec: json
  beacon_api_eth_v1_events_data_column_sidecar_kafka:
    type: kafka
    buffer:
      max_events: 500000
    batch:
      timeout_secs: 0.5
    inputs:
      - xatu_server_events_router.eth_v1_events_data_column_sidecar
    bootstrap_servers: "${KAFKA_BROKERS}"
    key_field: "event.id"
    topic: beacon-api-eth-v1-events-data-column-sidecar
    compression: snappy
    healthcheck:
      enabled: true
    encoding:
      codec: json
  beacon_api_eth_v1_events_block_kafka:
    type: kafka
    buffer:
      max_events: 500000
    batch:
      timeout_secs: 0.5
    inputs:
      - xatu_server_events_router.eth_v1_events_block
    bootstrap_servers: "${KAFKA_BROKERS}"
    key_field: "event.id"
    topic: beacon-api-eth-v1-events-block
    compression: snappy
    healthcheck:
      enabled: true
    encoding:
      codec: json
  beacon_api_eth_v1_events_block_v2_kafka:
    type: kafka
    buffer:
      max_events: 500000
    batch:
      timeout_secs: 0.5
    inputs:
      - xatu_server_events_router.eth_v1_events_block_v2
    bootstrap_servers: "${KAFKA_BROKERS}"
    key_field: "event.id"
    topic: beacon-api-eth-v1-events-block-v2
    compression: snappy
    healthcheck:
      enabled: true
    encoding:
      codec: json
  beacon_api_eth_v1_events_block_gossip_kafka:
    type: kafka
    buffer:
      max_events: 500000
    batch:
      timeout_secs: 0.5
    inputs:
      - xatu_server_events_router.eth_v1_events_block_gossip
    bootstrap_servers: "${KAFKA_BROKERS}"
    key_field: "event.id"
    topic: beacon-api-eth-v1-events-block-gossip
    compression: snappy
    healthcheck:
      enabled: true
    encoding:
      codec: json
  beacon_api_eth_v1_events_attestation_kafka:
    type: kafka
    buffer:
      max_events: 500000
    batch:
      timeout_secs: 0.5
    inputs:
      - xatu_server_events_router.eth_v1_events_attestation
    bootstrap_servers: "${KAFKA_BROKERS}"
    key_field: "event.id"
    topic: beacon-api-eth-v1-events-attestation
    compression: snappy
    healthcheck:
      enabled: true
    encoding:
      codec: json
  beacon_api_eth_v1_events_attestation_v2_kafka:
    type: kafka
    buffer:
      max_events: 500000
    batch:
      timeout_secs: 0.5
    inputs:
      - xatu_server_events_router.eth_v1_events_attestation_v2
    bootstrap_servers: "${KAFKA_BROKERS}"
    key_field: "event.id"
    topic: beacon-api-eth-v1-events-attestation-v2
    compression: snappy
    healthcheck:
      enabled: true
    encoding:
      codec: json
  beacon_api_eth_v1_validator_attestation_data_kafka:
    type: kafka
    buffer:
      max_events: 500000
    batch:
      timeout_secs: 0.5
    inputs:
      - xatu_server_events_router.eth_v1_validator_attestation_data
    bootstrap_servers: "${KAFKA_BROKERS}"
    key_field: "event.id"
    topic: beacon-api-eth-v1-validator-attestation-data
    compression: snappy
    healthcheck:
      enabled: true
    encoding:
      codec: json
  beacon_api_eth_v1_events_voluntary_exit_kafka:
    type: kafka
    buffer:
      max_events: 500000
    batch:
      timeout_secs: 0.5
    inputs:
      - xatu_server_events_router.eth_v1_events_voluntary_exit
    bootstrap_servers: "${KAFKA_BROKERS}"
    key_field: "event.id"
    topic: beacon-api-eth-v1-events-voluntary-exit
    compression: snappy
    healthcheck:
      enabled: true
    encoding:
      codec: json
  beacon_api_eth_v1_events_voluntary_exit_v2_kafka:
    type: kafka
    buffer:
      max_events: 500000
    batch:
      timeout_secs: 0.5
    inputs:
      - xatu_server_events_router.eth_v1_events_voluntary_exit_v2
    bootstrap_servers: "${KAFKA_BROKERS}"
    key_field: "event.id"
    topic: beacon-api-eth-v1-events-voluntary-exit-v2
    compression: snappy
    healthcheck:
      enabled: true
    encoding:
      codec: json
  beacon_api_eth_v1_events_finalized_checkpoint_kafka:
    type: kafka
    buffer:
      max_events: 500000
    batch:
      timeout_secs: 0.5
    inputs:
      - xatu_server_events_router.eth_v1_events_finalized_checkpoint
    bootstrap_servers: "${KAFKA_BROKERS}"
    key_field: "event.id"
    topic: beacon-api-eth-v1-events-finalized-checkpoint
    compression: snappy
    healthcheck:
      enabled: true
    encoding:
      codec: json
  beacon_api_eth_v1_events_finalized_checkpoint_v2_kafka:
    type: kafka
    buffer:
      max_events: 500000
    batch:
      timeout_secs: 0.5
    inputs:
      - xatu_server_events_router.eth_v1_events_finalized_checkpoint_v2
    bootstrap_servers: "${KAFKA_BROKERS}"
    key_field: "event.id"
    topic: beacon-api-eth-v1-events-finalized-checkpoint-v2
    compression: snappy
    healthcheck:
      enabled: true
    encoding:
      codec: json
  beacon_api_eth_v1_events_chain_reorg_kafka:
    type: kafka
    buffer:
      max_events: 500000
    batch:
      timeout_secs: 0.5
    inputs:
      - xatu_server_events_router.eth_v1_events_chain_reorg
    bootstrap_servers: "${KAFKA_BROKERS}"
    key_field: "event.id"
    topic: beacon-api-eth-v1-events-chain-reorg
    compression: snappy
    healthcheck:
      enabled: true
    encoding:
      codec: json
  beacon_api_eth_v1_events_chain_reorg_v2_kafka:
    type: kafka
    buffer:
      max_events: 500000
    batch:
      timeout_secs: 0.5
    inputs:
      - xatu_server_events_router.eth_v1_events_chain_reorg_v2
    bootstrap_servers: "${KAFKA_BROKERS}"
    key_field: "event.id"
    topic: beacon-api-eth-v1-events-chain-reorg-v2
    compression: snappy
    healthcheck:
      enabled: true
    encoding:
      codec: json
  beacon_api_eth_v1_events_contribution_and_proof_kafka:
    type: kafka
    buffer:
      max_events: 500000
    batch:
      timeout_secs: 0.5
    inputs:
      - xatu_server_events_router.eth_v1_events_contribution_and_proof
    bootstrap_servers: "${KAFKA_BROKERS}"
    key_field: "event.id"
    topic: beacon-api-eth-v1-events-contribution-and-proof
    compression: snappy
    healthcheck:
      enabled: true
    encoding:
      codec: json
  beacon_api_eth_v1_events_contribution_and_proof_v2_kafka:
    type: kafka
    buffer:
      max_events: 500000
    batch:
      timeout_secs: 0.5
    inputs:
      - xatu_server_events_router.eth_v1_events_contribution_and_proof_v2
    bootstrap_servers: "${KAFKA_BROKERS}"
    key_field: "event.id"
    topic: beacon-api-eth-v1-events-contribution-and-proof-v2
    compression: snappy
    healthcheck:
      enabled: true
    encoding:
      codec: json
  mempool_transaction_kafka:
    type: kafka
    buffer:
      max_events: 500000
    batch:
      timeout_secs: 0.5
    inputs:
      - xatu_server_events_router.mempool_transaction
    bootstrap_servers: "${KAFKA_BROKERS}"
    key_field: "event.id"
    topic: mempool-transaction
    compression: snappy
    healthcheck:
      enabled: true
    encoding:
      codec: json
  mempool_transaction_v2_kafka:
    type: kafka
    buffer:
      max_events: 500000
    batch:
      timeout_secs: 0.5
    inputs:
      - xatu_server_events_router.mempool_transaction_v2
    bootstrap_servers: "${KAFKA_BROKERS}"
    key_field: "event.id"
    topic: mempool-transaction-v2
    compression: snappy
    healthcheck:
      enabled: true
    encoding:
      codec: json
  beacon_api_eth_v2_beacon_block_kafka:
    type: kafka
    buffer:
      max_events: 500000
    batch:
      timeout_secs: 0.5
    inputs:
      - xatu_server_events_router.eth_v2_beacon_block
    bootstrap_servers: "${KAFKA_BROKERS}"
    key_field: "event.id"
    topic: beacon-api-eth-v2-beacon-block
    compression: snappy
    healthcheck:
      enabled: true
    encoding:
      codec: json
    librdkafka_options:
      message.max.bytes: "10485760" # 10MB
  beacon_api_eth_v2_beacon_block_v2_kafka:
    type: kafka
    buffer:
      max_events: 500000
    batch:
      timeout_secs: 0.5
    inputs:
      - xatu_server_events_router.eth_v2_beacon_block_v2
    bootstrap_servers: "${KAFKA_BROKERS}"
    key_field: "event.id"
    topic: beacon-api-eth-v2-beacon-block-v2
    compression: snappy
    healthcheck:
      enabled: true
    encoding:
      codec: json
    librdkafka_options:
      message.max.bytes: "10485760" # 10MB
  eth_v1_debug_fork_choice_kafka:
    type: kafka
    buffer:
      max_events: 500000
    batch:
      timeout_secs: 0.5
    inputs:
      - xatu_server_events_router.eth_v1_debug_fork_choice
    bootstrap_servers: "${KAFKA_BROKERS}"
    key_field: "event.id"
    topic: beacon-api-eth-v1-debug-fork-choice
    compression: snappy
    healthcheck:
      enabled: true
    encoding:
      codec: json
    librdkafka_options:
      message.max.bytes: "10485760" # 10MB
  eth_v1_debug_fork_choice_v2_kafka:
    type: kafka
    buffer:
      max_events: 500000
    batch:
      timeout_secs: 0.5
    inputs:
      - xatu_server_events_router.eth_v1_debug_fork_choice_v2
    bootstrap_servers: "${KAFKA_BROKERS}"
    key_field: "event.id"
    topic: beacon-api-eth-v1-debug-fork-choice-v2
    compression: snappy
    healthcheck:
      enabled: true
    encoding:
      codec: json
    librdkafka_options:
      message.max.bytes: "10485760" # 10MB
  eth_v1_debug_fork_choice_reorg_kafka:
    type: kafka
    buffer:
      max_events: 500000
    batch:
      timeout_secs: 0.5
    inputs:
      - xatu_server_events_router.eth_v1_debug_fork_choice_reorg
    bootstrap_servers: "${KAFKA_BROKERS}"
    key_field: "event.id"
    topic: beacon-api-eth-v1-debug-fork-choice-reorg
    compression: snappy
    healthcheck:
      enabled: true
    encoding:
      codec: json
    librdkafka_options:
      message.max.bytes: "10485760" # 10MB
  eth_v1_debug_fork_choice_reorg_v2_kafka:
    type: kafka
    buffer:
      max_events: 500000
    batch:
      timeout_secs: 0.5
    inputs:
      - xatu_server_events_router.eth_v1_debug_fork_choice_reorg_v2
    bootstrap_servers: "${KAFKA_BROKERS}"
    key_field: "event.id"
    topic: beacon-api-eth-v1-debug-fork-choice-reorg-v2
    compression: snappy
    healthcheck:
      enabled: true
    encoding:
      codec: json
    librdkafka_options:
      message.max.bytes: "10485760" # 10MB
  beacon_api_eth_v2_beacon_block_proposer_slashing_kafka:
    type: kafka
    buffer:
      max_events: 500000
    batch:
      timeout_secs: 0.5
    inputs:
      - xatu_server_events_router.eth_v2_beacon_block_proposer_slashing
    bootstrap_servers: "${KAFKA_BROKERS}"
    key_field: "event.id"
    topic: beacon-api-eth-v2-beacon-block-proposer-slashing
    compression: snappy
    healthcheck:
      enabled: true
    encoding:
      codec: json
  beacon_api_eth_v2_beacon_block_attester_slashing_kafka:
    type: kafka
    buffer:
      max_events: 500000
    batch:
      timeout_secs: 0.5
    inputs:
      - xatu_server_events_router.eth_v2_beacon_block_attester_slashing
    bootstrap_servers: "${KAFKA_BROKERS}"
    key_field: "event.id"
    topic: beacon-api-eth-v2-beacon-block-attester-slashing
    compression: snappy
    healthcheck:
      enabled: true
    encoding:
      codec: json
  beacon_api_eth_v2_beacon_block_bls_to_execution_change_kafka:
    type: kafka
    buffer:
      max_events: 500000
    batch:
      timeout_secs: 0.5
    inputs:
      - xatu_server_events_router.eth_v2_beacon_block_bls_to_execution_change
    bootstrap_servers: "${KAFKA_BROKERS}"
    key_field: "event.id"
    topic: beacon-api-eth-v2-beacon-block-bls-to-execution-change
    compression: snappy
    healthcheck:
      enabled: true
    encoding:
      codec: json
  beacon_api_eth_v2_beacon_block_execution_transaction_kafka:
    type: kafka
    buffer:
      max_events: 500000
    batch:
      timeout_secs: 0.5
    inputs:
      - xatu_server_events_router.eth_v2_beacon_block_execution_transaction
    bootstrap_servers: "${KAFKA_BROKERS}"
    key_field: "event.id"
    topic: beacon-api-eth-v2-beacon-block-execution-transaction
    compression: snappy
    healthcheck:
      enabled: true
    encoding:
      codec: json
    librdkafka_options:
      message.max.bytes: "10485760" # 10MB
  beacon_api_eth_v2_beacon_block_voluntary_exit_kafka:
    type: kafka
    buffer:
      max_events: 500000
    batch:
      timeout_secs: 0.5
    inputs:
      - xatu_server_events_router.eth_v2_beacon_block_voluntary_exit
    bootstrap_servers: "${KAFKA_BROKERS}"
    key_field: "event.id"
    topic: beacon-api-eth-v2-beacon-block-voluntary-exit
    compression: snappy
    healthcheck:
      enabled: true
    encoding:
      codec: json
  beacon_api_eth_v2_beacon_block_deposit_kafka:
    type: kafka
    buffer:
      max_events: 500000
    batch:
      timeout_secs: 0.5
    inputs:
      - xatu_server_events_router.eth_v2_beacon_block_deposit
    bootstrap_servers: "${KAFKA_BROKERS}"
    key_field: "event.id"
    topic: beacon-api-eth-v2-beacon-block-deposit
    compression: snappy
    healthcheck:
      enabled: true
    encoding:
      codec: json
  beacon_api_eth_v2_beacon_block_withdrawal_kafka:
    type: kafka
    buffer:
      max_events: 500000
    batch:
      timeout_secs: 0.5
    inputs:
      - xatu_server_events_router.eth_v2_beacon_block_withdrawal
    bootstrap_servers: "${KAFKA_BROKERS}"
    key_field: "event.id"
    topic: beacon-api-eth-v2-beacon-block-withdrawal
    compression: snappy
    healthcheck:
      enabled: true
    encoding:
      codec: json
  beacon_api_eth_v1_beacon_blob_sidecar_kafka:
    type: kafka
    buffer:
      max_events: 500000
    batch:
      timeout_secs: 0.5
    inputs:
      - xatu_server_events_router.eth_v1_beacon_blob_sidecar
    bootstrap_servers: "${KAFKA_BROKERS}"
    key_field: "event.id"
    topic: beacon-api-eth-v1-beacon-blob-sidecar
    compression: snappy
    healthcheck:
      enabled: true
    encoding:
      codec: json
    librdkafka_options:
      message.max.bytes: "10485760" # 10MB
  beacon_api_eth_v1_proposer_duty_kafka:
    type: kafka
    buffer:
      max_events: 500000
    batch:
      timeout_secs: 0.5
    inputs:
      - xatu_server_events_router.eth_v1_proposer_duty
    bootstrap_servers: "${KAFKA_BROKERS}"
    key_field: "event.id"
    topic: beacon-api-eth-v1-proposer-duty
    compression: snappy
    healthcheck:
      enabled: true
    encoding:
      codec: json
  beacon_api_eth_v2_beacon_block_elaborated_attestation_kafka:
    type: kafka
    buffer:
      max_events: 500000
    batch:
      timeout_secs: 0.5
    inputs:
      - xatu_server_events_router.eth_v2_beacon_block_elaborated_attestation
    bootstrap_servers: "${KAFKA_BROKERS}"
    key_field: "event.id"
    topic: beacon-api-eth-v2-beacon-block-elaborated-attestation
    compression: snappy
    healthcheck:
      enabled: true
    encoding:
      codec: json
  libp2p_trace_connected_kafka:
    type: kafka
    buffer:
      max_events: 500000
    batch:
      timeout_secs: 0.5
    inputs:
      - xatu_server_events_router.libp2p_trace_connected
    bootstrap_servers: "${KAFKA_BROKERS}"
    key_field: "event.id"
    topic: libp2p-trace-connected
    compression: snappy
    healthcheck:
      enabled: true
    encoding:
      codec: json
  libp2p_trace_disconnected_kafka:
    type: kafka
    buffer:
      max_events: 500000
    batch:
      timeout_secs: 0.5
    inputs:
      - xatu_server_events_router.libp2p_trace_disconnected
    bootstrap_servers: "${KAFKA_BROKERS}"
    key_field: "event.id"
    topic: libp2p-trace-disconnected
    compression: snappy
    healthcheck:
      enabled: true
    encoding:
      codec: json
  libp2p_trace_add_peer_kafka:
    type: kafka
    buffer:
      max_events: 500000
    batch:
      timeout_secs: 0.5
    inputs:
      - xatu_server_events_router.libp2p_trace_add_peer
    bootstrap_servers: "${KAFKA_BROKERS}"
    key_field: "event.id"
    topic: libp2p-trace-add-peer
    compression: snappy
    healthcheck:
      enabled: true
    encoding:
      codec: json
  libp2p_trace_remove_peer_kafka:
    type: kafka
    buffer:
      max_events: 500000
    batch:
      timeout_secs: 0.5
    inputs:
      - xatu_server_events_router.libp2p_trace_remove_peer
    bootstrap_servers: "${KAFKA_BROKERS}"
    key_field: "event.id"
    topic: libp2p-trace-remove-peer
    compression: snappy
    healthcheck:
      enabled: true
    encoding:
      codec: json
  libp2p_trace_recv_rpc_kafka:
    type: kafka
    buffer:
      max_events: 500000
    batch:
      timeout_secs: 0.5
    inputs:
      - xatu_server_events_router.libp2p_trace_recv_rpc
    bootstrap_servers: "${KAFKA_BROKERS}"
    key_field: "event.id"
    topic: libp2p-trace-recv-rpc
    compression: snappy
    healthcheck:
      enabled: true
    encoding:
      codec: json
  libp2p_trace_send_rpc_kafka:
    type: kafka
    buffer:
      max_events: 500000
    batch:
      timeout_secs: 0.5
    inputs:
      - xatu_server_events_router.libp2p_trace_send_rpc
    bootstrap_servers: "${KAFKA_BROKERS}"
    key_field: "event.id"
    topic: libp2p-trace-send-rpc
    compression: snappy
    healthcheck:
      enabled: true
    encoding:
      codec: json
  libp2p_trace_drop_rpc_kafka:
    type: kafka
    buffer:
      max_events: 500000
    batch:
      timeout_secs: 0.5
    inputs:
      - xatu_server_events_router.libp2p_trace_drop_rpc
    bootstrap_servers: "${KAFKA_BROKERS}"
    key_field: "event.id"
    topic: libp2p-trace-drop-rpc
    compression: snappy
    healthcheck:
      enabled: true
    encoding:
      codec: json
  libp2p_trace_rpc_meta_control_ihave_kafka:
    type: kafka
    buffer:
      max_events: 500000
    batch:
      timeout_secs: 0.5
    inputs:
      - xatu_server_events_router.libp2p_trace_rpc_meta_control_ihave
    bootstrap_servers: "${KAFKA_BROKERS}"
    key_field: "event.id"
    topic: libp2p-trace-rpc-meta-control-ihave
    compression: snappy
    healthcheck:
      enabled: true
    encoding:
      codec: json
  libp2p_trace_rpc_meta_control_iwant_kafka:
    type: kafka
    buffer:
      max_events: 500000
    batch:
      timeout_secs: 0.5
    inputs:
      - xatu_server_events_router.libp2p_trace_rpc_meta_control_iwant
    bootstrap_servers: "${KAFKA_BROKERS}"
    key_field: "event.id"
    topic: libp2p-trace-rpc-meta-control-iwant
    compression: snappy
    healthcheck:
      enabled: true
    encoding:
      codec: json
  libp2p_trace_rpc_meta_control_idontwant_kafka:
    type: kafka
    buffer:
      max_events: 500000
    batch:
      timeout_secs: 0.5
    inputs:
      - xatu_server_events_router.libp2p_trace_rpc_meta_control_idontwant
    bootstrap_servers: "${KAFKA_BROKERS}"
    key_field: "event.id"
    topic: libp2p-trace-rpc-meta-control-idontwant
    compression: snappy
    healthcheck:
      enabled: true
    encoding:
      codec: json
  libp2p_trace_rpc_meta_control_graft_kafka:
    type: kafka
    buffer:
      max_events: 500000
    batch:
      timeout_secs: 0.5
    inputs:
      - xatu_server_events_router.libp2p_trace_rpc_meta_control_graft
    bootstrap_servers: "${KAFKA_BROKERS}"
    key_field: "event.id"
    topic: libp2p-trace-rpc-meta-control-graft
    compression: snappy
    healthcheck:
      enabled: true
    encoding:
      codec: json
  libp2p_trace_rpc_meta_control_prune_kafka:
    type: kafka
    buffer:
      max_events: 500000
    batch:
      timeout_secs: 0.5
    inputs:
      - xatu_server_events_router.libp2p_trace_rpc_meta_control_prune
    bootstrap_servers: "${KAFKA_BROKERS}"
    key_field: "event.id"
    topic: libp2p-trace-rpc-meta-control-prune
    compression: snappy
    healthcheck:
      enabled: true
    encoding:
      codec: json
  libp2p_trace_rpc_meta_subscription_kafka:
    type: kafka
    buffer:
      max_events: 500000
    batch:
      timeout_secs: 0.5
    inputs:
      - xatu_server_events_router.libp2p_trace_rpc_meta_subscription
    bootstrap_servers: "${KAFKA_BROKERS}"
    key_field: "event.id"
    topic: libp2p-trace-rpc-meta-subscription
    compression: snappy
    healthcheck:
      enabled: true
    encoding:
      codec: json
  libp2p_trace_rpc_meta_message_kafka:
    type: kafka
    buffer:
      max_events: 500000
    batch:
      timeout_secs: 0.5
    inputs:
      - xatu_server_events_router.libp2p_trace_rpc_meta_message
    bootstrap_servers: "${KAFKA_BROKERS}"
    key_field: "event.id"
    topic: libp2p-trace-rpc-meta-message
    compression: snappy
    healthcheck:
      enabled: true
    encoding:
      codec: json
  libp2p_trace_join_kafka:
    type: kafka
    buffer:
      max_events: 500000
    batch:
      timeout_secs: 0.5
    inputs:
      - xatu_server_events_router.libp2p_trace_join
    bootstrap_servers: "${KAFKA_BROKERS}"
    key_field: "event.id"
    topic: libp2p-trace-join
    compression: snappy
    healthcheck:
      enabled: true
    encoding:
      codec: json
  libp2p_trace_leave_kafka:
    type: kafka
    buffer:
      max_events: 500000
    batch:
      timeout_secs: 0.5
    inputs:
      - xatu_server_events_router.libp2p_trace_leave
    bootstrap_servers: "${KAFKA_BROKERS}"
    key_field: "event.id"
    topic: libp2p-trace-leave
    compression: snappy
    healthcheck:
      enabled: true
    encoding:
      codec: json
  libp2p_trace_graft_kafka:
    type: kafka
    buffer:
      max_events: 500000
    batch:
      timeout_secs: 0.5
    inputs:
      - xatu_server_events_router.libp2p_trace_graft
    bootstrap_servers: "${KAFKA_BROKERS}"
    key_field: "event.id"
    topic: libp2p-trace-graft
    compression: snappy
    healthcheck:
      enabled: true
    encoding:
      codec: json
  libp2p_trace_prune_kafka:
    type: kafka
    buffer:
      max_events: 500000
    batch:
      timeout_secs: 0.5
    inputs:
      - xatu_server_events_router.libp2p_trace_prune
    bootstrap_servers: "${KAFKA_BROKERS}"
    key_field: "event.id"
    topic: libp2p-trace-prune
    compression: snappy
    healthcheck:
      enabled: true
    encoding:
      codec: json
  libp2p_trace_deliver_message_kafka:
    type: kafka
    buffer:
      max_events: 500000
    batch:
      timeout_secs: 0.5
    inputs:
      - xatu_server_events_router.libp2p_trace_deliver_message
    bootstrap_servers: "${KAFKA_BROKERS}"
    key_field: "event.id"
    topic: libp2p-trace-deliver-message
    compression: snappy
    healthcheck:
      enabled: true
    encoding:
      codec: json
  libp2p_trace_reject_message_kafka:
    type: kafka
    buffer:
      max_events: 500000
    batch:
      timeout_secs: 0.5
    inputs:
      - xatu_server_events_router.libp2p_trace_reject_message
    bootstrap_servers: "${KAFKA_BROKERS}"
    key_field: "event.id"
    topic: libp2p-trace-reject-message
    compression: snappy
    healthcheck:
      enabled: true
    encoding:
      codec: json
  libp2p_trace_publish_message_kafka:
    type: kafka
    buffer:
      max_events: 500000
    batch:
      timeout_secs: 0.5
    inputs:
      - xatu_server_events_router.libp2p_trace_publish_message
    bootstrap_servers: "${KAFKA_BROKERS}"
    key_field: "event.id"
    topic: libp2p-trace-publish-message
    compression: snappy
    healthcheck:
      enabled: true
    encoding:
      codec: json
  libp2p_trace_duplicate_message_kafka:
    type: kafka
    buffer:
      max_events: 500000
    batch:
      timeout_secs: 0.5
    inputs:
      - xatu_server_events_router.libp2p_trace_duplicate_message
    bootstrap_servers: "${KAFKA_BROKERS}"
    key_field: "event.id"
    topic: libp2p-trace-duplicate-message
    compression: snappy
    healthcheck:
      enabled: true
    encoding:
      codec: json
  libp2p_trace_handle_metadata_kafka:
    type: kafka
    buffer:
      max_events: 500000
    batch:
      timeout_secs: 0.5
    inputs:
      - xatu_server_events_router.libp2p_trace_handle_metadata
    bootstrap_servers: "${KAFKA_BROKERS}"
    key_field: "event.id"
    topic: libp2p-trace-handle-metadata
    compression: snappy
    healthcheck:
      enabled: true
    encoding:
      codec: json
  libp2p_trace_handle_status_kafka:
    type: kafka
    buffer:
      max_events: 500000
    batch:
      timeout_secs: 0.5
    inputs:
      - xatu_server_events_router.libp2p_trace_handle_status
    bootstrap_servers: "${KAFKA_BROKERS}"
    key_field: "event.id"
    topic: libp2p-trace-handle-status
    compression: snappy
    healthcheck:
      enabled: true
    encoding:
      codec: json
  libp2p_trace_gossipsub_beacon_block_kafka:
    type: kafka
    buffer:
      max_events: 500000
    batch:
      timeout_secs: 0.5
    inputs:
      - xatu_server_events_router.libp2p_trace_gossipsub_beacon_block
    bootstrap_servers: "${KAFKA_BROKERS}"
    key_field: "event.id"
    topic: libp2p-trace-gossipsub-beacon-block
    compression: snappy
    healthcheck:
      enabled: true
    encoding:
      codec: json
  libp2p_trace_gossipsub_beacon_attestation_kafka:
    type: kafka
    buffer:
      max_events: 500000
    batch:
      timeout_secs: 0.5
    inputs:
      - xatu_server_events_router.libp2p_trace_gossipsub_beacon_attestation
    bootstrap_servers: "${KAFKA_BROKERS}"
    key_field: "event.id"
    topic: libp2p-trace-gossipsub-beacon-attestation
    compression: snappy
    healthcheck:
      enabled: true
    encoding:
      codec: json
  libp2p_trace_gossipsub_aggregate_and_proof_kafka:
    type: kafka
    buffer:
      max_events: 500000
    batch:
      timeout_secs: 0.5
    inputs:
      - xatu_server_events_router.libp2p_trace_gossipsub_aggregate_and_proof
    bootstrap_servers: "${KAFKA_BROKERS}"
    key_field: "event.id"
    topic: libp2p-trace-gossipsub-aggregate-and-proof
    compression: snappy
    healthcheck:
      enabled: true
    encoding:
      codec: json
  libp2p_trace_gossipsub_blob_sidecar_kafka:
    type: kafka
    buffer:
      max_events: 500000
    batch:
      timeout_secs: 0.5
    inputs:
      - xatu_server_events_router.libp2p_trace_gossipsub_blob_sidecar
    bootstrap_servers: "${KAFKA_BROKERS}"
    key_field: "event.id"
    topic: libp2p-trace-gossipsub-blob-sidecar
    compression: snappy
    healthcheck:
      enabled: true
    encoding:
      codec: json
  libp2p_trace_gossipsub_data_column_sidecar_kafka:
    type: kafka
    buffer:
      max_events: 500000
    batch:
      timeout_secs: 0.5
    inputs:
      - xatu_server_events_router.libp2p_trace_gossipsub_data_column_sidecar
    bootstrap_servers: "${KAFKA_BROKERS}"
    key_field: "event.id"
    topic: libp2p-trace-gossipsub-data-column-sidecar
    compression: snappy
    healthcheck:
      enabled: true
    encoding:
      codec: json
  libp2p_trace_synthetic_heartbeat_kafka:
    type: kafka
    buffer:
      max_events: 500000
    batch:
      timeout_secs: 0.5
    inputs:
      - xatu_server_events_router.libp2p_trace_synthetic_heartbeat
    bootstrap_servers: "${KAFKA_BROKERS}"
    key_field: "event.id"
    topic: libp2p-trace-synthetic-heartbeat
    compression: snappy
    healthcheck:
      enabled: true
    encoding:
      codec: json
  beacon_api_eth_v1_beacon_validators_kafka:
    type: kafka
    buffer:
      max_events: 500000
    batch:
      timeout_secs: 0.5
    inputs:
      - xatu_server_events_router.beacon_api_eth_v1_beacon_validators
    bootstrap_servers: "${KAFKA_BROKERS}"
    key_field: "event.id"
    topic: beacon-api-eth-v1-beacon-validators
    compression: snappy
    healthcheck:
      enabled: true
    encoding:
      codec: json
  mev_relay_bid_trace_builder_block_submission_kafka:
    type: kafka
    buffer:
      max_events: 500000
    batch:
      timeout_secs: 0.5
    inputs:
      - xatu_server_events_router.mev_relay_bid_trace_builder_block_submission
    bootstrap_servers: "${KAFKA_BROKERS}"
    key_field: "event.id"
    topic: mev-relay-bid-trace-builder-block-submission
    compression: snappy
    healthcheck:
      enabled: true
    encoding:
      codec: json
  mev_relay_proposer_payload_delivered_kafka:
    type: kafka
    buffer:
      max_events: 500000
    batch:
      timeout_secs: 0.5
    inputs:
      - xatu_server_events_router.mev_relay_proposer_payload_delivered
    bootstrap_servers: "${KAFKA_BROKERS}"
    key_field: "event.id"
    topic: mev-relay-proposer-payload-delivered
    compression: snappy
    healthcheck:
      enabled: true
    encoding:
      codec: json
  beacon_api_eth_v3_validator_block_kafka:
    type: kafka
    buffer:
      max_events: 500000
    batch:
      timeout_secs: 0.5
    inputs:
      - xatu_server_events_router.beacon_api_eth_v3_validator_block
    bootstrap_servers: "${KAFKA_BROKERS}"
    key_field: "event.id"
    topic: beacon-api-eth-v3-validator-block
    compression: snappy
    healthcheck:
      enabled: true
    encoding:
      codec: json
    librdkafka_options:
      message.max.bytes: "10485760" # 10MB
  mev_relay_validator_registration_kafka:
    type: kafka
    buffer:
      max_events: 500000
    batch:
      timeout_secs: 0.5
    inputs:
      - xatu_server_events_router.mev_relay_validator_registration
    bootstrap_servers: "${KAFKA_BROKERS}"
    key_field: "event.id"
    topic: mev-relay-validator-registration
    compression: snappy
    healthcheck:
      enabled: true
    encoding:
      codec: json
    librdkafka_options:
      message.max.bytes: "10485760" # 10MB
  node_record_consensus_kafka:
    type: kafka
    buffer:
      max_events: 500000
    batch:
      timeout_secs: 0.5
    inputs:
      - xatu_server_events_router.node_record_consensus
    bootstrap_servers: "${KAFKA_BROKERS}"
    key_field: "event.id"
    topic: node-record-consensus
    compression: snappy
    healthcheck:
      enabled: true
    encoding:
      codec: json
  node_record_execution_kafka:
    type: kafka
    buffer:
      max_events: 500000
    batch:
      timeout_secs: 0.5
    inputs:
      - xatu_server_events_router.node_record_execution
    bootstrap_servers: "${KAFKA_BROKERS}"
    key_field: "event.id"
    topic: node-record-execution
    compression: snappy
    healthcheck:
      enabled: true
    encoding:
      codec: json
  libp2p_rpc_data_column_custody_probe_kafka:
    type: kafka
    buffer:
      max_events: 500000
    batch:
      timeout_secs: 0.5
    inputs:
      - xatu_server_events_router.libp2p_rpc_data_column_custody_probe
    bootstrap_servers: "${KAFKA_BROKERS}"
    key_field: "event.id"
    topic: libp2p-rpc-data-column-custody-probe
    compression: snappy
    healthcheck:
      enabled: true
    encoding:
      codec: json