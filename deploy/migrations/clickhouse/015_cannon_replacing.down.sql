DROP TABLE IF EXISTS canonical_beacon_block on cluster '{cluster}' SYNC;
DROP TABLE IF EXISTS canonical_beacon_block_local on cluster '{cluster}' SYNC;
DROP TABLE IF EXISTS canonical_beacon_block_proposer_slashing on cluster '{cluster}' SYNC;
DROP TABLE IF EXISTS canonical_beacon_block_proposer_slashing_local on cluster '{cluster}' SYNC;
DROP TABLE IF EXISTS canonical_beacon_block_attester_slashing on cluster '{cluster}' SYNC;
DROP TABLE IF EXISTS canonical_beacon_block_attester_slashing_local on cluster '{cluster}' SYNC;
DROP TABLE IF EXISTS canonical_beacon_block_bls_to_execution_change on cluster '{cluster}' SYNC;
DROP TABLE IF EXISTS canonical_beacon_block_bls_to_execution_change_local on cluster '{cluster}' SYNC;
DROP TABLE IF EXISTS canonical_beacon_block_execution_transaction on cluster '{cluster}' SYNC;
DROP TABLE IF EXISTS canonical_beacon_block_execution_transaction_local on cluster '{cluster}' SYNC;
DROP TABLE IF EXISTS canonical_beacon_block_voluntary_exit on cluster '{cluster}' SYNC;
DROP TABLE IF EXISTS canonical_beacon_block_voluntary_exit_local on cluster '{cluster}' SYNC;
DROP TABLE IF EXISTS canonical_beacon_block_deposit on cluster '{cluster}' SYNC;
DROP TABLE IF EXISTS canonical_beacon_block_deposit_local on cluster '{cluster}' SYNC;
DROP TABLE IF EXISTS canonical_beacon_block_withdrawal on cluster '{cluster}' SYNC;
DROP TABLE IF EXISTS canonical_beacon_block_withdrawal_local on cluster '{cluster}' SYNC;


CREATE TABLE default.canonical_beacon_block_local on cluster '{cluster}'
(
    event_date_time DateTime64(3) CODEC(DoubleDelta, ZSTD(1)),
    slot UInt32 CODEC(DoubleDelta, ZSTD(1)),
    slot_start_date_time DateTime CODEC(DoubleDelta, ZSTD(1)),
    epoch UInt32 CODEC(DoubleDelta, ZSTD(1)),
    epoch_start_date_time DateTime CODEC(DoubleDelta, ZSTD(1)),
    block_root FixedString(66) CODEC(ZSTD(1)),
    block_version LowCardinality(String),
    block_total_bytes Nullable(UInt32) CODEC(ZSTD(1)),
    block_total_bytes_compressed Nullable(UInt32) CODEC(ZSTD(1)),
    parent_root FixedString(66) CODEC(ZSTD(1)),
    state_root FixedString(66) CODEC(ZSTD(1)),
    proposer_index UInt32 CODEC(ZSTD(1)),
    eth1_data_block_hash FixedString(66) CODEC(ZSTD(1)),
    eth1_data_deposit_root FixedString(66) CODEC(ZSTD(1)),
    execution_payload_block_hash FixedString(66) CODEC(ZSTD(1)),
    execution_payload_block_number UInt32 CODEC(DoubleDelta, ZSTD(1)),
    execution_payload_fee_recipient String CODEC(ZSTD(1)),
    execution_payload_state_root FixedString(66) CODEC(ZSTD(1)),
    execution_payload_parent_hash FixedString(66) CODEC(ZSTD(1)),
    execution_payload_transactions_count Nullable(UInt32) CODEC(ZSTD(1)),
    execution_payload_transactions_total_bytes Nullable(UInt32) CODEC(ZSTD(1)),
    execution_payload_transactions_total_bytes_compressed Nullable(UInt32) CODEC(ZSTD(1)),
    meta_client_name LowCardinality(String),
    meta_client_id String CODEC(ZSTD(1)),
    meta_client_version LowCardinality(String),
    meta_client_implementation LowCardinality(String),
    meta_client_os LowCardinality(String),
    meta_client_ip Nullable(IPv6) CODEC(ZSTD(1)),
    meta_client_geo_city LowCardinality(String) CODEC(ZSTD(1)),
    meta_client_geo_country LowCardinality(String) CODEC(ZSTD(1)),
    meta_client_geo_country_code LowCardinality(String) CODEC(ZSTD(1)),
    meta_client_geo_continent_code LowCardinality(String)  CODEC(ZSTD(1)),
    meta_client_geo_longitude Nullable(Float64)  CODEC(ZSTD(1)),
    meta_client_geo_latitude Nullable(Float64) CODEC(ZSTD(1)),
    meta_client_geo_autonomous_system_number Nullable(UInt32) CODEC(ZSTD(1)),
    meta_client_geo_autonomous_system_organization Nullable(String) CODEC(ZSTD(1)),
    meta_network_id Int32 CODEC(DoubleDelta, ZSTD(1)),
    meta_network_name LowCardinality(String),
    meta_consensus_version LowCardinality(String),
    meta_consensus_version_major LowCardinality(String),
    meta_consensus_version_minor LowCardinality(String),
    meta_consensus_version_patch LowCardinality(String),
    meta_consensus_implementation LowCardinality(String),
    meta_labels Map(String, String) CODEC(ZSTD(1))
) Engine = ReplicatedMergeTree('/clickhouse/{installation}/{cluster}/tables/{shard}/{database}/{table}', '{replica}')
PARTITION BY toStartOfMonth(slot_start_date_time)
ORDER BY (slot_start_date_time, meta_network_name, meta_client_name);

ALTER TABLE default.canonical_beacon_block_local ON CLUSTER '{cluster}'
MODIFY COMMENT 'Contains beacon block from a beacon node.',
COMMENT COLUMN event_date_time 'When the client fetched the beacon block from a beacon node',
COMMENT COLUMN slot 'The slot number from beacon block payload',
COMMENT COLUMN slot_start_date_time 'The wall clock time when the slot started',
COMMENT COLUMN epoch 'The epoch number from beacon block payload',
COMMENT COLUMN epoch_start_date_time 'The wall clock time when the epoch started',
COMMENT COLUMN block_root 'The root hash of the beacon block',
COMMENT COLUMN block_version 'The version of the beacon block',
COMMENT COLUMN block_total_bytes 'The total bytes of the beacon block payload',
COMMENT COLUMN block_total_bytes_compressed 'The total bytes of the beacon block payload when compressed using snappy',
COMMENT COLUMN parent_root 'The root hash of the parent beacon block',
COMMENT COLUMN state_root 'The root hash of the beacon state at this block',
COMMENT COLUMN proposer_index 'The index of the validator that proposed the beacon block',
COMMENT COLUMN eth1_data_block_hash 'The block hash of the associated execution block',
COMMENT COLUMN eth1_data_deposit_root 'The root of the deposit tree in the associated execution block',
COMMENT COLUMN execution_payload_block_hash 'The block hash of the execution payload',
COMMENT COLUMN execution_payload_block_number 'The block number of the execution payload',
COMMENT COLUMN execution_payload_fee_recipient 'The recipient of the fee for this execution payload',
COMMENT COLUMN execution_payload_state_root 'The state root of the execution payload',
COMMENT COLUMN execution_payload_parent_hash 'The parent hash of the execution payload',
COMMENT COLUMN execution_payload_transactions_count 'The transaction count of the execution payload',
COMMENT COLUMN execution_payload_transactions_total_bytes 'The transaction total bytes of the execution payload',
COMMENT COLUMN execution_payload_transactions_total_bytes_compressed 'The transaction total bytes of the execution payload when compressed using snappy',
COMMENT COLUMN meta_client_name 'Name of the client that generated the event',
COMMENT COLUMN meta_client_id 'Unique Session ID of the client that generated the event. This changes every time the client is restarted.',
COMMENT COLUMN meta_client_version 'Version of the client that generated the event',
COMMENT COLUMN meta_client_implementation 'Implementation of the client that generated the event',
COMMENT COLUMN meta_client_os 'Operating system of the client that generated the event',
COMMENT COLUMN meta_client_ip 'IP address of the client that generated the event',
COMMENT COLUMN meta_client_geo_city 'City of the client that generated the event',
COMMENT COLUMN meta_client_geo_country 'Country of the client that generated the event',
COMMENT COLUMN meta_client_geo_country_code 'Country code of the client that generated the event',
COMMENT COLUMN meta_client_geo_continent_code 'Continent code of the client that generated the event',
COMMENT COLUMN meta_client_geo_longitude 'Longitude of the client that generated the event',
COMMENT COLUMN meta_client_geo_latitude 'Latitude of the client that generated the event',
COMMENT COLUMN meta_client_geo_autonomous_system_number 'Autonomous system number of the client that generated the event',
COMMENT COLUMN meta_client_geo_autonomous_system_organization 'Autonomous system organization of the client that generated the event',
COMMENT COLUMN meta_network_id 'Ethereum network ID',
COMMENT COLUMN meta_network_name 'Ethereum network name',
COMMENT COLUMN meta_consensus_version 'Ethereum consensus client version that generated the event',
COMMENT COLUMN meta_consensus_version_major 'Ethereum consensus client major version that generated the event',
COMMENT COLUMN meta_consensus_version_minor 'Ethereum consensus client minor version that generated the event',
COMMENT COLUMN meta_consensus_version_patch 'Ethereum consensus client patch version that generated the event',
COMMENT COLUMN meta_consensus_implementation 'Ethereum consensus client implementation that generated the event',
COMMENT COLUMN meta_labels 'Labels associated with the event';

CREATE TABLE canonical_beacon_block on cluster '{cluster}' AS canonical_beacon_block_local
ENGINE = Distributed('{cluster}', default, canonical_beacon_block_local, rand());

CREATE TABLE default.canonical_beacon_block_proposer_slashing_local on cluster '{cluster}'
(
    event_date_time DateTime64(3) CODEC(DoubleDelta, ZSTD(1)),
    slot UInt32 CODEC(DoubleDelta, ZSTD(1)),
    slot_start_date_time DateTime CODEC(DoubleDelta, ZSTD(1)),
    epoch UInt32 CODEC(DoubleDelta, ZSTD(1)),
    epoch_start_date_time DateTime CODEC(DoubleDelta, ZSTD(1)),
    block_root FixedString(66) CODEC(ZSTD(1)),
    block_version LowCardinality(String),
    signed_header_1_message_slot UInt32 CODEC(DoubleDelta, ZSTD(1)),
    signed_header_1_message_proposer_index UInt32 CODEC(DoubleDelta, ZSTD(1)),
    signed_header_1_message_body_root FixedString(66) CODEC(ZSTD(1)),
    signed_header_1_message_parent_root FixedString(66) CODEC(ZSTD(1)),
    signed_header_1_message_state_root FixedString(66) CODEC(ZSTD(1)),
    signed_header_1_signature String CODEC(ZSTD(1)),
    signed_header_2_message_slot UInt32 CODEC(DoubleDelta, ZSTD(1)),
    signed_header_2_message_proposer_index UInt32 CODEC(DoubleDelta, ZSTD(1)),
    signed_header_2_message_body_root FixedString(66) CODEC(ZSTD(1)),
    signed_header_2_message_parent_root FixedString(66) CODEC(ZSTD(1)),
    signed_header_2_message_state_root FixedString(66) CODEC(ZSTD(1)),
    signed_header_2_signature String CODEC(ZSTD(1)),
    meta_client_name LowCardinality(String),
    meta_client_id String CODEC(ZSTD(1)),
    meta_client_version LowCardinality(String),
    meta_client_implementation LowCardinality(String),
    meta_client_os LowCardinality(String),
    meta_client_ip Nullable(IPv6) CODEC(ZSTD(1)),
    meta_client_geo_city LowCardinality(String) CODEC(ZSTD(1)),
    meta_client_geo_country LowCardinality(String) CODEC(ZSTD(1)),
    meta_client_geo_country_code LowCardinality(String) CODEC(ZSTD(1)),
    meta_client_geo_continent_code LowCardinality(String)  CODEC(ZSTD(1)),
    meta_client_geo_longitude Nullable(Float64)  CODEC(ZSTD(1)),
    meta_client_geo_latitude Nullable(Float64) CODEC(ZSTD(1)),
    meta_client_geo_autonomous_system_number Nullable(UInt32) CODEC(ZSTD(1)),
    meta_client_geo_autonomous_system_organization Nullable(String) CODEC(ZSTD(1)),
    meta_network_id Int32 CODEC(DoubleDelta, ZSTD(1)),
    meta_network_name LowCardinality(String),
    meta_consensus_version LowCardinality(String),
    meta_consensus_version_major LowCardinality(String),
    meta_consensus_version_minor LowCardinality(String),
    meta_consensus_version_patch LowCardinality(String),
    meta_consensus_implementation LowCardinality(String),
    meta_labels Map(String, String) CODEC(ZSTD(1))
) Engine = ReplicatedMergeTree('/clickhouse/{installation}/{cluster}/tables/{shard}/{database}/{table}', '{replica}')
PARTITION BY toStartOfMonth(slot_start_date_time)
ORDER BY (slot_start_date_time, meta_network_name, meta_client_name);

ALTER TABLE default.canonical_beacon_block_proposer_slashing_local ON CLUSTER '{cluster}'
MODIFY COMMENT 'Contains proposer slashing from a beacon block.',
COMMENT COLUMN event_date_time 'When the client fetched the beacon block from a beacon node',
COMMENT COLUMN slot 'The slot number from beacon block payload',
COMMENT COLUMN slot_start_date_time 'The wall clock time when the slot started',
COMMENT COLUMN epoch 'The epoch number from beacon block payload',
COMMENT COLUMN epoch_start_date_time 'The wall clock time when the epoch started',
COMMENT COLUMN block_root 'The root hash of the beacon block',
COMMENT COLUMN block_version 'The version of the beacon block',
COMMENT COLUMN signed_header_1_message_slot 'The slot number from the first signed header in the slashing payload',
COMMENT COLUMN signed_header_1_message_proposer_index 'The proposer index from the first signed header in the slashing payload',
COMMENT COLUMN signed_header_1_message_body_root 'The body root from the first signed header in the slashing payload',
COMMENT COLUMN signed_header_1_message_parent_root 'The parent root from the first signed header in the slashing payload',
COMMENT COLUMN signed_header_1_message_state_root 'The state root from the first signed header in the slashing payload',
COMMENT COLUMN signed_header_1_signature 'The signature for the first signed header in the slashing payload',
COMMENT COLUMN signed_header_2_message_slot 'The slot number from the second signed header in the slashing payload',
COMMENT COLUMN signed_header_2_message_proposer_index 'The proposer index from the second signed header in the slashing payload',
COMMENT COLUMN signed_header_2_message_body_root 'The body root from the second signed header in the slashing payload',
COMMENT COLUMN signed_header_2_message_parent_root 'The parent root from the second signed header in the slashing payload',
COMMENT COLUMN signed_header_2_message_state_root 'The state root from the second signed header in the slashing payload',
COMMENT COLUMN signed_header_2_signature 'The signature for the second signed header in the slashing payload',
COMMENT COLUMN meta_client_name 'Name of the client that generated the event',
COMMENT COLUMN meta_client_id 'Unique Session ID of the client that generated the event. This changes every time the client is restarted.',
COMMENT COLUMN meta_client_version 'Version of the client that generated the event',
COMMENT COLUMN meta_client_implementation 'Implementation of the client that generated the event',
COMMENT COLUMN meta_client_os 'Operating system of the client that generated the event',
COMMENT COLUMN meta_client_ip 'IP address of the client that generated the event',
COMMENT COLUMN meta_client_geo_city 'City of the client that generated the event',
COMMENT COLUMN meta_client_geo_country 'Country of the client that generated the event',
COMMENT COLUMN meta_client_geo_country_code 'Country code of the client that generated the event',
COMMENT COLUMN meta_client_geo_continent_code 'Continent code of the client that generated the event',
COMMENT COLUMN meta_client_geo_longitude 'Longitude of the client that generated the event',
COMMENT COLUMN meta_client_geo_latitude 'Latitude of the client that generated the event',
COMMENT COLUMN meta_client_geo_autonomous_system_number 'Autonomous system number of the client that generated the event',
COMMENT COLUMN meta_client_geo_autonomous_system_organization 'Autonomous system organization of the client that generated the event',
COMMENT COLUMN meta_network_id 'Ethereum network ID',
COMMENT COLUMN meta_network_name 'Ethereum network name',
COMMENT COLUMN meta_consensus_version 'Ethereum consensus client version that generated the event',
COMMENT COLUMN meta_consensus_version_major 'Ethereum consensus client major version that generated the event',
COMMENT COLUMN meta_consensus_version_minor 'Ethereum consensus client minor version that generated the event',
COMMENT COLUMN meta_consensus_version_patch 'Ethereum consensus client patch version that generated the event',
COMMENT COLUMN meta_consensus_implementation 'Ethereum consensus client implementation that generated the event',
COMMENT COLUMN meta_labels 'Labels associated with the event';

CREATE TABLE canonical_beacon_block_proposer_slashing on cluster '{cluster}' AS canonical_beacon_block_proposer_slashing_local
ENGINE = Distributed('{cluster}', default, canonical_beacon_block_proposer_slashing_local, rand());

CREATE TABLE default.canonical_beacon_block_attester_slashing_local on cluster '{cluster}'
(
    event_date_time DateTime64(3) CODEC(DoubleDelta, ZSTD(1)),
    slot UInt32 CODEC(DoubleDelta, ZSTD(1)),
    slot_start_date_time DateTime CODEC(DoubleDelta, ZSTD(1)),
    epoch UInt32 CODEC(DoubleDelta, ZSTD(1)),
    epoch_start_date_time DateTime CODEC(DoubleDelta, ZSTD(1)),
    block_root FixedString(66) CODEC(ZSTD(1)),
    block_version LowCardinality(String),
    attestation_1_attesting_indices Array(UInt32) Codec(ZSTD(1)),
    attestation_1_signature String CODEC(ZSTD(1)),
    attestation_1_data_beacon_block_root FixedString(66) CODEC(ZSTD(1)),
    attestation_1_data_slot UInt32 CODEC(DoubleDelta, ZSTD(1)),
    attestation_1_data_index UInt32 Codec(ZSTD(1)),
    attestation_1_data_source_epoch UInt32 CODEC(DoubleDelta, ZSTD(1)),
    attestation_1_data_source_root FixedString(66) CODEC(ZSTD(1)),
    attestation_1_data_target_epoch UInt32 CODEC(DoubleDelta, ZSTD(1)),
    attestation_1_data_target_root FixedString(66) CODEC(ZSTD(1)),
    attestation_2_attesting_indices Array(UInt32) Codec(ZSTD(1)),
    attestation_2_signature String CODEC(ZSTD(1)),
    attestation_2_data_beacon_block_root FixedString(66) CODEC(ZSTD(1)),
    attestation_2_data_slot UInt32 CODEC(DoubleDelta, ZSTD(1)),
    attestation_2_data_index UInt32 Codec(ZSTD(1)),
    attestation_2_data_source_epoch UInt32 CODEC(DoubleDelta, ZSTD(1)),
    attestation_2_data_source_root FixedString(66) CODEC(ZSTD(1)),
    attestation_2_data_target_epoch UInt32 CODEC(DoubleDelta, ZSTD(1)),
    attestation_2_data_target_root FixedString(66) CODEC(ZSTD(1)),
    meta_client_name LowCardinality(String),
    meta_client_id String CODEC(ZSTD(1)),
    meta_client_version LowCardinality(String),
    meta_client_implementation LowCardinality(String),
    meta_client_os LowCardinality(String),
    meta_client_ip Nullable(IPv6) CODEC(ZSTD(1)),
    meta_client_geo_city LowCardinality(String) CODEC(ZSTD(1)),
    meta_client_geo_country LowCardinality(String) CODEC(ZSTD(1)),
    meta_client_geo_country_code LowCardinality(String) CODEC(ZSTD(1)),
    meta_client_geo_continent_code LowCardinality(String)  CODEC(ZSTD(1)),
    meta_client_geo_longitude Nullable(Float64)  CODEC(ZSTD(1)),
    meta_client_geo_latitude Nullable(Float64) CODEC(ZSTD(1)),
    meta_client_geo_autonomous_system_number Nullable(UInt32) CODEC(ZSTD(1)),
    meta_client_geo_autonomous_system_organization Nullable(String) CODEC(ZSTD(1)),
    meta_network_id Int32 CODEC(DoubleDelta, ZSTD(1)),
    meta_network_name LowCardinality(String),
    meta_consensus_version LowCardinality(String),
    meta_consensus_version_major LowCardinality(String),
    meta_consensus_version_minor LowCardinality(String),
    meta_consensus_version_patch LowCardinality(String),
    meta_consensus_implementation LowCardinality(String),
    meta_labels Map(String, String) CODEC(ZSTD(1))
) Engine = ReplicatedMergeTree('/clickhouse/{installation}/{cluster}/tables/{shard}/{database}/{table}', '{replica}')
PARTITION BY toStartOfMonth(slot_start_date_time)
ORDER BY (slot_start_date_time, meta_network_name, meta_client_name);

ALTER TABLE default.canonical_beacon_block_attester_slashing_local ON CLUSTER '{cluster}'
MODIFY COMMENT 'Contains attester slashing from a beacon block.',
COMMENT COLUMN event_date_time 'When the client fetched the beacon block from a beacon node',
COMMENT COLUMN slot 'The slot number from beacon block payload',
COMMENT COLUMN slot_start_date_time 'The wall clock time when the slot started',
COMMENT COLUMN epoch 'The epoch number from beacon block payload',
COMMENT COLUMN epoch_start_date_time 'The wall clock time when the epoch started',
COMMENT COLUMN block_root 'The root hash of the beacon block',
COMMENT COLUMN block_version 'The version of the beacon block',
COMMENT COLUMN attestation_1_attesting_indices 'The attesting indices from the first attestation in the slashing payload',
COMMENT COLUMN attestation_1_signature 'The signature from the first attestation in the slashing payload',
COMMENT COLUMN attestation_1_data_beacon_block_root 'The beacon block root from the first attestation in the slashing payload',
COMMENT COLUMN attestation_1_data_slot 'The slot number from the first attestation in the slashing payload',
COMMENT COLUMN attestation_1_data_index 'The attestor index from the first attestation in the slashing payload',
COMMENT COLUMN attestation_1_data_source_epoch 'The source epoch number from the first attestation in the slashing payload',
COMMENT COLUMN attestation_1_data_source_root 'The source root from the first attestation in the slashing payload',
COMMENT COLUMN attestation_1_data_target_epoch 'The target epoch number from the first attestation in the slashing payload',
COMMENT COLUMN attestation_1_data_target_root 'The target root from the first attestation in the slashing payload',
COMMENT COLUMN attestation_2_attesting_indices 'The attesting indices from the second attestation in the slashing payload',
COMMENT COLUMN attestation_2_signature 'The signature from the second attestation in the slashing payload',
COMMENT COLUMN attestation_2_data_beacon_block_root 'The beacon block root from the second attestation in the slashing payload',
COMMENT COLUMN attestation_2_data_slot 'The slot number from the second attestation in the slashing payload',
COMMENT COLUMN attestation_2_data_index 'The attestor index from the second attestation in the slashing payload',
COMMENT COLUMN attestation_2_data_source_epoch 'The source epoch number from the second attestation in the slashing payload',
COMMENT COLUMN attestation_2_data_source_root 'The source root from the second attestation in the slashing payload',
COMMENT COLUMN attestation_2_data_target_epoch 'The target epoch number from the second attestation in the slashing payload',
COMMENT COLUMN attestation_2_data_target_root 'The target root from the second attestation in the slashing payload',
COMMENT COLUMN meta_client_name 'Name of the client that generated the event',
COMMENT COLUMN meta_client_id 'Unique Session ID of the client that generated the event. This changes every time the client is restarted.',
COMMENT COLUMN meta_client_version 'Version of the client that generated the event',
COMMENT COLUMN meta_client_implementation 'Implementation of the client that generated the event',
COMMENT COLUMN meta_client_os 'Operating system of the client that generated the event',
COMMENT COLUMN meta_client_ip 'IP address of the client that generated the event',
COMMENT COLUMN meta_client_geo_city 'City of the client that generated the event',
COMMENT COLUMN meta_client_geo_country 'Country of the client that generated the event',
COMMENT COLUMN meta_client_geo_country_code 'Country code of the client that generated the event',
COMMENT COLUMN meta_client_geo_continent_code 'Continent code of the client that generated the event',
COMMENT COLUMN meta_client_geo_longitude 'Longitude of the client that generated the event',
COMMENT COLUMN meta_client_geo_latitude 'Latitude of the client that generated the event',
COMMENT COLUMN meta_client_geo_autonomous_system_number 'Autonomous system number of the client that generated the event',
COMMENT COLUMN meta_client_geo_autonomous_system_organization 'Autonomous system organization of the client that generated the event',
COMMENT COLUMN meta_network_id 'Ethereum network ID',
COMMENT COLUMN meta_network_name 'Ethereum network name',
COMMENT COLUMN meta_consensus_version 'Ethereum consensus client version that generated the event',
COMMENT COLUMN meta_consensus_version_major 'Ethereum consensus client major version that generated the event',
COMMENT COLUMN meta_consensus_version_minor 'Ethereum consensus client minor version that generated the event',
COMMENT COLUMN meta_consensus_version_patch 'Ethereum consensus client patch version that generated the event',
COMMENT COLUMN meta_consensus_implementation 'Ethereum consensus client implementation that generated the event',
COMMENT COLUMN meta_labels 'Labels associated with the event';

CREATE TABLE canonical_beacon_block_attester_slashing on cluster '{cluster}' AS canonical_beacon_block_attester_slashing_local
ENGINE = Distributed('{cluster}', default, canonical_beacon_block_attester_slashing_local, rand());

CREATE TABLE default.canonical_beacon_block_bls_to_execution_change_local on cluster '{cluster}'
(
    event_date_time DateTime64(3) CODEC(DoubleDelta, ZSTD(1)),
    slot UInt32 CODEC(DoubleDelta, ZSTD(1)),
    slot_start_date_time DateTime CODEC(DoubleDelta, ZSTD(1)),
    epoch UInt32 CODEC(DoubleDelta, ZSTD(1)),
    epoch_start_date_time DateTime CODEC(DoubleDelta, ZSTD(1)),
    block_root FixedString(66) CODEC(ZSTD(1)),
    block_version LowCardinality(String),
    exchanging_message_validator_index UInt32 CODEC(ZSTD(1)),
    exchanging_message_from_bls_pubkey String CODEC(ZSTD(1)),
    exchanging_message_to_execution_address FixedString(42) CODEC(ZSTD(1)),
    exchanging_signature String CODEC(ZSTD(1)),
    meta_client_name LowCardinality(String),
    meta_client_id String CODEC(ZSTD(1)),
    meta_client_version LowCardinality(String),
    meta_client_implementation LowCardinality(String),
    meta_client_os LowCardinality(String),
    meta_client_ip Nullable(IPv6) CODEC(ZSTD(1)),
    meta_client_geo_city LowCardinality(String) CODEC(ZSTD(1)),
    meta_client_geo_country LowCardinality(String) CODEC(ZSTD(1)),
    meta_client_geo_country_code LowCardinality(String) CODEC(ZSTD(1)),
    meta_client_geo_continent_code LowCardinality(String)  CODEC(ZSTD(1)),
    meta_client_geo_longitude Nullable(Float64)  CODEC(ZSTD(1)),
    meta_client_geo_latitude Nullable(Float64) CODEC(ZSTD(1)),
    meta_client_geo_autonomous_system_number Nullable(UInt32) CODEC(ZSTD(1)),
    meta_client_geo_autonomous_system_organization Nullable(String) CODEC(ZSTD(1)),
    meta_network_id Int32 CODEC(DoubleDelta, ZSTD(1)),
    meta_network_name LowCardinality(String),
    meta_consensus_version LowCardinality(String),
    meta_consensus_version_major LowCardinality(String),
    meta_consensus_version_minor LowCardinality(String),
    meta_consensus_version_patch LowCardinality(String),
    meta_consensus_implementation LowCardinality(String),
    meta_labels Map(String, String) CODEC(ZSTD(1))
) Engine = ReplicatedMergeTree('/clickhouse/{installation}/{cluster}/tables/{shard}/{database}/{table}', '{replica}')
PARTITION BY toStartOfMonth(slot_start_date_time)
ORDER BY (slot_start_date_time, meta_network_name, meta_client_name);

ALTER TABLE default.canonical_beacon_block_bls_to_execution_change_local ON CLUSTER '{cluster}'
MODIFY COMMENT 'Contains bls to execution change from a beacon block.',
COMMENT COLUMN event_date_time 'When the client fetched the beacon block from a beacon node',
COMMENT COLUMN slot 'The slot number from beacon block payload',
COMMENT COLUMN slot_start_date_time 'The wall clock time when the slot started',
COMMENT COLUMN epoch 'The epoch number from beacon block payload',
COMMENT COLUMN epoch_start_date_time 'The wall clock time when the epoch started',
COMMENT COLUMN block_root 'The root hash of the beacon block',
COMMENT COLUMN block_version 'The version of the beacon block',
COMMENT COLUMN exchanging_message_validator_index 'The validator index from the exchanging message',
COMMENT COLUMN exchanging_message_from_bls_pubkey 'The BLS public key from the exchanging message',
COMMENT COLUMN exchanging_message_to_execution_address 'The execution address from the exchanging message',
COMMENT COLUMN exchanging_signature 'The signature for the exchanging message',
COMMENT COLUMN meta_client_name 'Name of the client that generated the event',
COMMENT COLUMN meta_client_id 'Unique Session ID of the client that generated the event. This changes every time the client is restarted.',
COMMENT COLUMN meta_client_version 'Version of the client that generated the event',
COMMENT COLUMN meta_client_implementation 'Implementation of the client that generated the event',
COMMENT COLUMN meta_client_os 'Operating system of the client that generated the event',
COMMENT COLUMN meta_client_ip 'IP address of the client that generated the event',
COMMENT COLUMN meta_client_geo_city 'City of the client that generated the event',
COMMENT COLUMN meta_client_geo_country 'Country of the client that generated the event',
COMMENT COLUMN meta_client_geo_country_code 'Country code of the client that generated the event',
COMMENT COLUMN meta_client_geo_continent_code 'Continent code of the client that generated the event',
COMMENT COLUMN meta_client_geo_longitude 'Longitude of the client that generated the event',
COMMENT COLUMN meta_client_geo_latitude 'Latitude of the client that generated the event',
COMMENT COLUMN meta_client_geo_autonomous_system_number 'Autonomous system number of the client that generated the event',
COMMENT COLUMN meta_client_geo_autonomous_system_organization 'Autonomous system organization of the client that generated the event',
COMMENT COLUMN meta_network_id 'Ethereum network ID',
COMMENT COLUMN meta_network_name 'Ethereum network name',
COMMENT COLUMN meta_consensus_version 'Ethereum consensus client version that generated the event',
COMMENT COLUMN meta_consensus_version_major 'Ethereum consensus client major version that generated the event',
COMMENT COLUMN meta_consensus_version_minor 'Ethereum consensus client minor version that generated the event',
COMMENT COLUMN meta_consensus_version_patch 'Ethereum consensus client patch version that generated the event',
COMMENT COLUMN meta_consensus_implementation 'Ethereum consensus client implementation that generated the event',
COMMENT COLUMN meta_labels 'Labels associated with the event';

CREATE TABLE canonical_beacon_block_bls_to_execution_change on cluster '{cluster}' AS canonical_beacon_block_bls_to_execution_change_local
ENGINE = Distributed('{cluster}', default, canonical_beacon_block_bls_to_execution_change_local, rand());

CREATE TABLE default.canonical_beacon_block_execution_transaction_local on cluster '{cluster}'
(
    event_date_time DateTime64(3) CODEC(DoubleDelta, ZSTD(1)),
    slot UInt32 CODEC(DoubleDelta, ZSTD(1)),
    slot_start_date_time DateTime CODEC(DoubleDelta, ZSTD(1)),
    epoch UInt32 CODEC(DoubleDelta, ZSTD(1)),
    epoch_start_date_time DateTime CODEC(DoubleDelta, ZSTD(1)),
    block_root FixedString(66) CODEC(ZSTD(1)),
    block_version LowCardinality(String),
    position UInt32 CODEC(DoubleDelta, ZSTD(1)),
    hash FixedString(66) Codec(ZSTD(1)),
    from FixedString(42) Codec(ZSTD(1)),
    to Nullable(FixedString(42)) Codec(ZSTD(1)),
    nonce UInt64 Codec(ZSTD(1)),
    gas_price UInt128 Codec(ZSTD(1)),
    gas UInt64 Codec(ZSTD(1)),
    value UInt128 Codec(ZSTD(1)),
    type UInt8 Codec(ZSTD(1)),
    size UInt32 Codec(ZSTD(1)),
    call_data_size UInt32 Codec(ZSTD(1)),
    meta_client_name LowCardinality(String),
    meta_client_id String CODEC(ZSTD(1)),
    meta_client_version LowCardinality(String),
    meta_client_implementation LowCardinality(String),
    meta_client_os LowCardinality(String),
    meta_client_ip Nullable(IPv6) CODEC(ZSTD(1)),
    meta_client_geo_city LowCardinality(String) CODEC(ZSTD(1)),
    meta_client_geo_country LowCardinality(String) CODEC(ZSTD(1)),
    meta_client_geo_country_code LowCardinality(String) CODEC(ZSTD(1)),
    meta_client_geo_continent_code LowCardinality(String)  CODEC(ZSTD(1)),
    meta_client_geo_longitude Nullable(Float64)  CODEC(ZSTD(1)),
    meta_client_geo_latitude Nullable(Float64) CODEC(ZSTD(1)),
    meta_client_geo_autonomous_system_number Nullable(UInt32) CODEC(ZSTD(1)),
    meta_client_geo_autonomous_system_organization Nullable(String) CODEC(ZSTD(1)),
    meta_network_id Int32 CODEC(DoubleDelta, ZSTD(1)),
    meta_network_name LowCardinality(String),
    meta_consensus_version LowCardinality(String),
    meta_consensus_version_major LowCardinality(String),
    meta_consensus_version_minor LowCardinality(String),
    meta_consensus_version_patch LowCardinality(String),
    meta_consensus_implementation LowCardinality(String),
    meta_labels Map(String, String) CODEC(ZSTD(1))
) Engine = ReplicatedMergeTree('/clickhouse/{installation}/{cluster}/tables/{shard}/{database}/{table}', '{replica}')
PARTITION BY toStartOfMonth(slot_start_date_time)
ORDER BY (slot_start_date_time, meta_network_name, meta_client_name);

ALTER TABLE default.canonical_beacon_block_execution_transaction_local ON CLUSTER '{cluster}'
MODIFY COMMENT 'Contains execution transaction from a beacon block.',
COMMENT COLUMN event_date_time 'When the client fetched the beacon block from a beacon node',
COMMENT COLUMN slot 'The slot number from beacon block payload',
COMMENT COLUMN slot_start_date_time 'The wall clock time when the slot started',
COMMENT COLUMN epoch 'The epoch number from beacon block payload',
COMMENT COLUMN epoch_start_date_time 'The wall clock time when the epoch started',
COMMENT COLUMN block_root 'The root hash of the beacon block',
COMMENT COLUMN block_version 'The version of the beacon block',
COMMENT COLUMN position 'The position of the transaction in the beacon block',
COMMENT COLUMN hash 'The hash of the transaction',
COMMENT COLUMN from 'The address of the account that sent the transaction',
COMMENT COLUMN to 'The address of the account that is the transaction recipient',
COMMENT COLUMN nonce 'The nonce of the sender account at the time of the transaction',
COMMENT COLUMN gas_price 'The gas price of the transaction in wei',
COMMENT COLUMN gas 'The maximum gas provided for the transaction execution',
COMMENT COLUMN value 'The value transferred with the transaction in wei',
COMMENT COLUMN type 'The type of the transaction',
COMMENT COLUMN size 'The size of the transaction data in bytes',
COMMENT COLUMN call_data_size 'The size of the call data of the transaction in bytes',
COMMENT COLUMN meta_client_name 'Name of the client that generated the event',
COMMENT COLUMN meta_client_id 'Unique Session ID of the client that generated the event. This changes every time the client is restarted.',
COMMENT COLUMN meta_client_version 'Version of the client that generated the event',
COMMENT COLUMN meta_client_implementation 'Implementation of the client that generated the event',
COMMENT COLUMN meta_client_os 'Operating system of the client that generated the event',
COMMENT COLUMN meta_client_ip 'IP address of the client that generated the event',
COMMENT COLUMN meta_client_geo_city 'City of the client that generated the event',
COMMENT COLUMN meta_client_geo_country 'Country of the client that generated the event',
COMMENT COLUMN meta_client_geo_country_code 'Country code of the client that generated the event',
COMMENT COLUMN meta_client_geo_continent_code 'Continent code of the client that generated the event',
COMMENT COLUMN meta_client_geo_longitude 'Longitude of the client that generated the event',
COMMENT COLUMN meta_client_geo_latitude 'Latitude of the client that generated the event',
COMMENT COLUMN meta_client_geo_autonomous_system_number 'Autonomous system number of the client that generated the event',
COMMENT COLUMN meta_client_geo_autonomous_system_organization 'Autonomous system organization of the client that generated the event',
COMMENT COLUMN meta_network_id 'Ethereum network ID',
COMMENT COLUMN meta_network_name 'Ethereum network name',
COMMENT COLUMN meta_consensus_version 'Ethereum consensus client version that generated the event',
COMMENT COLUMN meta_consensus_version_major 'Ethereum consensus client major version that generated the event',
COMMENT COLUMN meta_consensus_version_minor 'Ethereum consensus client minor version that generated the event',
COMMENT COLUMN meta_consensus_version_patch 'Ethereum consensus client patch version that generated the event',
COMMENT COLUMN meta_consensus_implementation 'Ethereum consensus client implementation that generated the event',
COMMENT COLUMN meta_labels 'Labels associated with the event';

CREATE TABLE canonical_beacon_block_execution_transaction on cluster '{cluster}' AS canonical_beacon_block_execution_transaction_local
ENGINE = Distributed('{cluster}', default, canonical_beacon_block_execution_transaction_local, rand());

CREATE TABLE default.canonical_beacon_block_voluntary_exit_local on cluster '{cluster}'
(
    event_date_time DateTime64(3) CODEC(DoubleDelta, ZSTD(1)),
    slot UInt32 CODEC(DoubleDelta, ZSTD(1)),
    slot_start_date_time DateTime CODEC(DoubleDelta, ZSTD(1)),
    epoch UInt32 CODEC(DoubleDelta, ZSTD(1)),
    epoch_start_date_time DateTime CODEC(DoubleDelta, ZSTD(1)),
    block_root FixedString(66) CODEC(ZSTD(1)),
    block_version LowCardinality(String),
    voluntary_exit_message_epoch UInt32 CODEC(DoubleDelta, ZSTD(1)),
    voluntary_exit_message_validator_index UInt32 CODEC(ZSTD(1)),
    voluntary_exit_signature String CODEC(ZSTD(1)),
    meta_client_name LowCardinality(String),
    meta_client_id String CODEC(ZSTD(1)),
    meta_client_version LowCardinality(String),
    meta_client_implementation LowCardinality(String),
    meta_client_os LowCardinality(String),
    meta_client_ip Nullable(IPv6) CODEC(ZSTD(1)),
    meta_client_geo_city LowCardinality(String) CODEC(ZSTD(1)),
    meta_client_geo_country LowCardinality(String) CODEC(ZSTD(1)),
    meta_client_geo_country_code LowCardinality(String) CODEC(ZSTD(1)),
    meta_client_geo_continent_code LowCardinality(String)  CODEC(ZSTD(1)),
    meta_client_geo_longitude Nullable(Float64)  CODEC(ZSTD(1)),
    meta_client_geo_latitude Nullable(Float64) CODEC(ZSTD(1)),
    meta_client_geo_autonomous_system_number Nullable(UInt32) CODEC(ZSTD(1)),
    meta_client_geo_autonomous_system_organization Nullable(String) CODEC(ZSTD(1)),
    meta_network_id Int32 CODEC(DoubleDelta, ZSTD(1)),
    meta_network_name LowCardinality(String),
    meta_consensus_version LowCardinality(String),
    meta_consensus_version_major LowCardinality(String),
    meta_consensus_version_minor LowCardinality(String),
    meta_consensus_version_patch LowCardinality(String),
    meta_consensus_implementation LowCardinality(String),
    meta_labels Map(String, String) CODEC(ZSTD(1))
) Engine = ReplicatedMergeTree('/clickhouse/{installation}/{cluster}/tables/{shard}/{database}/{table}', '{replica}')
PARTITION BY toStartOfMonth(slot_start_date_time)
ORDER BY (slot_start_date_time, meta_network_name, meta_client_name);

ALTER TABLE default.canonical_beacon_block_voluntary_exit_local ON CLUSTER '{cluster}'
MODIFY COMMENT 'Contains a voluntary exit from a beacon block.',
COMMENT COLUMN event_date_time 'When the client fetched the beacon block from a beacon node',
COMMENT COLUMN slot 'The slot number from beacon block payload',
COMMENT COLUMN slot_start_date_time 'The wall clock time when the slot started',
COMMENT COLUMN epoch 'The epoch number from beacon block payload',
COMMENT COLUMN epoch_start_date_time 'The wall clock time when the epoch started',
COMMENT COLUMN block_root 'The root hash of the beacon block',
COMMENT COLUMN block_version 'The version of the beacon block',
COMMENT COLUMN voluntary_exit_message_epoch 'The epoch number from the exit message',
COMMENT COLUMN voluntary_exit_message_validator_index 'The validator index from the exit message',
COMMENT COLUMN voluntary_exit_signature 'The signature of the exit message',
COMMENT COLUMN meta_client_name 'Name of the client that generated the event',
COMMENT COLUMN meta_client_id 'Unique Session ID of the client that generated the event. This changes every time the client is restarted.',
COMMENT COLUMN meta_client_version 'Version of the client that generated the event',
COMMENT COLUMN meta_client_implementation 'Implementation of the client that generated the event',
COMMENT COLUMN meta_client_os 'Operating system of the client that generated the event',
COMMENT COLUMN meta_client_ip 'IP address of the client that generated the event',
COMMENT COLUMN meta_client_geo_city 'City of the client that generated the event',
COMMENT COLUMN meta_client_geo_country 'Country of the client that generated the event',
COMMENT COLUMN meta_client_geo_country_code 'Country code of the client that generated the event',
COMMENT COLUMN meta_client_geo_continent_code 'Continent code of the client that generated the event',
COMMENT COLUMN meta_client_geo_longitude 'Longitude of the client that generated the event',
COMMENT COLUMN meta_client_geo_latitude 'Latitude of the client that generated the event',
COMMENT COLUMN meta_client_geo_autonomous_system_number 'Autonomous system number of the client that generated the event',
COMMENT COLUMN meta_client_geo_autonomous_system_organization 'Autonomous system organization of the client that generated the event',
COMMENT COLUMN meta_network_id 'Ethereum network ID',
COMMENT COLUMN meta_network_name 'Ethereum network name',
COMMENT COLUMN meta_consensus_version 'Ethereum consensus client version that generated the event',
COMMENT COLUMN meta_consensus_version_major 'Ethereum consensus client major version that generated the event',
COMMENT COLUMN meta_consensus_version_minor 'Ethereum consensus client minor version that generated the event',
COMMENT COLUMN meta_consensus_version_patch 'Ethereum consensus client patch version that generated the event',
COMMENT COLUMN meta_consensus_implementation 'Ethereum consensus client implementation that generated the event',
COMMENT COLUMN meta_labels 'Labels associated with the event';

CREATE TABLE canonical_beacon_block_voluntary_exit on cluster '{cluster}' AS canonical_beacon_block_voluntary_exit_local
ENGINE = Distributed('{cluster}', default, canonical_beacon_block_voluntary_exit_local, rand());

CREATE TABLE default.canonical_beacon_block_deposit_local on cluster '{cluster}'
(
    event_date_time DateTime64(3) CODEC(DoubleDelta, ZSTD(1)),
    slot UInt32 CODEC(DoubleDelta, ZSTD(1)),
    slot_start_date_time DateTime CODEC(DoubleDelta, ZSTD(1)),
    epoch UInt32 CODEC(DoubleDelta, ZSTD(1)),
    epoch_start_date_time DateTime CODEC(DoubleDelta, ZSTD(1)),
    block_root FixedString(66) CODEC(ZSTD(1)),
    block_version LowCardinality(String),
    deposit_proof Array(String) CODEC(ZSTD(1)),
    deposit_data_pubkey String CODEC(ZSTD(1)),
    deposit_data_withdrawal_credentials FixedString(66) CODEC(ZSTD(1)),
    deposit_data_amount UInt128 CODEC(ZSTD(1)),
    deposit_data_signature String CODEC(ZSTD(1)),
    meta_client_name LowCardinality(String),
    meta_client_id String CODEC(ZSTD(1)),
    meta_client_version LowCardinality(String),
    meta_client_implementation LowCardinality(String),
    meta_client_os LowCardinality(String),
    meta_client_ip Nullable(IPv6) CODEC(ZSTD(1)),
    meta_client_geo_city LowCardinality(String) CODEC(ZSTD(1)),
    meta_client_geo_country LowCardinality(String) CODEC(ZSTD(1)),
    meta_client_geo_country_code LowCardinality(String) CODEC(ZSTD(1)),
    meta_client_geo_continent_code LowCardinality(String)  CODEC(ZSTD(1)),
    meta_client_geo_longitude Nullable(Float64)  CODEC(ZSTD(1)),
    meta_client_geo_latitude Nullable(Float64) CODEC(ZSTD(1)),
    meta_client_geo_autonomous_system_number Nullable(UInt32) CODEC(ZSTD(1)),
    meta_client_geo_autonomous_system_organization Nullable(String) CODEC(ZSTD(1)),
    meta_network_id Int32 CODEC(DoubleDelta, ZSTD(1)),
    meta_network_name LowCardinality(String),
    meta_consensus_version LowCardinality(String),
    meta_consensus_version_major LowCardinality(String),
    meta_consensus_version_minor LowCardinality(String),
    meta_consensus_version_patch LowCardinality(String),
    meta_consensus_implementation LowCardinality(String),
    meta_labels Map(String, String) CODEC(ZSTD(1))
) Engine = ReplicatedMergeTree('/clickhouse/{installation}/{cluster}/tables/{shard}/{database}/{table}', '{replica}')
PARTITION BY toStartOfMonth(slot_start_date_time)
ORDER BY (slot_start_date_time, meta_network_name, meta_client_name);

ALTER TABLE default.canonical_beacon_block_deposit_local ON CLUSTER '{cluster}'
MODIFY COMMENT 'Contains a deposit from a beacon block.',
COMMENT COLUMN event_date_time 'When the client fetched the beacon block from a beacon node',
COMMENT COLUMN slot 'The slot number from beacon block payload',
COMMENT COLUMN slot_start_date_time 'The wall clock time when the slot started',
COMMENT COLUMN epoch 'The epoch number from beacon block payload',
COMMENT COLUMN epoch_start_date_time 'The wall clock time when the epoch started',
COMMENT COLUMN block_root 'The root hash of the beacon block',
COMMENT COLUMN block_version 'The version of the beacon block',
COMMENT COLUMN deposit_proof 'The proof of the deposit data',
COMMENT COLUMN deposit_data_pubkey 'The BLS public key of the validator from the deposit data',
COMMENT COLUMN deposit_data_withdrawal_credentials 'The withdrawal credentials of the validator from the deposit data',
COMMENT COLUMN deposit_data_amount 'The amount of the deposit from the deposit data',
COMMENT COLUMN deposit_data_signature 'The signature of the deposit data',
COMMENT COLUMN meta_client_name 'Name of the client that generated the event',
COMMENT COLUMN meta_client_id 'Unique Session ID of the client that generated the event. This changes every time the client is restarted.',
COMMENT COLUMN meta_client_version 'Version of the client that generated the event',
COMMENT COLUMN meta_client_implementation 'Implementation of the client that generated the event',
COMMENT COLUMN meta_client_os 'Operating system of the client that generated the event',
COMMENT COLUMN meta_client_ip 'IP address of the client that generated the event',
COMMENT COLUMN meta_client_geo_city 'City of the client that generated the event',
COMMENT COLUMN meta_client_geo_country 'Country of the client that generated the event',
COMMENT COLUMN meta_client_geo_country_code 'Country code of the client that generated the event',
COMMENT COLUMN meta_client_geo_continent_code 'Continent code of the client that generated the event',
COMMENT COLUMN meta_client_geo_longitude 'Longitude of the client that generated the event',
COMMENT COLUMN meta_client_geo_latitude 'Latitude of the client that generated the event',
COMMENT COLUMN meta_client_geo_autonomous_system_number 'Autonomous system number of the client that generated the event',
COMMENT COLUMN meta_client_geo_autonomous_system_organization 'Autonomous system organization of the client that generated the event',
COMMENT COLUMN meta_network_id 'Ethereum network ID',
COMMENT COLUMN meta_network_name 'Ethereum network name',
COMMENT COLUMN meta_consensus_version 'Ethereum consensus client version that generated the event',
COMMENT COLUMN meta_consensus_version_major 'Ethereum consensus client major version that generated the event',
COMMENT COLUMN meta_consensus_version_minor 'Ethereum consensus client minor version that generated the event',
COMMENT COLUMN meta_consensus_version_patch 'Ethereum consensus client patch version that generated the event',
COMMENT COLUMN meta_consensus_implementation 'Ethereum consensus client implementation that generated the event',
COMMENT COLUMN meta_labels 'Labels associated with the event';

CREATE TABLE canonical_beacon_block_deposit on cluster '{cluster}' AS canonical_beacon_block_deposit_local
ENGINE = Distributed('{cluster}', default, canonical_beacon_block_deposit_local, rand());

CREATE TABLE default.canonical_beacon_block_withdrawal_local on cluster '{cluster}'
(
    event_date_time DateTime64(3) CODEC(DoubleDelta, ZSTD(1)),
    slot UInt32 CODEC(DoubleDelta, ZSTD(1)),
    slot_start_date_time DateTime CODEC(DoubleDelta, ZSTD(1)),
    epoch UInt32 CODEC(DoubleDelta, ZSTD(1)),
    epoch_start_date_time DateTime CODEC(DoubleDelta, ZSTD(1)),
    block_root FixedString(66) CODEC(ZSTD(1)),
    block_version LowCardinality(String),
    withdrawal_index UInt32 CODEC(ZSTD(1)),
    withdrawal_validator_index UInt32 CODEC(ZSTD(1)),
    withdrawal_address FixedString(42) Codec(ZSTD(1)),
    withdrawal_amount UInt128 CODEC(ZSTD(1)),
    meta_client_name LowCardinality(String),
    meta_client_id String CODEC(ZSTD(1)),
    meta_client_version LowCardinality(String),
    meta_client_implementation LowCardinality(String),
    meta_client_os LowCardinality(String),
    meta_client_ip Nullable(IPv6) CODEC(ZSTD(1)),
    meta_client_geo_city LowCardinality(String) CODEC(ZSTD(1)),
    meta_client_geo_country LowCardinality(String) CODEC(ZSTD(1)),
    meta_client_geo_country_code LowCardinality(String) CODEC(ZSTD(1)),
    meta_client_geo_continent_code LowCardinality(String)  CODEC(ZSTD(1)),
    meta_client_geo_longitude Nullable(Float64)  CODEC(ZSTD(1)),
    meta_client_geo_latitude Nullable(Float64) CODEC(ZSTD(1)),
    meta_client_geo_autonomous_system_number Nullable(UInt32) CODEC(ZSTD(1)),
    meta_client_geo_autonomous_system_organization Nullable(String) CODEC(ZSTD(1)),
    meta_network_id Int32 CODEC(DoubleDelta, ZSTD(1)),
    meta_network_name LowCardinality(String),
    meta_consensus_version LowCardinality(String),
    meta_consensus_version_major LowCardinality(String),
    meta_consensus_version_minor LowCardinality(String),
    meta_consensus_version_patch LowCardinality(String),
    meta_consensus_implementation LowCardinality(String),
    meta_labels Map(String, String) CODEC(ZSTD(1))
) Engine = ReplicatedMergeTree('/clickhouse/{installation}/{cluster}/tables/{shard}/{database}/{table}', '{replica}')
PARTITION BY toStartOfMonth(slot_start_date_time)
ORDER BY (slot_start_date_time, meta_network_name, meta_client_name);

ALTER TABLE default.canonical_beacon_block_withdrawal_local ON CLUSTER '{cluster}'
MODIFY COMMENT 'Contains a withdrawal from a beacon block.',
COMMENT COLUMN event_date_time 'When the client fetched the beacon block from a beacon node',
COMMENT COLUMN slot 'The slot number from beacon block payload',
COMMENT COLUMN slot_start_date_time 'The wall clock time when the slot started',
COMMENT COLUMN epoch 'The epoch number from beacon block payload',
COMMENT COLUMN epoch_start_date_time 'The wall clock time when the epoch started',
COMMENT COLUMN block_root 'The root hash of the beacon block',
COMMENT COLUMN block_version 'The version of the beacon block',
COMMENT COLUMN withdrawal_index 'The index of the withdrawal',
COMMENT COLUMN withdrawal_validator_index 'The validator index from the withdrawal data',
COMMENT COLUMN withdrawal_address 'The address of the account that is the withdrawal recipient',
COMMENT COLUMN withdrawal_amount 'The amount of the withdrawal from the withdrawal data',
COMMENT COLUMN meta_client_name 'Name of the client that generated the event',
COMMENT COLUMN meta_client_id 'Unique Session ID of the client that generated the event. This changes every time the client is restarted.',
COMMENT COLUMN meta_client_version 'Version of the client that generated the event',
COMMENT COLUMN meta_client_implementation 'Implementation of the client that generated the event',
COMMENT COLUMN meta_client_os 'Operating system of the client that generated the event',
COMMENT COLUMN meta_client_ip 'IP address of the client that generated the event',
COMMENT COLUMN meta_client_geo_city 'City of the client that generated the event',
COMMENT COLUMN meta_client_geo_country 'Country of the client that generated the event',
COMMENT COLUMN meta_client_geo_country_code 'Country code of the client that generated the event',
COMMENT COLUMN meta_client_geo_continent_code 'Continent code of the client that generated the event',
COMMENT COLUMN meta_client_geo_longitude 'Longitude of the client that generated the event',
COMMENT COLUMN meta_client_geo_latitude 'Latitude of the client that generated the event',
COMMENT COLUMN meta_client_geo_autonomous_system_number 'Autonomous system number of the client that generated the event',
COMMENT COLUMN meta_client_geo_autonomous_system_organization 'Autonomous system organization of the client that generated the event',
COMMENT COLUMN meta_network_id 'Ethereum network ID',
COMMENT COLUMN meta_network_name 'Ethereum network name',
COMMENT COLUMN meta_consensus_version 'Ethereum consensus client version that generated the event',
COMMENT COLUMN meta_consensus_version_major 'Ethereum consensus client major version that generated the event',
COMMENT COLUMN meta_consensus_version_minor 'Ethereum consensus client minor version that generated the event',
COMMENT COLUMN meta_consensus_version_patch 'Ethereum consensus client patch version that generated the event',
COMMENT COLUMN meta_consensus_implementation 'Ethereum consensus client implementation that generated the event',
COMMENT COLUMN meta_labels 'Labels associated with the event';

CREATE TABLE canonical_beacon_block_withdrawal on cluster '{cluster}' AS canonical_beacon_block_withdrawal_local
ENGINE = Distributed('{cluster}', default, canonical_beacon_block_withdrawal_local, rand());
