CREATE TABLE default.beacon_p2p_attestation_local ON CLUSTER '{cluster}' (
    `updated_date_time` DateTime COMMENT 'When this row was last updated' CODEC(DoubleDelta, ZSTD(1)),
    `event_date_time` DateTime64(3) COMMENT 'When the client fetched the beacon block from a beacon node',
    `slot` UInt32 COMMENT 'Slot number in the beacon P2P payload',
    `slot_start_date_time` DateTime COMMENT 'The wall clock time when the slot started',
    `propagation_slot_start_diff` UInt32 COMMENT 'The difference between the event_date_time and the slot_start_date_time' CODEC(ZSTD(1)),
    `committee_index` LowCardinality(String) COMMENT 'The committee index in the beacon P2P payload',
    `attesting_validator_index` Nullable(UInt32) COMMENT 'The index of the validator attesting to the event' CODEC(ZSTD(1)),
    `attesting_validator_committee_index` LowCardinality(String) COMMENT 'The committee index of the attesting validator',
    `aggregation_bits` String COMMENT 'The aggregation bits of the event in the beacon P2P payload' CODEC(ZSTD(1)),
    `beacon_block_root` FixedString(66) COMMENT 'The beacon block root hash in the beacon P2P payload' CODEC(ZSTD(1)),
    `epoch` UInt32 COMMENT 'The epoch number in the beacon P2P payload' CODEC(DoubleDelta, ZSTD(1)),
    `epoch_start_date_time` DateTime COMMENT 'The wall clock time when the epoch started' CODEC(DoubleDelta, ZSTD(1)),
    `source_epoch` UInt32 COMMENT 'The source epoch number in the beacon P2P payload' CODEC(DoubleDelta, ZSTD(1)),
    `source_epoch_start_date_time` DateTime COMMENT 'The wall clock time when the source epoch started' CODEC(DoubleDelta, ZSTD(1)),
    `source_root` FixedString(66) COMMENT 'The source beacon block root hash in the beacon P2P payload' CODEC(ZSTD(1)),
    `target_epoch` UInt32 COMMENT 'The target epoch number in the beacon P2P payload' CODEC(DoubleDelta, ZSTD(1)),
    `target_epoch_start_date_time` DateTime COMMENT 'The wall clock time when the target epoch started' CODEC(DoubleDelta, ZSTD(1)),
    `target_root` FixedString(66) COMMENT 'The target beacon block root hash in the beacon P2P payload' CODEC(ZSTD(1)),
    `attestation_subnet` LowCardinality(String) COMMENT 'The attestation subnet the attestation was gossiped on',
    `validated` Bool COMMENT 'Whether the attestation was validated by the client',
    `peer_id` String COMMENT 'The originating peer ID for the gossiped data' CODEC(ZSTD(1)),
    `peer_latency` UInt32 COMMENT 'The latency of the peer that gossiped the data' CODEC(ZSTD(1)),
    `peer_version` LowCardinality(String) COMMENT 'Peer client version that gossiped the data',
    `peer_version_major` LowCardinality(String) COMMENT 'Peer client major version that gossiped the data',
    `peer_version_minor` LowCardinality(String) COMMENT 'Peer client minor version that gossiped the data',
    `peer_version_patch` LowCardinality(String) COMMENT 'Peer client patch version that gossiped the data',
    `peer_implementation` LowCardinality(String) COMMENT 'Peer client implementation that gossiped the data',
    `peer_ip` Nullable(IPv6) COMMENT 'IP address of the peer that gossiped the data' CODEC(ZSTD(1)),
    `peer_geo_city` LowCardinality(String) COMMENT 'City of the peer that gossiped the data' CODEC(ZSTD(1)),
    `peer_geo_country` LowCardinality(String) COMMENT 'Country of the peer that gossiped the data' CODEC(ZSTD(1)),
    `peer_geo_country_code` LowCardinality(String) COMMENT 'Country code of the peer that gossiped the data' CODEC(ZSTD(1)),
    `peer_geo_continent_code` LowCardinality(String) COMMENT 'Continent code of the peer that gossiped the data' CODEC(ZSTD(1)),
    `peer_geo_longitude` Nullable(Float64) COMMENT 'Longitude of the peer that gossiped the data' CODEC(ZSTD(1)),
    `peer_geo_latitude` Nullable(Float64) COMMENT 'Latitude of the peer that gossiped the data' CODEC(ZSTD(1)),
    `peer_geo_autonomous_system_number` Nullable(UInt32) COMMENT 'Autonomous system number of the peer that gossiped the data' CODEC(ZSTD(1)),
    `peer_geo_autonomous_system_organization` Nullable(String) COMMENT 'Autonomous system organization of the peer that gossiped the data' CODEC(ZSTD(1)),
    `meta_client_name` LowCardinality(String) COMMENT 'Name of the client that generated the event',
    `meta_client_id` String COMMENT 'Unique Session ID of the client that generated the event. This changes every time the client is restarted.' CODEC(ZSTD(1)),
    `meta_client_version` LowCardinality(String) COMMENT 'Version of the client that generated the event',
    `meta_client_implementation` LowCardinality(String) COMMENT 'Implementation of the client that generated the event',
    `meta_client_os` LowCardinality(String) COMMENT 'Operating system of the client that generated the event',
    `meta_client_ip` Nullable(IPv6) COMMENT 'IP address of the client that generated the event' CODEC(ZSTD(1)),
    `meta_client_geo_city` LowCardinality(String) COMMENT 'City of the client that generated the event' CODEC(ZSTD(1)),
    `meta_client_geo_country` LowCardinality(String) COMMENT 'Country of the client that generated the event' CODEC(ZSTD(1)),
    `meta_client_geo_country_code` LowCardinality(String) COMMENT 'Country code of the client that generated the event' CODEC(ZSTD(1)),
    `meta_client_geo_continent_code` LowCardinality(String) COMMENT 'Continent code of the client that generated the event' CODEC(ZSTD(1)),
    `meta_client_geo_longitude` Nullable(Float64) COMMENT 'Longitude of the client that generated the event' CODEC(ZSTD(1)),
    `meta_client_geo_latitude` Nullable(Float64) COMMENT 'Latitude of the client that generated the event' CODEC(ZSTD(1)),
    `meta_client_geo_autonomous_system_number` Nullable(UInt32) COMMENT 'Autonomous system number of the client that generated the event' CODEC(ZSTD(1)),
    `meta_client_geo_autonomous_system_organization` Nullable(String) COMMENT 'Autonomous system organization of the client that generated the event' CODEC(ZSTD(1)),
    `meta_network_id` Int32 COMMENT 'Ethereum network ID' CODEC(DoubleDelta, ZSTD(1)),
    `meta_network_name` LowCardinality(String) COMMENT 'Ethereum network name',
    `meta_consensus_version` LowCardinality(String) COMMENT 'Ethereum consensus client version that generated the event',
    `meta_consensus_version_major` LowCardinality(String) COMMENT 'Ethereum consensus client major version that generated the event',
    `meta_consensus_version_minor` LowCardinality(String) COMMENT 'Ethereum consensus client minor version that generated the event',
    `meta_consensus_version_patch` LowCardinality(String) COMMENT 'Ethereum consensus client patch version that generated the event',
    `meta_consensus_implementation` LowCardinality(String) COMMENT 'Ethereum consensus client implementation that generated the event',
    `meta_labels` Map(String, String) COMMENT 'Labels associated with the event' CODEC(ZSTD(1))
) ENGINE = ReplicatedReplacingMergeTree(
    '/clickhouse/{installation}/{cluster}/{database}/tables/{table}/{shard}',
    '{replica}',
    updated_date_time
) PARTITION BY toStartOfMonth(slot_start_date_time)
ORDER BY
    (
        slot_start_date_time,
        meta_network_name,
        meta_client_name,
        committee_index,
        aggregation_bits,
        beacon_block_root,
        source_root,
        target_root,
        attestation_subnet,
        peer_id
    ) COMMENT 'Contains beacon chain P2P "attestation" data';

CREATE TABLE default.beacon_p2p_attestation ON CLUSTER '{cluster}' AS default.beacon_p2p_attestation_local ENGINE = Distributed(
    '{cluster}',
    default,
    beacon_p2p_attestation_local,
    cityHash64(
        slot_start_date_time,
        meta_network_name,
        meta_client_name,
        committee_index,
        aggregation_bits,
        beacon_block_root,
        source_root,
        target_root,
        attestation_subnet,
        peer_id
    )
);
