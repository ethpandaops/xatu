logging: "debug" # panic,fatal,warn,info,debug,trace
metricsAddr: ":9095"
pprofAddr: ":6065" # optional. if supplied it enables pprof server

name: example-instance

ethereum:
  network: mainnet # mainnet, sepolia, holesky, devnet.
  devnet:
    configUrl: ""
    bootnodesUrl: ""
    depositContractBlockUrl: ""
    genesisSszUrl: ""
node:
  privateKeyStr: ""
  dialTimeout: "5s"
  devp2pHost: "0.0.0.0"
  devp2pPort: 0
  libp2pHost: "0.0.0.0"
  libp2pPort: 0
  prysmHost: "127.0.0.1"
  prysmPortHttp: 5052
  prysmPortGrpc: 4000
  prysmUseTLS: false
  maxPeers: 30
  dialConcurrency: 16
  dataStreamType: "callback"
  subnets:
    beacon_attestation:
      type: "all"
    sync_committee:
      type: "all"
    blob_sidecar:
      type: "all"
outputs:
  - name: log
    type: stdout
# traces:
#   enabled: true
#   # If true, the root rpc events will be recorded (if sharding config dictates) even if
#   # there are no rpc meta/control level messages.
#   alwaysRecordRootRpcEvents: false
#   
#   # SHARDING CONFIGURATION TYPES:
#   # 1. Simple: Same sampling rate for all messages of an event type
#   # 2. Hierarchical: Different sampling rates based on gossip topic patterns
#   #    - Use 'topics.gossipTopics' to define per-topic sampling rates
#   #    - Use 'topics.fallback' for topics that don't match any pattern
#   topics:
#     # Simple configuration (backward compatible)
#     "(?i).*add_peer.*":
#       shardingKey: "PeerID"
#       totalShards: 512
#       activeShards: ["0-255"] # Range syntax - expands to shards 0 through 255
#     
#     # HIERARCHICAL CONFIGURATION: Allows different sampling rates per gossip topic
#     # This enables fine-grained control - e.g., 100% beacon blocks, 1% other topics
#     "(?i).*duplicate_message.*":
#       topics:
#         gossipTopics:
#           # High priority: 100% sampling for beacon blocks
#           ".*beacon_block.*":
#             shardingKey: "MsgID"
#             totalShards: 512
#             activeShards: ["0-511"] # 100% sampling
#           # Medium priority: 50% sampling for attestations
#           ".*beacon_attestation.*":
#             shardingKey: "MsgID"
#             totalShards: 512
#             activeShards: ["0-255"] # 50% sampling
#           # Low priority: 12.5% sampling for sync committee
#           ".*sync_committee.*":
#             shardingKey: "MsgID"
#             totalShards: 512
#             activeShards: ["0-63"] # 12.5% sampling
#         # Fallback for all other gossip topics
#         fallback:
#           shardingKey: "MsgID"
#           totalShards: 512
#           activeShards: [0] # 1/512 sampling (~0.2%)
#     
#     # Hierarchical configuration for RPC events
#     "(?i).*recv_rpc.*":
#       topics:
#         gossipTopics:
#           # Higher sampling for beacon blocks in RPC messages
#           ".*beacon_block.*":
#             shardingKey: "MsgID"
#             totalShards: 512
#             activeShards: ["0-255"] # 50% sampling
#         fallback:
#           shardingKey: "MsgID"
#           totalShards: 512
#           activeShards: ["0-31"] # ~6.25% sampling
#     
#     # Simple configuration for other events
#     "(?i).*rpc_meta_control_ihave.*":
#       shardingKey: "MsgID"
#       totalShards: 512
#       activeShards: ["0-63"] # 12.5% sampling
#     "(?i).*rpc_meta_control_iwant.*":
#       shardingKey: "MsgID"
#       totalShards: 512
#       activeShards: ["0-31"] # ~6.25% sampling
# events:
#   recvRpcEnabled: false
#   sendRpcEnabled: false
#   addPeerEnabled: false
#   removePeerEnabled: false
#   connectedEnabled: false
#   disconnectedEnabled: false
#   joinEnabled: false
#   handleMetadataEnabled: false
#   handleStatusEnabled: false
#   gossipSubBeaconBlockEnabled: false
#   gossipSubAttestationEnabled: false
#   gossipSubBlobSidecarEnabled: false
