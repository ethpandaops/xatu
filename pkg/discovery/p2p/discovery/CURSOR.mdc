---
description: Discovery Protocol Implementation - Node Discovery Protocol v4/v5 core logic
globs: 
  - "*.go"
  - "**/*_test.go"
alwaysApply: false
---

# Discovery Protocol Implementation

Core implementation of Ethereum Node Discovery Protocol v4 and v5 with event-driven node publishing.

## Key Integration Patterns
- **Unified Protocol Interface**: Both DiscV4 and DiscV5 implement identical lifecycle patterns (Start/Stop/OnNodeRecord)
- **Event-Driven Publishing**: Uses emission broker with `topicNodeRecord` for async node record publishing
- **Scheduled Restarts**: Implements gocron-based periodic restart mechanism to refresh discovery listeners
- **Filter-Based Validation**: All discovered nodes pass through `filterPeer()` validation before publishing

## Critical Design Decisions
- Always generate new private keys on listener restart for network anonymity
- Use RandomNodes() iterator with filtering to avoid invalid peer records
- Implement proper resource cleanup with mutex-protected listener management
- Periodic restarts maintain fresh network presence and prevent stale connections