// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.2
// source: pkg/proto/libp2p/trace.proto

package libp2p

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EventType int32

const (
	EventType_UNKNOWN                       EventType = 0
	EventType_CONNECTED                     EventType = 1
	EventType_DISCONNECTED                  EventType = 2
	EventType_ADD_PEER                      EventType = 3
	EventType_REMOVE_PEER                   EventType = 4
	EventType_PUBLISH_MESSAGE               EventType = 5
	EventType_REJECT_MESSAGE                EventType = 6
	EventType_DUPLICATE_MESSAGE             EventType = 7
	EventType_DELIVER_MESSAGE               EventType = 8
	EventType_RECV_RPC                      EventType = 9
	EventType_SEND_RPC                      EventType = 10
	EventType_DROP_RPC                      EventType = 11
	EventType_JOIN                          EventType = 12
	EventType_LEAVE                         EventType = 13
	EventType_GRAFT                         EventType = 14
	EventType_PRUNE                         EventType = 15
	EventType_VALIDATE_MESSAGE              EventType = 16
	EventType_THROTTLE_PEER                 EventType = 17
	EventType_UNDELIVERABLE_MESSAGE         EventType = 18
	EventType_HANDLE_STREAM                 EventType = 19
	EventType_HANDLE_STATUS                 EventType = 20
	EventType_HANDLE_METADATA               EventType = 21
	EventType_HANDLE_BLOB_SIDECARS_BY_RANGE EventType = 22
	EventType_HANDLE_BLOB_SIDECARS_BY_ROOT  EventType = 23
	EventType_HANDLE_PING                   EventType = 24
	EventType_HANDLE_GOODBYE                EventType = 25
	EventType_HANDLE_BEACON_BLOCKS_BY_RANGE EventType = 26
	EventType_HANDLE_BEACON_BLOCKS_BY_ROOT  EventType = 27
)

// Enum value maps for EventType.
var (
	EventType_name = map[int32]string{
		0:  "UNKNOWN",
		1:  "CONNECTED",
		2:  "DISCONNECTED",
		3:  "ADD_PEER",
		4:  "REMOVE_PEER",
		5:  "PUBLISH_MESSAGE",
		6:  "REJECT_MESSAGE",
		7:  "DUPLICATE_MESSAGE",
		8:  "DELIVER_MESSAGE",
		9:  "RECV_RPC",
		10: "SEND_RPC",
		11: "DROP_RPC",
		12: "JOIN",
		13: "LEAVE",
		14: "GRAFT",
		15: "PRUNE",
		16: "VALIDATE_MESSAGE",
		17: "THROTTLE_PEER",
		18: "UNDELIVERABLE_MESSAGE",
		19: "HANDLE_STREAM",
		20: "HANDLE_STATUS",
		21: "HANDLE_METADATA",
		22: "HANDLE_BLOB_SIDECARS_BY_RANGE",
		23: "HANDLE_BLOB_SIDECARS_BY_ROOT",
		24: "HANDLE_PING",
		25: "HANDLE_GOODBYE",
		26: "HANDLE_BEACON_BLOCKS_BY_RANGE",
		27: "HANDLE_BEACON_BLOCKS_BY_ROOT",
	}
	EventType_value = map[string]int32{
		"UNKNOWN":                       0,
		"CONNECTED":                     1,
		"DISCONNECTED":                  2,
		"ADD_PEER":                      3,
		"REMOVE_PEER":                   4,
		"PUBLISH_MESSAGE":               5,
		"REJECT_MESSAGE":                6,
		"DUPLICATE_MESSAGE":             7,
		"DELIVER_MESSAGE":               8,
		"RECV_RPC":                      9,
		"SEND_RPC":                      10,
		"DROP_RPC":                      11,
		"JOIN":                          12,
		"LEAVE":                         13,
		"GRAFT":                         14,
		"PRUNE":                         15,
		"VALIDATE_MESSAGE":              16,
		"THROTTLE_PEER":                 17,
		"UNDELIVERABLE_MESSAGE":         18,
		"HANDLE_STREAM":                 19,
		"HANDLE_STATUS":                 20,
		"HANDLE_METADATA":               21,
		"HANDLE_BLOB_SIDECARS_BY_RANGE": 22,
		"HANDLE_BLOB_SIDECARS_BY_ROOT":  23,
		"HANDLE_PING":                   24,
		"HANDLE_GOODBYE":                25,
		"HANDLE_BEACON_BLOCKS_BY_RANGE": 26,
		"HANDLE_BEACON_BLOCKS_BY_ROOT":  27,
	}
)

func (x EventType) Enum() *EventType {
	p := new(EventType)
	*p = x
	return p
}

func (x EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_proto_libp2p_trace_proto_enumTypes[0].Descriptor()
}

func (EventType) Type() protoreflect.EnumType {
	return &file_pkg_proto_libp2p_trace_proto_enumTypes[0]
}

func (x EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventType.Descriptor instead.
func (EventType) EnumDescriptor() ([]byte, []int) {
	return file_pkg_proto_libp2p_trace_proto_rawDescGZIP(), []int{0}
}

type PublishMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageId *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=message_id,proto3" json:"message_id,omitempty"`
	Topic     *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
}

func (x *PublishMessage) Reset() {
	*x = PublishMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishMessage) ProtoMessage() {}

func (x *PublishMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishMessage.ProtoReflect.Descriptor instead.
func (*PublishMessage) Descriptor() ([]byte, []int) {
	return file_pkg_proto_libp2p_trace_proto_rawDescGZIP(), []int{0}
}

func (x *PublishMessage) GetMessageId() *wrapperspb.StringValue {
	if x != nil {
		return x.MessageId
	}
	return nil
}

func (x *PublishMessage) GetTopic() *wrapperspb.StringValue {
	if x != nil {
		return x.Topic
	}
	return nil
}

type RejectMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageId   *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=message_id,proto3" json:"message_id,omitempty"`
	PeerId      *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=peer_id,proto3" json:"peer_id,omitempty"`
	Reason      *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
	Topic       *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=topic,proto3" json:"topic,omitempty"`
	SeqNo       *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=seq_no,proto3" json:"seq_no,omitempty"`
	MessageSize *wrapperspb.UInt32Value `protobuf:"bytes,6,opt,name=message_size,proto3" json:"message_size,omitempty"`
}

func (x *RejectMessage) Reset() {
	*x = RejectMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RejectMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RejectMessage) ProtoMessage() {}

func (x *RejectMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RejectMessage.ProtoReflect.Descriptor instead.
func (*RejectMessage) Descriptor() ([]byte, []int) {
	return file_pkg_proto_libp2p_trace_proto_rawDescGZIP(), []int{1}
}

func (x *RejectMessage) GetMessageId() *wrapperspb.StringValue {
	if x != nil {
		return x.MessageId
	}
	return nil
}

func (x *RejectMessage) GetPeerId() *wrapperspb.StringValue {
	if x != nil {
		return x.PeerId
	}
	return nil
}

func (x *RejectMessage) GetReason() *wrapperspb.StringValue {
	if x != nil {
		return x.Reason
	}
	return nil
}

func (x *RejectMessage) GetTopic() *wrapperspb.StringValue {
	if x != nil {
		return x.Topic
	}
	return nil
}

func (x *RejectMessage) GetSeqNo() *wrapperspb.StringValue {
	if x != nil {
		return x.SeqNo
	}
	return nil
}

func (x *RejectMessage) GetMessageSize() *wrapperspb.UInt32Value {
	if x != nil {
		return x.MessageSize
	}
	return nil
}

type DuplicateMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageId   *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=message_id,proto3" json:"message_id,omitempty"`
	PeerId      *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=peer_id,proto3" json:"peer_id,omitempty"`
	Topic       *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=topic,proto3" json:"topic,omitempty"`
	SeqNo       *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=seq_no,proto3" json:"seq_no,omitempty"`
	MessageSize *wrapperspb.UInt32Value `protobuf:"bytes,5,opt,name=message_size,proto3" json:"message_size,omitempty"`
	Local       *wrapperspb.BoolValue   `protobuf:"bytes,6,opt,name=local,proto3" json:"local,omitempty"`
}

func (x *DuplicateMessage) Reset() {
	*x = DuplicateMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DuplicateMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DuplicateMessage) ProtoMessage() {}

func (x *DuplicateMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DuplicateMessage.ProtoReflect.Descriptor instead.
func (*DuplicateMessage) Descriptor() ([]byte, []int) {
	return file_pkg_proto_libp2p_trace_proto_rawDescGZIP(), []int{2}
}

func (x *DuplicateMessage) GetMessageId() *wrapperspb.StringValue {
	if x != nil {
		return x.MessageId
	}
	return nil
}

func (x *DuplicateMessage) GetPeerId() *wrapperspb.StringValue {
	if x != nil {
		return x.PeerId
	}
	return nil
}

func (x *DuplicateMessage) GetTopic() *wrapperspb.StringValue {
	if x != nil {
		return x.Topic
	}
	return nil
}

func (x *DuplicateMessage) GetSeqNo() *wrapperspb.StringValue {
	if x != nil {
		return x.SeqNo
	}
	return nil
}

func (x *DuplicateMessage) GetMessageSize() *wrapperspb.UInt32Value {
	if x != nil {
		return x.MessageSize
	}
	return nil
}

func (x *DuplicateMessage) GetLocal() *wrapperspb.BoolValue {
	if x != nil {
		return x.Local
	}
	return nil
}

type DeliverMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageId   *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=message_id,proto3" json:"message_id,omitempty"`
	Topic       *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
	PeerId      *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=peer_id,proto3" json:"peer_id,omitempty"`
	Local       *wrapperspb.BoolValue   `protobuf:"bytes,4,opt,name=local,proto3" json:"local,omitempty"`
	SeqNo       *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=seq_no,proto3" json:"seq_no,omitempty"`
	MessageSize *wrapperspb.UInt32Value `protobuf:"bytes,6,opt,name=message_size,proto3" json:"message_size,omitempty"`
}

func (x *DeliverMessage) Reset() {
	*x = DeliverMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeliverMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeliverMessage) ProtoMessage() {}

func (x *DeliverMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeliverMessage.ProtoReflect.Descriptor instead.
func (*DeliverMessage) Descriptor() ([]byte, []int) {
	return file_pkg_proto_libp2p_trace_proto_rawDescGZIP(), []int{3}
}

func (x *DeliverMessage) GetMessageId() *wrapperspb.StringValue {
	if x != nil {
		return x.MessageId
	}
	return nil
}

func (x *DeliverMessage) GetTopic() *wrapperspb.StringValue {
	if x != nil {
		return x.Topic
	}
	return nil
}

func (x *DeliverMessage) GetPeerId() *wrapperspb.StringValue {
	if x != nil {
		return x.PeerId
	}
	return nil
}

func (x *DeliverMessage) GetLocal() *wrapperspb.BoolValue {
	if x != nil {
		return x.Local
	}
	return nil
}

func (x *DeliverMessage) GetSeqNo() *wrapperspb.StringValue {
	if x != nil {
		return x.SeqNo
	}
	return nil
}

func (x *DeliverMessage) GetMessageSize() *wrapperspb.UInt32Value {
	if x != nil {
		return x.MessageSize
	}
	return nil
}

type ValidateMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageId   *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=message_id,proto3" json:"message_id,omitempty"`
	Topic       *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
	PeerId      *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=peer_id,proto3" json:"peer_id,omitempty"`
	Local       *wrapperspb.BoolValue   `protobuf:"bytes,4,opt,name=local,proto3" json:"local,omitempty"`
	SeqNo       *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=seq_no,proto3" json:"seq_no,omitempty"`
	MessageSize *wrapperspb.UInt32Value `protobuf:"bytes,6,opt,name=message_size,proto3" json:"message_size,omitempty"`
}

func (x *ValidateMessage) Reset() {
	*x = ValidateMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateMessage) ProtoMessage() {}

func (x *ValidateMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateMessage.ProtoReflect.Descriptor instead.
func (*ValidateMessage) Descriptor() ([]byte, []int) {
	return file_pkg_proto_libp2p_trace_proto_rawDescGZIP(), []int{4}
}

func (x *ValidateMessage) GetMessageId() *wrapperspb.StringValue {
	if x != nil {
		return x.MessageId
	}
	return nil
}

func (x *ValidateMessage) GetTopic() *wrapperspb.StringValue {
	if x != nil {
		return x.Topic
	}
	return nil
}

func (x *ValidateMessage) GetPeerId() *wrapperspb.StringValue {
	if x != nil {
		return x.PeerId
	}
	return nil
}

func (x *ValidateMessage) GetLocal() *wrapperspb.BoolValue {
	if x != nil {
		return x.Local
	}
	return nil
}

func (x *ValidateMessage) GetSeqNo() *wrapperspb.StringValue {
	if x != nil {
		return x.SeqNo
	}
	return nil
}

func (x *ValidateMessage) GetMessageSize() *wrapperspb.UInt32Value {
	if x != nil {
		return x.MessageSize
	}
	return nil
}

type AddPeer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerId   *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=peer_id,proto3" json:"peer_id,omitempty"`
	Protocol *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=protocol,proto3" json:"protocol,omitempty"`
}

func (x *AddPeer) Reset() {
	*x = AddPeer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddPeer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddPeer) ProtoMessage() {}

func (x *AddPeer) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddPeer.ProtoReflect.Descriptor instead.
func (*AddPeer) Descriptor() ([]byte, []int) {
	return file_pkg_proto_libp2p_trace_proto_rawDescGZIP(), []int{5}
}

func (x *AddPeer) GetPeerId() *wrapperspb.StringValue {
	if x != nil {
		return x.PeerId
	}
	return nil
}

func (x *AddPeer) GetProtocol() *wrapperspb.StringValue {
	if x != nil {
		return x.Protocol
	}
	return nil
}

type RemovePeer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerId *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=peer_id,proto3" json:"peer_id,omitempty"`
}

func (x *RemovePeer) Reset() {
	*x = RemovePeer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemovePeer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemovePeer) ProtoMessage() {}

func (x *RemovePeer) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemovePeer.ProtoReflect.Descriptor instead.
func (*RemovePeer) Descriptor() ([]byte, []int) {
	return file_pkg_proto_libp2p_trace_proto_rawDescGZIP(), []int{6}
}

func (x *RemovePeer) GetPeerId() *wrapperspb.StringValue {
	if x != nil {
		return x.PeerId
	}
	return nil
}

type RecvRPC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerId *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=peer_id,proto3" json:"peer_id,omitempty"`
	Meta   *RPCMeta                `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
}

func (x *RecvRPC) Reset() {
	*x = RecvRPC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecvRPC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecvRPC) ProtoMessage() {}

func (x *RecvRPC) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecvRPC.ProtoReflect.Descriptor instead.
func (*RecvRPC) Descriptor() ([]byte, []int) {
	return file_pkg_proto_libp2p_trace_proto_rawDescGZIP(), []int{7}
}

func (x *RecvRPC) GetPeerId() *wrapperspb.StringValue {
	if x != nil {
		return x.PeerId
	}
	return nil
}

func (x *RecvRPC) GetMeta() *RPCMeta {
	if x != nil {
		return x.Meta
	}
	return nil
}

type SendRPC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SendTo *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=send_to,proto3" json:"send_to,omitempty"`
	Meta   *RPCMeta                `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
}

func (x *SendRPC) Reset() {
	*x = SendRPC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendRPC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendRPC) ProtoMessage() {}

func (x *SendRPC) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendRPC.ProtoReflect.Descriptor instead.
func (*SendRPC) Descriptor() ([]byte, []int) {
	return file_pkg_proto_libp2p_trace_proto_rawDescGZIP(), []int{8}
}

func (x *SendRPC) GetSendTo() *wrapperspb.StringValue {
	if x != nil {
		return x.SendTo
	}
	return nil
}

func (x *SendRPC) GetMeta() *RPCMeta {
	if x != nil {
		return x.Meta
	}
	return nil
}

type DropRPC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SendTo *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=send_to,proto3" json:"send_to,omitempty"`
	Meta   *RPCMeta                `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
}

func (x *DropRPC) Reset() {
	*x = DropRPC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropRPC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropRPC) ProtoMessage() {}

func (x *DropRPC) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropRPC.ProtoReflect.Descriptor instead.
func (*DropRPC) Descriptor() ([]byte, []int) {
	return file_pkg_proto_libp2p_trace_proto_rawDescGZIP(), []int{9}
}

func (x *DropRPC) GetSendTo() *wrapperspb.StringValue {
	if x != nil {
		return x.SendTo
	}
	return nil
}

func (x *DropRPC) GetMeta() *RPCMeta {
	if x != nil {
		return x.Meta
	}
	return nil
}

type Join struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topic *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
}

func (x *Join) Reset() {
	*x = Join{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Join) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Join) ProtoMessage() {}

func (x *Join) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Join.ProtoReflect.Descriptor instead.
func (*Join) Descriptor() ([]byte, []int) {
	return file_pkg_proto_libp2p_trace_proto_rawDescGZIP(), []int{10}
}

func (x *Join) GetTopic() *wrapperspb.StringValue {
	if x != nil {
		return x.Topic
	}
	return nil
}

type Leave struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topic *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
}

func (x *Leave) Reset() {
	*x = Leave{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Leave) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Leave) ProtoMessage() {}

func (x *Leave) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Leave.ProtoReflect.Descriptor instead.
func (*Leave) Descriptor() ([]byte, []int) {
	return file_pkg_proto_libp2p_trace_proto_rawDescGZIP(), []int{11}
}

func (x *Leave) GetTopic() *wrapperspb.StringValue {
	if x != nil {
		return x.Topic
	}
	return nil
}

type Graft struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerId *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=peer_id,proto3" json:"peer_id,omitempty"`
	Topic  *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
}

func (x *Graft) Reset() {
	*x = Graft{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Graft) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Graft) ProtoMessage() {}

func (x *Graft) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Graft.ProtoReflect.Descriptor instead.
func (*Graft) Descriptor() ([]byte, []int) {
	return file_pkg_proto_libp2p_trace_proto_rawDescGZIP(), []int{12}
}

func (x *Graft) GetPeerId() *wrapperspb.StringValue {
	if x != nil {
		return x.PeerId
	}
	return nil
}

func (x *Graft) GetTopic() *wrapperspb.StringValue {
	if x != nil {
		return x.Topic
	}
	return nil
}

type Prune struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerId *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=peer_id,proto3" json:"peer_id,omitempty"`
	Topic  *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
}

func (x *Prune) Reset() {
	*x = Prune{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Prune) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Prune) ProtoMessage() {}

func (x *Prune) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Prune.ProtoReflect.Descriptor instead.
func (*Prune) Descriptor() ([]byte, []int) {
	return file_pkg_proto_libp2p_trace_proto_rawDescGZIP(), []int{13}
}

func (x *Prune) GetPeerId() *wrapperspb.StringValue {
	if x != nil {
		return x.PeerId
	}
	return nil
}

func (x *Prune) GetTopic() *wrapperspb.StringValue {
	if x != nil {
		return x.Topic
	}
	return nil
}

type ThrottlePeer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerId *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=peer_id,proto3" json:"peer_id,omitempty"`
}

func (x *ThrottlePeer) Reset() {
	*x = ThrottlePeer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThrottlePeer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThrottlePeer) ProtoMessage() {}

func (x *ThrottlePeer) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThrottlePeer.ProtoReflect.Descriptor instead.
func (*ThrottlePeer) Descriptor() ([]byte, []int) {
	return file_pkg_proto_libp2p_trace_proto_rawDescGZIP(), []int{14}
}

func (x *ThrottlePeer) GetPeerId() *wrapperspb.StringValue {
	if x != nil {
		return x.PeerId
	}
	return nil
}

type UndeliverableMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageId *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=message_id,proto3" json:"message_id,omitempty"`
	Topic     *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
	PeerId    *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=peer_id,proto3" json:"peer_id,omitempty"`
	Local     *wrapperspb.BoolValue   `protobuf:"bytes,4,opt,name=local,proto3" json:"local,omitempty"`
}

func (x *UndeliverableMessage) Reset() {
	*x = UndeliverableMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UndeliverableMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UndeliverableMessage) ProtoMessage() {}

func (x *UndeliverableMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UndeliverableMessage.ProtoReflect.Descriptor instead.
func (*UndeliverableMessage) Descriptor() ([]byte, []int) {
	return file_pkg_proto_libp2p_trace_proto_rawDescGZIP(), []int{15}
}

func (x *UndeliverableMessage) GetMessageId() *wrapperspb.StringValue {
	if x != nil {
		return x.MessageId
	}
	return nil
}

func (x *UndeliverableMessage) GetTopic() *wrapperspb.StringValue {
	if x != nil {
		return x.Topic
	}
	return nil
}

func (x *UndeliverableMessage) GetPeerId() *wrapperspb.StringValue {
	if x != nil {
		return x.PeerId
	}
	return nil
}

func (x *UndeliverableMessage) GetLocal() *wrapperspb.BoolValue {
	if x != nil {
		return x.Local
	}
	return nil
}

type RPCMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Messages      []*MessageMeta          `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
	Subscriptions []*SubMeta              `protobuf:"bytes,2,rep,name=subscriptions,proto3" json:"subscriptions,omitempty"`
	Control       *ControlMeta            `protobuf:"bytes,3,opt,name=control,proto3" json:"control,omitempty"`
	PeerId        *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=peer_id,proto3" json:"peer_id,omitempty"`
}

func (x *RPCMeta) Reset() {
	*x = RPCMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RPCMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RPCMeta) ProtoMessage() {}

func (x *RPCMeta) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RPCMeta.ProtoReflect.Descriptor instead.
func (*RPCMeta) Descriptor() ([]byte, []int) {
	return file_pkg_proto_libp2p_trace_proto_rawDescGZIP(), []int{16}
}

func (x *RPCMeta) GetMessages() []*MessageMeta {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *RPCMeta) GetSubscriptions() []*SubMeta {
	if x != nil {
		return x.Subscriptions
	}
	return nil
}

func (x *RPCMeta) GetControl() *ControlMeta {
	if x != nil {
		return x.Control
	}
	return nil
}

func (x *RPCMeta) GetPeerId() *wrapperspb.StringValue {
	if x != nil {
		return x.PeerId
	}
	return nil
}

type MessageMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageId *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=message_id,proto3" json:"message_id,omitempty"`
	Topic     *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
}

func (x *MessageMeta) Reset() {
	*x = MessageMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageMeta) ProtoMessage() {}

func (x *MessageMeta) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageMeta.ProtoReflect.Descriptor instead.
func (*MessageMeta) Descriptor() ([]byte, []int) {
	return file_pkg_proto_libp2p_trace_proto_rawDescGZIP(), []int{17}
}

func (x *MessageMeta) GetMessageId() *wrapperspb.StringValue {
	if x != nil {
		return x.MessageId
	}
	return nil
}

func (x *MessageMeta) GetTopic() *wrapperspb.StringValue {
	if x != nil {
		return x.Topic
	}
	return nil
}

type SubMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subscribe *wrapperspb.BoolValue   `protobuf:"bytes,1,opt,name=subscribe,proto3" json:"subscribe,omitempty"`
	TopicId   *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=topic_id,proto3" json:"topic_id,omitempty"`
}

func (x *SubMeta) Reset() {
	*x = SubMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubMeta) ProtoMessage() {}

func (x *SubMeta) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubMeta.ProtoReflect.Descriptor instead.
func (*SubMeta) Descriptor() ([]byte, []int) {
	return file_pkg_proto_libp2p_trace_proto_rawDescGZIP(), []int{18}
}

func (x *SubMeta) GetSubscribe() *wrapperspb.BoolValue {
	if x != nil {
		return x.Subscribe
	}
	return nil
}

func (x *SubMeta) GetTopicId() *wrapperspb.StringValue {
	if x != nil {
		return x.TopicId
	}
	return nil
}

type ControlMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ihave []*ControlIHaveMeta `protobuf:"bytes,1,rep,name=ihave,proto3" json:"ihave,omitempty"`
	Iwant []*ControlIWantMeta `protobuf:"bytes,2,rep,name=iwant,proto3" json:"iwant,omitempty"`
	Graft []*ControlGraftMeta `protobuf:"bytes,3,rep,name=graft,proto3" json:"graft,omitempty"`
	Prune []*ControlPruneMeta `protobuf:"bytes,4,rep,name=prune,proto3" json:"prune,omitempty"`
}

func (x *ControlMeta) Reset() {
	*x = ControlMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControlMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlMeta) ProtoMessage() {}

func (x *ControlMeta) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlMeta.ProtoReflect.Descriptor instead.
func (*ControlMeta) Descriptor() ([]byte, []int) {
	return file_pkg_proto_libp2p_trace_proto_rawDescGZIP(), []int{19}
}

func (x *ControlMeta) GetIhave() []*ControlIHaveMeta {
	if x != nil {
		return x.Ihave
	}
	return nil
}

func (x *ControlMeta) GetIwant() []*ControlIWantMeta {
	if x != nil {
		return x.Iwant
	}
	return nil
}

func (x *ControlMeta) GetGraft() []*ControlGraftMeta {
	if x != nil {
		return x.Graft
	}
	return nil
}

func (x *ControlMeta) GetPrune() []*ControlPruneMeta {
	if x != nil {
		return x.Prune
	}
	return nil
}

type ControlIHaveMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TopicId    *wrapperspb.StringValue   `protobuf:"bytes,1,opt,name=topic_id,proto3" json:"topic_id,omitempty"`
	MessageIds []*wrapperspb.StringValue `protobuf:"bytes,2,rep,name=message_ids,proto3" json:"message_ids,omitempty"`
}

func (x *ControlIHaveMeta) Reset() {
	*x = ControlIHaveMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControlIHaveMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlIHaveMeta) ProtoMessage() {}

func (x *ControlIHaveMeta) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlIHaveMeta.ProtoReflect.Descriptor instead.
func (*ControlIHaveMeta) Descriptor() ([]byte, []int) {
	return file_pkg_proto_libp2p_trace_proto_rawDescGZIP(), []int{20}
}

func (x *ControlIHaveMeta) GetTopicId() *wrapperspb.StringValue {
	if x != nil {
		return x.TopicId
	}
	return nil
}

func (x *ControlIHaveMeta) GetMessageIds() []*wrapperspb.StringValue {
	if x != nil {
		return x.MessageIds
	}
	return nil
}

type ControlIWantMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageIds []*wrapperspb.StringValue `protobuf:"bytes,1,rep,name=message_ids,proto3" json:"message_ids,omitempty"`
}

func (x *ControlIWantMeta) Reset() {
	*x = ControlIWantMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControlIWantMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlIWantMeta) ProtoMessage() {}

func (x *ControlIWantMeta) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlIWantMeta.ProtoReflect.Descriptor instead.
func (*ControlIWantMeta) Descriptor() ([]byte, []int) {
	return file_pkg_proto_libp2p_trace_proto_rawDescGZIP(), []int{21}
}

func (x *ControlIWantMeta) GetMessageIds() []*wrapperspb.StringValue {
	if x != nil {
		return x.MessageIds
	}
	return nil
}

type ControlGraftMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TopicId *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=topic_id,proto3" json:"topic_id,omitempty"`
}

func (x *ControlGraftMeta) Reset() {
	*x = ControlGraftMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControlGraftMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlGraftMeta) ProtoMessage() {}

func (x *ControlGraftMeta) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlGraftMeta.ProtoReflect.Descriptor instead.
func (*ControlGraftMeta) Descriptor() ([]byte, []int) {
	return file_pkg_proto_libp2p_trace_proto_rawDescGZIP(), []int{22}
}

func (x *ControlGraftMeta) GetTopicId() *wrapperspb.StringValue {
	if x != nil {
		return x.TopicId
	}
	return nil
}

type ControlPruneMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TopicId *wrapperspb.StringValue   `protobuf:"bytes,1,opt,name=topic_id,proto3" json:"topic_id,omitempty"`
	PeerIds []*wrapperspb.StringValue `protobuf:"bytes,2,rep,name=peer_ids,proto3" json:"peer_ids,omitempty"`
}

func (x *ControlPruneMeta) Reset() {
	*x = ControlPruneMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControlPruneMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlPruneMeta) ProtoMessage() {}

func (x *ControlPruneMeta) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlPruneMeta.ProtoReflect.Descriptor instead.
func (*ControlPruneMeta) Descriptor() ([]byte, []int) {
	return file_pkg_proto_libp2p_trace_proto_rawDescGZIP(), []int{23}
}

func (x *ControlPruneMeta) GetTopicId() *wrapperspb.StringValue {
	if x != nil {
		return x.TopicId
	}
	return nil
}

func (x *ControlPruneMeta) GetPeerIds() []*wrapperspb.StringValue {
	if x != nil {
		return x.PeerIds
	}
	return nil
}

type TraceEventMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerId               *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=peer_id,proto3" json:"peer_id,omitempty"`
	SessionStartDateTime *timestamppb.Timestamp  `protobuf:"bytes,2,opt,name=session_start_date_time,proto3" json:"session_start_date_time,omitempty"`
}

func (x *TraceEventMetadata) Reset() {
	*x = TraceEventMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceEventMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceEventMetadata) ProtoMessage() {}

func (x *TraceEventMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceEventMetadata.ProtoReflect.Descriptor instead.
func (*TraceEventMetadata) Descriptor() ([]byte, []int) {
	return file_pkg_proto_libp2p_trace_proto_rawDescGZIP(), []int{24}
}

func (x *TraceEventMetadata) GetPeerId() *wrapperspb.StringValue {
	if x != nil {
		return x.PeerId
	}
	return nil
}

func (x *TraceEventMetadata) GetSessionStartDateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.SessionStartDateTime
	}
	return nil
}

type Connected struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemotePeer   *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=remote_peer,proto3" json:"remote_peer,omitempty"`
	RemoteMaddrs *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=remote_maddrs,proto3" json:"remote_maddrs,omitempty"`
	AgentVersion *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=agent_version,proto3" json:"agent_version,omitempty"`
	Direction    *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=direction,proto3" json:"direction,omitempty"`
	Opened       *timestamppb.Timestamp  `protobuf:"bytes,5,opt,name=opened,proto3" json:"opened,omitempty"`
	Transient    *wrapperspb.BoolValue   `protobuf:"bytes,6,opt,name=transient,proto3" json:"transient,omitempty"`
}

func (x *Connected) Reset() {
	*x = Connected{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Connected) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Connected) ProtoMessage() {}

func (x *Connected) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Connected.ProtoReflect.Descriptor instead.
func (*Connected) Descriptor() ([]byte, []int) {
	return file_pkg_proto_libp2p_trace_proto_rawDescGZIP(), []int{25}
}

func (x *Connected) GetRemotePeer() *wrapperspb.StringValue {
	if x != nil {
		return x.RemotePeer
	}
	return nil
}

func (x *Connected) GetRemoteMaddrs() *wrapperspb.StringValue {
	if x != nil {
		return x.RemoteMaddrs
	}
	return nil
}

func (x *Connected) GetAgentVersion() *wrapperspb.StringValue {
	if x != nil {
		return x.AgentVersion
	}
	return nil
}

func (x *Connected) GetDirection() *wrapperspb.StringValue {
	if x != nil {
		return x.Direction
	}
	return nil
}

func (x *Connected) GetOpened() *timestamppb.Timestamp {
	if x != nil {
		return x.Opened
	}
	return nil
}

func (x *Connected) GetTransient() *wrapperspb.BoolValue {
	if x != nil {
		return x.Transient
	}
	return nil
}

type Disconnected struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemotePeer   *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=remote_peer,proto3" json:"remote_peer,omitempty"`
	RemoteMaddrs *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=remote_maddrs,proto3" json:"remote_maddrs,omitempty"`
	AgentVersion *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=agent_version,proto3" json:"agent_version,omitempty"`
	Direction    *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=direction,proto3" json:"direction,omitempty"`
	Opened       *timestamppb.Timestamp  `protobuf:"bytes,5,opt,name=opened,proto3" json:"opened,omitempty"`
	Transient    *wrapperspb.BoolValue   `protobuf:"bytes,6,opt,name=transient,proto3" json:"transient,omitempty"`
}

func (x *Disconnected) Reset() {
	*x = Disconnected{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Disconnected) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Disconnected) ProtoMessage() {}

func (x *Disconnected) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Disconnected.ProtoReflect.Descriptor instead.
func (*Disconnected) Descriptor() ([]byte, []int) {
	return file_pkg_proto_libp2p_trace_proto_rawDescGZIP(), []int{26}
}

func (x *Disconnected) GetRemotePeer() *wrapperspb.StringValue {
	if x != nil {
		return x.RemotePeer
	}
	return nil
}

func (x *Disconnected) GetRemoteMaddrs() *wrapperspb.StringValue {
	if x != nil {
		return x.RemoteMaddrs
	}
	return nil
}

func (x *Disconnected) GetAgentVersion() *wrapperspb.StringValue {
	if x != nil {
		return x.AgentVersion
	}
	return nil
}

func (x *Disconnected) GetDirection() *wrapperspb.StringValue {
	if x != nil {
		return x.Direction
	}
	return nil
}

func (x *Disconnected) GetOpened() *timestamppb.Timestamp {
	if x != nil {
		return x.Opened
	}
	return nil
}

func (x *Disconnected) GetTransient() *wrapperspb.BoolValue {
	if x != nil {
		return x.Transient
	}
	return nil
}

var File_pkg_proto_libp2p_trace_proto protoreflect.FileDescriptor

var file_pkg_proto_libp2p_trace_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6c, 0x69, 0x62, 0x70,
	0x32, 0x70, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b,
	0x78, 0x61, 0x74, 0x75, 0x2e, 0x6c, 0x69, 0x62, 0x70, 0x32, 0x70, 0x1a, 0x1e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x82, 0x01, 0x0a,
	0x0e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x3c, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x12, 0x32, 0x0a,
	0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x22, 0xe7, 0x02, 0x0a, 0x0d, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x3c, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69,
	0x64, 0x12, 0x36, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12,
	0x32, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x6f, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x06, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x6f, 0x12, 0x40, 0x0a, 0x0c, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x22, 0xe6, 0x02, 0x0a, 0x10,
	0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x3c, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x12, 0x36,
	0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x70,
	0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x65,
	0x71, 0x5f, 0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x6f,
	0x12, 0x40, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x22, 0xe4, 0x02, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3c, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x36, 0x0a, 0x07, 0x70, 0x65, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x12, 0x30, 0x0a, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x6f, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x06, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x6f, 0x12, 0x40, 0x0a, 0x0c, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x22, 0xe5, 0x02, 0x0a, 0x0f,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x3c, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x12, 0x32, 0x0a,
	0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x12, 0x36, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x05, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0x34, 0x0a, 0x06, 0x73,
	0x65, 0x71, 0x5f, 0x6e, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x73, 0x65, 0x71, 0x5f, 0x6e,
	0x6f, 0x12, 0x40, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x22, 0x7b, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x50, 0x65, 0x65, 0x72, 0x12, 0x36,
	0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x70,
	0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x22, 0x44, 0x0a, 0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x65, 0x65, 0x72, 0x12, 0x36,
	0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x70,
	0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x22, 0x6b, 0x0a, 0x07, 0x52, 0x65, 0x63, 0x76, 0x52, 0x50,
	0x43, 0x12, 0x36, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x04, 0x6d, 0x65, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x6c,
	0x69, 0x62, 0x70, 0x32, 0x70, 0x2e, 0x52, 0x50, 0x43, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d,
	0x65, 0x74, 0x61, 0x22, 0x6b, 0x0a, 0x07, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x50, 0x43, 0x12, 0x36,
	0x0a, 0x07, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x73,
	0x65, 0x6e, 0x64, 0x5f, 0x74, 0x6f, 0x12, 0x28, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x6c, 0x69, 0x62, 0x70,
	0x32, 0x70, 0x2e, 0x52, 0x50, 0x43, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61,
	0x22, 0x6b, 0x0a, 0x07, 0x44, 0x72, 0x6f, 0x70, 0x52, 0x50, 0x43, 0x12, 0x36, 0x0a, 0x07, 0x73,
	0x65, 0x6e, 0x64, 0x5f, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x73, 0x65, 0x6e, 0x64,
	0x5f, 0x74, 0x6f, 0x12, 0x28, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x6c, 0x69, 0x62, 0x70, 0x32, 0x70, 0x2e,
	0x52, 0x50, 0x43, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x22, 0x3a, 0x0a,
	0x04, 0x4a, 0x6f, 0x69, 0x6e, 0x12, 0x32, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x22, 0x3b, 0x0a, 0x05, 0x4c, 0x65, 0x61,
	0x76, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x22, 0x73, 0x0a, 0x05, 0x47, 0x72, 0x61, 0x66, 0x74, 0x12,
	0x36, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07,
	0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x22, 0x73, 0x0a, 0x05, 0x50,
	0x72, 0x75, 0x6e, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x05,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63,
	0x22, 0x46, 0x0a, 0x0c, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x65, 0x65, 0x72,
	0x12, 0x36, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x22, 0xf2, 0x01, 0x0a, 0x14, 0x55, 0x6e, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x3c, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x12,
	0x32, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x12, 0x36, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x05, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x22, 0xe7, 0x01,
	0x0a, 0x07, 0x52, 0x50, 0x43, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x34, 0x0a, 0x08, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x78, 0x61,
	0x74, 0x75, 0x2e, 0x6c, 0x69, 0x62, 0x70, 0x32, 0x70, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12,
	0x3a, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x6c, 0x69,
	0x62, 0x70, 0x32, 0x70, 0x2e, 0x53, 0x75, 0x62, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x0d, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x32, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x78,
	0x61, 0x74, 0x75, 0x2e, 0x6c, 0x69, 0x62, 0x70, 0x32, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12,
	0x36, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07,
	0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x22, 0x7f, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x3c, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x22, 0x7d, 0x0a, 0x07, 0x53, 0x75, 0x62, 0x4d,
	0x65, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x09, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x38, 0x0a,
	0x08, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x74,
	0x6f, 0x70, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x22, 0xe1, 0x01, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x33, 0x0a, 0x05, 0x69, 0x68, 0x61, 0x76, 0x65,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x6c, 0x69,
	0x62, 0x70, 0x32, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x49, 0x48, 0x61, 0x76,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x05, 0x69, 0x68, 0x61, 0x76, 0x65, 0x12, 0x33, 0x0a, 0x05,
	0x69, 0x77, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x78, 0x61,
	0x74, 0x75, 0x2e, 0x6c, 0x69, 0x62, 0x70, 0x32, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x49, 0x57, 0x61, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x05, 0x69, 0x77, 0x61, 0x6e,
	0x74, 0x12, 0x33, 0x0a, 0x05, 0x67, 0x72, 0x61, 0x66, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x6c, 0x69, 0x62, 0x70, 0x32, 0x70, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x47, 0x72, 0x61, 0x66, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x52,
	0x05, 0x67, 0x72, 0x61, 0x66, 0x74, 0x12, 0x33, 0x0a, 0x05, 0x70, 0x72, 0x75, 0x6e, 0x65, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x6c, 0x69, 0x62,
	0x70, 0x32, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x72, 0x75, 0x6e, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x52, 0x05, 0x70, 0x72, 0x75, 0x6e, 0x65, 0x22, 0x8c, 0x01, 0x0a, 0x10,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x49, 0x48, 0x61, 0x76, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x12, 0x38, 0x0a, 0x08, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x08, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x12, 0x3e, 0x0a, 0x0b, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x22, 0x52, 0x0a, 0x10, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x49, 0x57, 0x61, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x3e,
	0x0a, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x22, 0x4c,
	0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x47, 0x72, 0x61, 0x66, 0x74, 0x4d, 0x65,
	0x74, 0x61, 0x12, 0x38, 0x0a, 0x08, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x08, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x22, 0x86, 0x01, 0x0a,
	0x10, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x72, 0x75, 0x6e, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x12, 0x38, 0x0a, 0x08, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x08, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x08, 0x70,
	0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x70, 0x65, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x73, 0x22, 0xa2, 0x01, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x63, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x36, 0x0a, 0x07,
	0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x70, 0x65, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x12, 0x54, 0x0a, 0x17, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x17, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xfd, 0x02, 0x0a, 0x09, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x3e, 0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x0d, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x5f, 0x6d, 0x61, 0x64, 0x64, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x64, 0x64, 0x72, 0x73, 0x12, 0x42, 0x0a, 0x0d,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x3a, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x06,
	0x6f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x65, 0x64,
	0x12, 0x38, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x65, 0x6e, 0x74, 0x22, 0x80, 0x03, 0x0a, 0x0c, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x3e, 0x0a, 0x0b, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x0d, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x64, 0x64, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x64, 0x64, 0x72, 0x73, 0x12,
	0x42, 0x0a, 0x0d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x32, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x6f, 0x70, 0x65,
	0x6e, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x65, 0x6e, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x65, 0x6e, 0x74, 0x2a, 0xb0, 0x04,
	0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4e, 0x4e,
	0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x49, 0x53, 0x43, 0x4f,
	0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x44, 0x44,
	0x5f, 0x50, 0x45, 0x45, 0x52, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x4d, 0x4f, 0x56,
	0x45, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x55, 0x42, 0x4c,
	0x49, 0x53, 0x48, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x05, 0x12, 0x12, 0x0a,
	0x0e, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10,
	0x06, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x4d,
	0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x45, 0x4c, 0x49,
	0x56, 0x45, 0x52, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x08, 0x12, 0x0c, 0x0a,
	0x08, 0x52, 0x45, 0x43, 0x56, 0x5f, 0x52, 0x50, 0x43, 0x10, 0x09, 0x12, 0x0c, 0x0a, 0x08, 0x53,
	0x45, 0x4e, 0x44, 0x5f, 0x52, 0x50, 0x43, 0x10, 0x0a, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x52, 0x4f,
	0x50, 0x5f, 0x52, 0x50, 0x43, 0x10, 0x0b, 0x12, 0x08, 0x0a, 0x04, 0x4a, 0x4f, 0x49, 0x4e, 0x10,
	0x0c, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x45, 0x41, 0x56, 0x45, 0x10, 0x0d, 0x12, 0x09, 0x0a, 0x05,
	0x47, 0x52, 0x41, 0x46, 0x54, 0x10, 0x0e, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x52, 0x55, 0x4e, 0x45,
	0x10, 0x0f, 0x12, 0x14, 0x0a, 0x10, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x4d,
	0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x10, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x48, 0x52, 0x4f,
	0x54, 0x54, 0x4c, 0x45, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x10, 0x11, 0x12, 0x19, 0x0a, 0x15, 0x55,
	0x4e, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x4d, 0x45, 0x53,
	0x53, 0x41, 0x47, 0x45, 0x10, 0x12, 0x12, 0x11, 0x0a, 0x0d, 0x48, 0x41, 0x4e, 0x44, 0x4c, 0x45,
	0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x10, 0x13, 0x12, 0x11, 0x0a, 0x0d, 0x48, 0x41, 0x4e,
	0x44, 0x4c, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x14, 0x12, 0x13, 0x0a, 0x0f,
	0x48, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x44, 0x41, 0x54, 0x41, 0x10,
	0x15, 0x12, 0x21, 0x0a, 0x1d, 0x48, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x42, 0x4c, 0x4f, 0x42,
	0x5f, 0x53, 0x49, 0x44, 0x45, 0x43, 0x41, 0x52, 0x53, 0x5f, 0x42, 0x59, 0x5f, 0x52, 0x41, 0x4e,
	0x47, 0x45, 0x10, 0x16, 0x12, 0x20, 0x0a, 0x1c, 0x48, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x42,
	0x4c, 0x4f, 0x42, 0x5f, 0x53, 0x49, 0x44, 0x45, 0x43, 0x41, 0x52, 0x53, 0x5f, 0x42, 0x59, 0x5f,
	0x52, 0x4f, 0x4f, 0x54, 0x10, 0x17, 0x12, 0x0f, 0x0a, 0x0b, 0x48, 0x41, 0x4e, 0x44, 0x4c, 0x45,
	0x5f, 0x50, 0x49, 0x4e, 0x47, 0x10, 0x18, 0x12, 0x12, 0x0a, 0x0e, 0x48, 0x41, 0x4e, 0x44, 0x4c,
	0x45, 0x5f, 0x47, 0x4f, 0x4f, 0x44, 0x42, 0x59, 0x45, 0x10, 0x19, 0x12, 0x21, 0x0a, 0x1d, 0x48,
	0x41, 0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x42, 0x4c, 0x4f,
	0x43, 0x4b, 0x53, 0x5f, 0x42, 0x59, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x1a, 0x12, 0x20,
	0x0a, 0x1c, 0x48, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f,
	0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x53, 0x5f, 0x42, 0x59, 0x5f, 0x52, 0x4f, 0x4f, 0x54, 0x10, 0x1b,
	0x42, 0x2e, 0x5a, 0x2c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65,
	0x74, 0x68, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x6f, 0x70, 0x73, 0x2f, 0x78, 0x61, 0x74, 0x75, 0x2f,
	0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6c, 0x69, 0x62, 0x70, 0x32, 0x70,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pkg_proto_libp2p_trace_proto_rawDescOnce sync.Once
	file_pkg_proto_libp2p_trace_proto_rawDescData = file_pkg_proto_libp2p_trace_proto_rawDesc
)

func file_pkg_proto_libp2p_trace_proto_rawDescGZIP() []byte {
	file_pkg_proto_libp2p_trace_proto_rawDescOnce.Do(func() {
		file_pkg_proto_libp2p_trace_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_proto_libp2p_trace_proto_rawDescData)
	})
	return file_pkg_proto_libp2p_trace_proto_rawDescData
}

var file_pkg_proto_libp2p_trace_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_pkg_proto_libp2p_trace_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_pkg_proto_libp2p_trace_proto_goTypes = []interface{}{
	(EventType)(0),                 // 0: xatu.libp2p.EventType
	(*PublishMessage)(nil),         // 1: xatu.libp2p.PublishMessage
	(*RejectMessage)(nil),          // 2: xatu.libp2p.RejectMessage
	(*DuplicateMessage)(nil),       // 3: xatu.libp2p.DuplicateMessage
	(*DeliverMessage)(nil),         // 4: xatu.libp2p.DeliverMessage
	(*ValidateMessage)(nil),        // 5: xatu.libp2p.ValidateMessage
	(*AddPeer)(nil),                // 6: xatu.libp2p.AddPeer
	(*RemovePeer)(nil),             // 7: xatu.libp2p.RemovePeer
	(*RecvRPC)(nil),                // 8: xatu.libp2p.RecvRPC
	(*SendRPC)(nil),                // 9: xatu.libp2p.SendRPC
	(*DropRPC)(nil),                // 10: xatu.libp2p.DropRPC
	(*Join)(nil),                   // 11: xatu.libp2p.Join
	(*Leave)(nil),                  // 12: xatu.libp2p.Leave
	(*Graft)(nil),                  // 13: xatu.libp2p.Graft
	(*Prune)(nil),                  // 14: xatu.libp2p.Prune
	(*ThrottlePeer)(nil),           // 15: xatu.libp2p.ThrottlePeer
	(*UndeliverableMessage)(nil),   // 16: xatu.libp2p.UndeliverableMessage
	(*RPCMeta)(nil),                // 17: xatu.libp2p.RPCMeta
	(*MessageMeta)(nil),            // 18: xatu.libp2p.MessageMeta
	(*SubMeta)(nil),                // 19: xatu.libp2p.SubMeta
	(*ControlMeta)(nil),            // 20: xatu.libp2p.ControlMeta
	(*ControlIHaveMeta)(nil),       // 21: xatu.libp2p.ControlIHaveMeta
	(*ControlIWantMeta)(nil),       // 22: xatu.libp2p.ControlIWantMeta
	(*ControlGraftMeta)(nil),       // 23: xatu.libp2p.ControlGraftMeta
	(*ControlPruneMeta)(nil),       // 24: xatu.libp2p.ControlPruneMeta
	(*TraceEventMetadata)(nil),     // 25: xatu.libp2p.TraceEventMetadata
	(*Connected)(nil),              // 26: xatu.libp2p.Connected
	(*Disconnected)(nil),           // 27: xatu.libp2p.Disconnected
	(*wrapperspb.StringValue)(nil), // 28: google.protobuf.StringValue
	(*wrapperspb.UInt32Value)(nil), // 29: google.protobuf.UInt32Value
	(*wrapperspb.BoolValue)(nil),   // 30: google.protobuf.BoolValue
	(*timestamppb.Timestamp)(nil),  // 31: google.protobuf.Timestamp
}
var file_pkg_proto_libp2p_trace_proto_depIdxs = []int32{
	28, // 0: xatu.libp2p.PublishMessage.message_id:type_name -> google.protobuf.StringValue
	28, // 1: xatu.libp2p.PublishMessage.topic:type_name -> google.protobuf.StringValue
	28, // 2: xatu.libp2p.RejectMessage.message_id:type_name -> google.protobuf.StringValue
	28, // 3: xatu.libp2p.RejectMessage.peer_id:type_name -> google.protobuf.StringValue
	28, // 4: xatu.libp2p.RejectMessage.reason:type_name -> google.protobuf.StringValue
	28, // 5: xatu.libp2p.RejectMessage.topic:type_name -> google.protobuf.StringValue
	28, // 6: xatu.libp2p.RejectMessage.seq_no:type_name -> google.protobuf.StringValue
	29, // 7: xatu.libp2p.RejectMessage.message_size:type_name -> google.protobuf.UInt32Value
	28, // 8: xatu.libp2p.DuplicateMessage.message_id:type_name -> google.protobuf.StringValue
	28, // 9: xatu.libp2p.DuplicateMessage.peer_id:type_name -> google.protobuf.StringValue
	28, // 10: xatu.libp2p.DuplicateMessage.topic:type_name -> google.protobuf.StringValue
	28, // 11: xatu.libp2p.DuplicateMessage.seq_no:type_name -> google.protobuf.StringValue
	29, // 12: xatu.libp2p.DuplicateMessage.message_size:type_name -> google.protobuf.UInt32Value
	30, // 13: xatu.libp2p.DuplicateMessage.local:type_name -> google.protobuf.BoolValue
	28, // 14: xatu.libp2p.DeliverMessage.message_id:type_name -> google.protobuf.StringValue
	28, // 15: xatu.libp2p.DeliverMessage.topic:type_name -> google.protobuf.StringValue
	28, // 16: xatu.libp2p.DeliverMessage.peer_id:type_name -> google.protobuf.StringValue
	30, // 17: xatu.libp2p.DeliverMessage.local:type_name -> google.protobuf.BoolValue
	28, // 18: xatu.libp2p.DeliverMessage.seq_no:type_name -> google.protobuf.StringValue
	29, // 19: xatu.libp2p.DeliverMessage.message_size:type_name -> google.protobuf.UInt32Value
	28, // 20: xatu.libp2p.ValidateMessage.message_id:type_name -> google.protobuf.StringValue
	28, // 21: xatu.libp2p.ValidateMessage.topic:type_name -> google.protobuf.StringValue
	28, // 22: xatu.libp2p.ValidateMessage.peer_id:type_name -> google.protobuf.StringValue
	30, // 23: xatu.libp2p.ValidateMessage.local:type_name -> google.protobuf.BoolValue
	28, // 24: xatu.libp2p.ValidateMessage.seq_no:type_name -> google.protobuf.StringValue
	29, // 25: xatu.libp2p.ValidateMessage.message_size:type_name -> google.protobuf.UInt32Value
	28, // 26: xatu.libp2p.AddPeer.peer_id:type_name -> google.protobuf.StringValue
	28, // 27: xatu.libp2p.AddPeer.protocol:type_name -> google.protobuf.StringValue
	28, // 28: xatu.libp2p.RemovePeer.peer_id:type_name -> google.protobuf.StringValue
	28, // 29: xatu.libp2p.RecvRPC.peer_id:type_name -> google.protobuf.StringValue
	17, // 30: xatu.libp2p.RecvRPC.meta:type_name -> xatu.libp2p.RPCMeta
	28, // 31: xatu.libp2p.SendRPC.send_to:type_name -> google.protobuf.StringValue
	17, // 32: xatu.libp2p.SendRPC.meta:type_name -> xatu.libp2p.RPCMeta
	28, // 33: xatu.libp2p.DropRPC.send_to:type_name -> google.protobuf.StringValue
	17, // 34: xatu.libp2p.DropRPC.meta:type_name -> xatu.libp2p.RPCMeta
	28, // 35: xatu.libp2p.Join.topic:type_name -> google.protobuf.StringValue
	28, // 36: xatu.libp2p.Leave.topic:type_name -> google.protobuf.StringValue
	28, // 37: xatu.libp2p.Graft.peer_id:type_name -> google.protobuf.StringValue
	28, // 38: xatu.libp2p.Graft.topic:type_name -> google.protobuf.StringValue
	28, // 39: xatu.libp2p.Prune.peer_id:type_name -> google.protobuf.StringValue
	28, // 40: xatu.libp2p.Prune.topic:type_name -> google.protobuf.StringValue
	28, // 41: xatu.libp2p.ThrottlePeer.peer_id:type_name -> google.protobuf.StringValue
	28, // 42: xatu.libp2p.UndeliverableMessage.message_id:type_name -> google.protobuf.StringValue
	28, // 43: xatu.libp2p.UndeliverableMessage.topic:type_name -> google.protobuf.StringValue
	28, // 44: xatu.libp2p.UndeliverableMessage.peer_id:type_name -> google.protobuf.StringValue
	30, // 45: xatu.libp2p.UndeliverableMessage.local:type_name -> google.protobuf.BoolValue
	18, // 46: xatu.libp2p.RPCMeta.messages:type_name -> xatu.libp2p.MessageMeta
	19, // 47: xatu.libp2p.RPCMeta.subscriptions:type_name -> xatu.libp2p.SubMeta
	20, // 48: xatu.libp2p.RPCMeta.control:type_name -> xatu.libp2p.ControlMeta
	28, // 49: xatu.libp2p.RPCMeta.peer_id:type_name -> google.protobuf.StringValue
	28, // 50: xatu.libp2p.MessageMeta.message_id:type_name -> google.protobuf.StringValue
	28, // 51: xatu.libp2p.MessageMeta.topic:type_name -> google.protobuf.StringValue
	30, // 52: xatu.libp2p.SubMeta.subscribe:type_name -> google.protobuf.BoolValue
	28, // 53: xatu.libp2p.SubMeta.topic_id:type_name -> google.protobuf.StringValue
	21, // 54: xatu.libp2p.ControlMeta.ihave:type_name -> xatu.libp2p.ControlIHaveMeta
	22, // 55: xatu.libp2p.ControlMeta.iwant:type_name -> xatu.libp2p.ControlIWantMeta
	23, // 56: xatu.libp2p.ControlMeta.graft:type_name -> xatu.libp2p.ControlGraftMeta
	24, // 57: xatu.libp2p.ControlMeta.prune:type_name -> xatu.libp2p.ControlPruneMeta
	28, // 58: xatu.libp2p.ControlIHaveMeta.topic_id:type_name -> google.protobuf.StringValue
	28, // 59: xatu.libp2p.ControlIHaveMeta.message_ids:type_name -> google.protobuf.StringValue
	28, // 60: xatu.libp2p.ControlIWantMeta.message_ids:type_name -> google.protobuf.StringValue
	28, // 61: xatu.libp2p.ControlGraftMeta.topic_id:type_name -> google.protobuf.StringValue
	28, // 62: xatu.libp2p.ControlPruneMeta.topic_id:type_name -> google.protobuf.StringValue
	28, // 63: xatu.libp2p.ControlPruneMeta.peer_ids:type_name -> google.protobuf.StringValue
	28, // 64: xatu.libp2p.TraceEventMetadata.peer_id:type_name -> google.protobuf.StringValue
	31, // 65: xatu.libp2p.TraceEventMetadata.session_start_date_time:type_name -> google.protobuf.Timestamp
	28, // 66: xatu.libp2p.Connected.remote_peer:type_name -> google.protobuf.StringValue
	28, // 67: xatu.libp2p.Connected.remote_maddrs:type_name -> google.protobuf.StringValue
	28, // 68: xatu.libp2p.Connected.agent_version:type_name -> google.protobuf.StringValue
	28, // 69: xatu.libp2p.Connected.direction:type_name -> google.protobuf.StringValue
	31, // 70: xatu.libp2p.Connected.opened:type_name -> google.protobuf.Timestamp
	30, // 71: xatu.libp2p.Connected.transient:type_name -> google.protobuf.BoolValue
	28, // 72: xatu.libp2p.Disconnected.remote_peer:type_name -> google.protobuf.StringValue
	28, // 73: xatu.libp2p.Disconnected.remote_maddrs:type_name -> google.protobuf.StringValue
	28, // 74: xatu.libp2p.Disconnected.agent_version:type_name -> google.protobuf.StringValue
	28, // 75: xatu.libp2p.Disconnected.direction:type_name -> google.protobuf.StringValue
	31, // 76: xatu.libp2p.Disconnected.opened:type_name -> google.protobuf.Timestamp
	30, // 77: xatu.libp2p.Disconnected.transient:type_name -> google.protobuf.BoolValue
	78, // [78:78] is the sub-list for method output_type
	78, // [78:78] is the sub-list for method input_type
	78, // [78:78] is the sub-list for extension type_name
	78, // [78:78] is the sub-list for extension extendee
	0,  // [0:78] is the sub-list for field type_name
}

func init() { file_pkg_proto_libp2p_trace_proto_init() }
func file_pkg_proto_libp2p_trace_proto_init() {
	if File_pkg_proto_libp2p_trace_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pkg_proto_libp2p_trace_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_libp2p_trace_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RejectMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_libp2p_trace_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DuplicateMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_libp2p_trace_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeliverMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_libp2p_trace_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_libp2p_trace_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddPeer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_libp2p_trace_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemovePeer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_libp2p_trace_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecvRPC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_libp2p_trace_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendRPC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_libp2p_trace_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DropRPC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_libp2p_trace_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Join); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_libp2p_trace_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Leave); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_libp2p_trace_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Graft); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_libp2p_trace_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Prune); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_libp2p_trace_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThrottlePeer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_libp2p_trace_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UndeliverableMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_libp2p_trace_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RPCMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_libp2p_trace_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_libp2p_trace_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_libp2p_trace_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ControlMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_libp2p_trace_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ControlIHaveMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_libp2p_trace_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ControlIWantMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_libp2p_trace_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ControlGraftMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_libp2p_trace_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ControlPruneMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_libp2p_trace_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraceEventMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_libp2p_trace_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Connected); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_libp2p_trace_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Disconnected); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_proto_libp2p_trace_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pkg_proto_libp2p_trace_proto_goTypes,
		DependencyIndexes: file_pkg_proto_libp2p_trace_proto_depIdxs,
		EnumInfos:         file_pkg_proto_libp2p_trace_proto_enumTypes,
		MessageInfos:      file_pkg_proto_libp2p_trace_proto_msgTypes,
	}.Build()
	File_pkg_proto_libp2p_trace_proto = out.File
	file_pkg_proto_libp2p_trace_proto_rawDesc = nil
	file_pkg_proto_libp2p_trace_proto_goTypes = nil
	file_pkg_proto_libp2p_trace_proto_depIdxs = nil
}
