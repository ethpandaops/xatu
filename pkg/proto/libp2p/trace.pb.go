// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: pkg/proto/libp2p/trace.proto

package libp2p

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EventType int32

const (
	EventType_UNKNOWN                    EventType = 0
	EventType_CONNECTED                  EventType = 1
	EventType_DISCONNECTED               EventType = 2
	EventType_ADD_PEER                   EventType = 3
	EventType_REMOVE_PEER                EventType = 4
	EventType_RECV_RPC                   EventType = 5
	EventType_SEND_RPC                   EventType = 6
	EventType_JOIN                       EventType = 7
	EventType_HANDLE_STATUS              EventType = 8
	EventType_HANDLE_METADATA            EventType = 9
	EventType_DROP_RPC                   EventType = 10
	EventType_LEAVE                      EventType = 11
	EventType_GRAFT                      EventType = 12
	EventType_PRUNE                      EventType = 13
	EventType_PUBLISH_MESSAGE            EventType = 14
	EventType_REJECT_MESSAGE             EventType = 15
	EventType_DUPLICATE_MESSAGE          EventType = 16
	EventType_DELIVER_MESSAGE            EventType = 17
	EventType_RPC_META_CONTROL_IHAVE     EventType = 18
	EventType_RPC_META_CONTROL_IWANT     EventType = 19
	EventType_RPC_META_CONTROL_IDONTWANT EventType = 20
	EventType_RPC_META_CONTROL_GRAFT     EventType = 21
	EventType_RPC_META_CONTROL_PRUNE     EventType = 22
	EventType_RPC_META_SUBSCRIPTION      EventType = 23
	EventType_RPC_META_MESSAGE           EventType = 24
)

// Enum value maps for EventType.
var (
	EventType_name = map[int32]string{
		0:  "UNKNOWN",
		1:  "CONNECTED",
		2:  "DISCONNECTED",
		3:  "ADD_PEER",
		4:  "REMOVE_PEER",
		5:  "RECV_RPC",
		6:  "SEND_RPC",
		7:  "JOIN",
		8:  "HANDLE_STATUS",
		9:  "HANDLE_METADATA",
		10: "DROP_RPC",
		11: "LEAVE",
		12: "GRAFT",
		13: "PRUNE",
		14: "PUBLISH_MESSAGE",
		15: "REJECT_MESSAGE",
		16: "DUPLICATE_MESSAGE",
		17: "DELIVER_MESSAGE",
		18: "RPC_META_CONTROL_IHAVE",
		19: "RPC_META_CONTROL_IWANT",
		20: "RPC_META_CONTROL_IDONTWANT",
		21: "RPC_META_CONTROL_GRAFT",
		22: "RPC_META_CONTROL_PRUNE",
		23: "RPC_META_SUBSCRIPTION",
		24: "RPC_META_MESSAGE",
	}
	EventType_value = map[string]int32{
		"UNKNOWN":                    0,
		"CONNECTED":                  1,
		"DISCONNECTED":               2,
		"ADD_PEER":                   3,
		"REMOVE_PEER":                4,
		"RECV_RPC":                   5,
		"SEND_RPC":                   6,
		"JOIN":                       7,
		"HANDLE_STATUS":              8,
		"HANDLE_METADATA":            9,
		"DROP_RPC":                   10,
		"LEAVE":                      11,
		"GRAFT":                      12,
		"PRUNE":                      13,
		"PUBLISH_MESSAGE":            14,
		"REJECT_MESSAGE":             15,
		"DUPLICATE_MESSAGE":          16,
		"DELIVER_MESSAGE":            17,
		"RPC_META_CONTROL_IHAVE":     18,
		"RPC_META_CONTROL_IWANT":     19,
		"RPC_META_CONTROL_IDONTWANT": 20,
		"RPC_META_CONTROL_GRAFT":     21,
		"RPC_META_CONTROL_PRUNE":     22,
		"RPC_META_SUBSCRIPTION":      23,
		"RPC_META_MESSAGE":           24,
	}
)

func (x EventType) Enum() *EventType {
	p := new(EventType)
	*p = x
	return p
}

func (x EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_proto_libp2p_trace_proto_enumTypes[0].Descriptor()
}

func (EventType) Type() protoreflect.EnumType {
	return &file_pkg_proto_libp2p_trace_proto_enumTypes[0]
}

func (x EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventType.Descriptor instead.
func (EventType) EnumDescriptor() ([]byte, []int) {
	return file_pkg_proto_libp2p_trace_proto_rawDescGZIP(), []int{0}
}

type AddPeer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerId   *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=peer_id,proto3" json:"peer_id,omitempty"`
	Protocol *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=protocol,proto3" json:"protocol,omitempty"`
}

func (x *AddPeer) Reset() {
	*x = AddPeer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddPeer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddPeer) ProtoMessage() {}

func (x *AddPeer) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddPeer.ProtoReflect.Descriptor instead.
func (*AddPeer) Descriptor() ([]byte, []int) {
	return file_pkg_proto_libp2p_trace_proto_rawDescGZIP(), []int{0}
}

func (x *AddPeer) GetPeerId() *wrapperspb.StringValue {
	if x != nil {
		return x.PeerId
	}
	return nil
}

func (x *AddPeer) GetProtocol() *wrapperspb.StringValue {
	if x != nil {
		return x.Protocol
	}
	return nil
}

type RemovePeer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerId *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=peer_id,proto3" json:"peer_id,omitempty"`
}

func (x *RemovePeer) Reset() {
	*x = RemovePeer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemovePeer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemovePeer) ProtoMessage() {}

func (x *RemovePeer) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemovePeer.ProtoReflect.Descriptor instead.
func (*RemovePeer) Descriptor() ([]byte, []int) {
	return file_pkg_proto_libp2p_trace_proto_rawDescGZIP(), []int{1}
}

func (x *RemovePeer) GetPeerId() *wrapperspb.StringValue {
	if x != nil {
		return x.PeerId
	}
	return nil
}

type RecvRPC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerId *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=peer_id,proto3" json:"peer_id,omitempty"`
	Meta   *RPCMeta                `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
}

func (x *RecvRPC) Reset() {
	*x = RecvRPC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecvRPC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecvRPC) ProtoMessage() {}

func (x *RecvRPC) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecvRPC.ProtoReflect.Descriptor instead.
func (*RecvRPC) Descriptor() ([]byte, []int) {
	return file_pkg_proto_libp2p_trace_proto_rawDescGZIP(), []int{2}
}

func (x *RecvRPC) GetPeerId() *wrapperspb.StringValue {
	if x != nil {
		return x.PeerId
	}
	return nil
}

func (x *RecvRPC) GetMeta() *RPCMeta {
	if x != nil {
		return x.Meta
	}
	return nil
}

type SendRPC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerId *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=peer_id,proto3" json:"peer_id,omitempty"`
	Meta   *RPCMeta                `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
}

func (x *SendRPC) Reset() {
	*x = SendRPC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendRPC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendRPC) ProtoMessage() {}

func (x *SendRPC) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendRPC.ProtoReflect.Descriptor instead.
func (*SendRPC) Descriptor() ([]byte, []int) {
	return file_pkg_proto_libp2p_trace_proto_rawDescGZIP(), []int{3}
}

func (x *SendRPC) GetPeerId() *wrapperspb.StringValue {
	if x != nil {
		return x.PeerId
	}
	return nil
}

func (x *SendRPC) GetMeta() *RPCMeta {
	if x != nil {
		return x.Meta
	}
	return nil
}

type DropRPC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerId *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=peer_id,proto3" json:"peer_id,omitempty"`
	Meta   *RPCMeta                `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
}

func (x *DropRPC) Reset() {
	*x = DropRPC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropRPC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropRPC) ProtoMessage() {}

func (x *DropRPC) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropRPC.ProtoReflect.Descriptor instead.
func (*DropRPC) Descriptor() ([]byte, []int) {
	return file_pkg_proto_libp2p_trace_proto_rawDescGZIP(), []int{4}
}

func (x *DropRPC) GetPeerId() *wrapperspb.StringValue {
	if x != nil {
		return x.PeerId
	}
	return nil
}

func (x *DropRPC) GetMeta() *RPCMeta {
	if x != nil {
		return x.Meta
	}
	return nil
}

type Join struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topic *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
}

func (x *Join) Reset() {
	*x = Join{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Join) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Join) ProtoMessage() {}

func (x *Join) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Join.ProtoReflect.Descriptor instead.
func (*Join) Descriptor() ([]byte, []int) {
	return file_pkg_proto_libp2p_trace_proto_rawDescGZIP(), []int{5}
}

func (x *Join) GetTopic() *wrapperspb.StringValue {
	if x != nil {
		return x.Topic
	}
	return nil
}

type Leave struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topic *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
}

func (x *Leave) Reset() {
	*x = Leave{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Leave) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Leave) ProtoMessage() {}

func (x *Leave) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Leave.ProtoReflect.Descriptor instead.
func (*Leave) Descriptor() ([]byte, []int) {
	return file_pkg_proto_libp2p_trace_proto_rawDescGZIP(), []int{6}
}

func (x *Leave) GetTopic() *wrapperspb.StringValue {
	if x != nil {
		return x.Topic
	}
	return nil
}

type Graft struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerId *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=peer_id,proto3" json:"peer_id,omitempty"`
	Topic  *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
}

func (x *Graft) Reset() {
	*x = Graft{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Graft) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Graft) ProtoMessage() {}

func (x *Graft) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Graft.ProtoReflect.Descriptor instead.
func (*Graft) Descriptor() ([]byte, []int) {
	return file_pkg_proto_libp2p_trace_proto_rawDescGZIP(), []int{7}
}

func (x *Graft) GetPeerId() *wrapperspb.StringValue {
	if x != nil {
		return x.PeerId
	}
	return nil
}

func (x *Graft) GetTopic() *wrapperspb.StringValue {
	if x != nil {
		return x.Topic
	}
	return nil
}

type Prune struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerId *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=peer_id,proto3" json:"peer_id,omitempty"`
	Topic  *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
}

func (x *Prune) Reset() {
	*x = Prune{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Prune) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Prune) ProtoMessage() {}

func (x *Prune) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Prune.ProtoReflect.Descriptor instead.
func (*Prune) Descriptor() ([]byte, []int) {
	return file_pkg_proto_libp2p_trace_proto_rawDescGZIP(), []int{8}
}

func (x *Prune) GetPeerId() *wrapperspb.StringValue {
	if x != nil {
		return x.PeerId
	}
	return nil
}

func (x *Prune) GetTopic() *wrapperspb.StringValue {
	if x != nil {
		return x.Topic
	}
	return nil
}

type PublishMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgId *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=msg_id,proto3" json:"msg_id,omitempty"`
	Topic *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
}

func (x *PublishMessage) Reset() {
	*x = PublishMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishMessage) ProtoMessage() {}

func (x *PublishMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishMessage.ProtoReflect.Descriptor instead.
func (*PublishMessage) Descriptor() ([]byte, []int) {
	return file_pkg_proto_libp2p_trace_proto_rawDescGZIP(), []int{9}
}

func (x *PublishMessage) GetMsgId() *wrapperspb.StringValue {
	if x != nil {
		return x.MsgId
	}
	return nil
}

func (x *PublishMessage) GetTopic() *wrapperspb.StringValue {
	if x != nil {
		return x.Topic
	}
	return nil
}

type RejectMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgId     *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=msg_id,proto3" json:"msg_id,omitempty"`
	PeerId    *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=peer_id,proto3" json:"peer_id,omitempty"`
	Topic     *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=topic,proto3" json:"topic,omitempty"`
	Reason    *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,omitempty"`
	Local     *wrapperspb.BoolValue   `protobuf:"bytes,5,opt,name=local,proto3" json:"local,omitempty"`
	MsgSize   *wrapperspb.UInt32Value `protobuf:"bytes,6,opt,name=msg_size,proto3" json:"msg_size,omitempty"`
	SeqNumber *wrapperspb.UInt64Value `protobuf:"bytes,7,opt,name=seq_number,proto3" json:"seq_number,omitempty"`
}

func (x *RejectMessage) Reset() {
	*x = RejectMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RejectMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RejectMessage) ProtoMessage() {}

func (x *RejectMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RejectMessage.ProtoReflect.Descriptor instead.
func (*RejectMessage) Descriptor() ([]byte, []int) {
	return file_pkg_proto_libp2p_trace_proto_rawDescGZIP(), []int{10}
}

func (x *RejectMessage) GetMsgId() *wrapperspb.StringValue {
	if x != nil {
		return x.MsgId
	}
	return nil
}

func (x *RejectMessage) GetPeerId() *wrapperspb.StringValue {
	if x != nil {
		return x.PeerId
	}
	return nil
}

func (x *RejectMessage) GetTopic() *wrapperspb.StringValue {
	if x != nil {
		return x.Topic
	}
	return nil
}

func (x *RejectMessage) GetReason() *wrapperspb.StringValue {
	if x != nil {
		return x.Reason
	}
	return nil
}

func (x *RejectMessage) GetLocal() *wrapperspb.BoolValue {
	if x != nil {
		return x.Local
	}
	return nil
}

func (x *RejectMessage) GetMsgSize() *wrapperspb.UInt32Value {
	if x != nil {
		return x.MsgSize
	}
	return nil
}

func (x *RejectMessage) GetSeqNumber() *wrapperspb.UInt64Value {
	if x != nil {
		return x.SeqNumber
	}
	return nil
}

type DuplicateMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgId     *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=msg_id,proto3" json:"msg_id,omitempty"`
	PeerId    *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=peer_id,proto3" json:"peer_id,omitempty"`
	Topic     *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=topic,proto3" json:"topic,omitempty"`
	Local     *wrapperspb.BoolValue   `protobuf:"bytes,4,opt,name=local,proto3" json:"local,omitempty"`
	MsgSize   *wrapperspb.UInt32Value `protobuf:"bytes,5,opt,name=msg_size,proto3" json:"msg_size,omitempty"`
	SeqNumber *wrapperspb.UInt64Value `protobuf:"bytes,6,opt,name=seq_number,proto3" json:"seq_number,omitempty"`
}

func (x *DuplicateMessage) Reset() {
	*x = DuplicateMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DuplicateMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DuplicateMessage) ProtoMessage() {}

func (x *DuplicateMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DuplicateMessage.ProtoReflect.Descriptor instead.
func (*DuplicateMessage) Descriptor() ([]byte, []int) {
	return file_pkg_proto_libp2p_trace_proto_rawDescGZIP(), []int{11}
}

func (x *DuplicateMessage) GetMsgId() *wrapperspb.StringValue {
	if x != nil {
		return x.MsgId
	}
	return nil
}

func (x *DuplicateMessage) GetPeerId() *wrapperspb.StringValue {
	if x != nil {
		return x.PeerId
	}
	return nil
}

func (x *DuplicateMessage) GetTopic() *wrapperspb.StringValue {
	if x != nil {
		return x.Topic
	}
	return nil
}

func (x *DuplicateMessage) GetLocal() *wrapperspb.BoolValue {
	if x != nil {
		return x.Local
	}
	return nil
}

func (x *DuplicateMessage) GetMsgSize() *wrapperspb.UInt32Value {
	if x != nil {
		return x.MsgSize
	}
	return nil
}

func (x *DuplicateMessage) GetSeqNumber() *wrapperspb.UInt64Value {
	if x != nil {
		return x.SeqNumber
	}
	return nil
}

type DeliverMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgId     *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=msg_id,proto3" json:"msg_id,omitempty"`
	PeerId    *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=peer_id,proto3" json:"peer_id,omitempty"`
	Topic     *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=topic,proto3" json:"topic,omitempty"`
	Local     *wrapperspb.BoolValue   `protobuf:"bytes,4,opt,name=local,proto3" json:"local,omitempty"`
	MsgSize   *wrapperspb.UInt32Value `protobuf:"bytes,5,opt,name=msg_size,proto3" json:"msg_size,omitempty"`
	SeqNumber *wrapperspb.UInt64Value `protobuf:"bytes,6,opt,name=seq_number,proto3" json:"seq_number,omitempty"`
}

func (x *DeliverMessage) Reset() {
	*x = DeliverMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeliverMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeliverMessage) ProtoMessage() {}

func (x *DeliverMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeliverMessage.ProtoReflect.Descriptor instead.
func (*DeliverMessage) Descriptor() ([]byte, []int) {
	return file_pkg_proto_libp2p_trace_proto_rawDescGZIP(), []int{12}
}

func (x *DeliverMessage) GetMsgId() *wrapperspb.StringValue {
	if x != nil {
		return x.MsgId
	}
	return nil
}

func (x *DeliverMessage) GetPeerId() *wrapperspb.StringValue {
	if x != nil {
		return x.PeerId
	}
	return nil
}

func (x *DeliverMessage) GetTopic() *wrapperspb.StringValue {
	if x != nil {
		return x.Topic
	}
	return nil
}

func (x *DeliverMessage) GetLocal() *wrapperspb.BoolValue {
	if x != nil {
		return x.Local
	}
	return nil
}

func (x *DeliverMessage) GetMsgSize() *wrapperspb.UInt32Value {
	if x != nil {
		return x.MsgSize
	}
	return nil
}

func (x *DeliverMessage) GetSeqNumber() *wrapperspb.UInt64Value {
	if x != nil {
		return x.SeqNumber
	}
	return nil
}

type TraceEventMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerId *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=peer_id,proto3" json:"peer_id,omitempty"`
}

func (x *TraceEventMetadata) Reset() {
	*x = TraceEventMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceEventMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceEventMetadata) ProtoMessage() {}

func (x *TraceEventMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceEventMetadata.ProtoReflect.Descriptor instead.
func (*TraceEventMetadata) Descriptor() ([]byte, []int) {
	return file_pkg_proto_libp2p_trace_proto_rawDescGZIP(), []int{13}
}

func (x *TraceEventMetadata) GetPeerId() *wrapperspb.StringValue {
	if x != nil {
		return x.PeerId
	}
	return nil
}

type Connected struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemotePeer   *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=remote_peer,proto3" json:"remote_peer,omitempty"`
	RemoteMaddrs *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=remote_maddrs,proto3" json:"remote_maddrs,omitempty"`
	AgentVersion *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=agent_version,proto3" json:"agent_version,omitempty"`
	Direction    *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=direction,proto3" json:"direction,omitempty"`
	Opened       *timestamppb.Timestamp  `protobuf:"bytes,5,opt,name=opened,proto3" json:"opened,omitempty"`
	// See: https://github.com/probe-lab/hermes/commit/614e34ed0db780ee08c3bc333925a62409096166
	//
	// Deprecated: Marked as deprecated in pkg/proto/libp2p/trace.proto.
	Transient *wrapperspb.BoolValue `protobuf:"bytes,6,opt,name=transient,proto3" json:"transient,omitempty"`
	Limited   *wrapperspb.BoolValue `protobuf:"bytes,7,opt,name=limited,proto3" json:"limited,omitempty"`
}

func (x *Connected) Reset() {
	*x = Connected{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Connected) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Connected) ProtoMessage() {}

func (x *Connected) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Connected.ProtoReflect.Descriptor instead.
func (*Connected) Descriptor() ([]byte, []int) {
	return file_pkg_proto_libp2p_trace_proto_rawDescGZIP(), []int{14}
}

func (x *Connected) GetRemotePeer() *wrapperspb.StringValue {
	if x != nil {
		return x.RemotePeer
	}
	return nil
}

func (x *Connected) GetRemoteMaddrs() *wrapperspb.StringValue {
	if x != nil {
		return x.RemoteMaddrs
	}
	return nil
}

func (x *Connected) GetAgentVersion() *wrapperspb.StringValue {
	if x != nil {
		return x.AgentVersion
	}
	return nil
}

func (x *Connected) GetDirection() *wrapperspb.StringValue {
	if x != nil {
		return x.Direction
	}
	return nil
}

func (x *Connected) GetOpened() *timestamppb.Timestamp {
	if x != nil {
		return x.Opened
	}
	return nil
}

// Deprecated: Marked as deprecated in pkg/proto/libp2p/trace.proto.
func (x *Connected) GetTransient() *wrapperspb.BoolValue {
	if x != nil {
		return x.Transient
	}
	return nil
}

func (x *Connected) GetLimited() *wrapperspb.BoolValue {
	if x != nil {
		return x.Limited
	}
	return nil
}

type Disconnected struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemotePeer   *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=remote_peer,proto3" json:"remote_peer,omitempty"`
	RemoteMaddrs *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=remote_maddrs,proto3" json:"remote_maddrs,omitempty"`
	AgentVersion *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=agent_version,proto3" json:"agent_version,omitempty"`
	Direction    *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=direction,proto3" json:"direction,omitempty"`
	Opened       *timestamppb.Timestamp  `protobuf:"bytes,5,opt,name=opened,proto3" json:"opened,omitempty"`
	// See: https://github.com/probe-lab/hermes/commit/614e34ed0db780ee08c3bc333925a62409096166
	//
	// Deprecated: Marked as deprecated in pkg/proto/libp2p/trace.proto.
	Transient *wrapperspb.BoolValue `protobuf:"bytes,6,opt,name=transient,proto3" json:"transient,omitempty"`
	Limited   *wrapperspb.BoolValue `protobuf:"bytes,7,opt,name=limited,proto3" json:"limited,omitempty"`
}

func (x *Disconnected) Reset() {
	*x = Disconnected{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Disconnected) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Disconnected) ProtoMessage() {}

func (x *Disconnected) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Disconnected.ProtoReflect.Descriptor instead.
func (*Disconnected) Descriptor() ([]byte, []int) {
	return file_pkg_proto_libp2p_trace_proto_rawDescGZIP(), []int{15}
}

func (x *Disconnected) GetRemotePeer() *wrapperspb.StringValue {
	if x != nil {
		return x.RemotePeer
	}
	return nil
}

func (x *Disconnected) GetRemoteMaddrs() *wrapperspb.StringValue {
	if x != nil {
		return x.RemoteMaddrs
	}
	return nil
}

func (x *Disconnected) GetAgentVersion() *wrapperspb.StringValue {
	if x != nil {
		return x.AgentVersion
	}
	return nil
}

func (x *Disconnected) GetDirection() *wrapperspb.StringValue {
	if x != nil {
		return x.Direction
	}
	return nil
}

func (x *Disconnected) GetOpened() *timestamppb.Timestamp {
	if x != nil {
		return x.Opened
	}
	return nil
}

// Deprecated: Marked as deprecated in pkg/proto/libp2p/trace.proto.
func (x *Disconnected) GetTransient() *wrapperspb.BoolValue {
	if x != nil {
		return x.Transient
	}
	return nil
}

func (x *Disconnected) GetLimited() *wrapperspb.BoolValue {
	if x != nil {
		return x.Limited
	}
	return nil
}

type HandleStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerId     *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=peer_id,proto3" json:"peer_id,omitempty"`
	ProtocolId *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=protocol_id,proto3" json:"protocol_id,omitempty"`
	Error      *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	Latency    *wrapperspb.FloatValue  `protobuf:"bytes,4,opt,name=latency,proto3" json:"latency,omitempty"`
	Request    *Status                 `protobuf:"bytes,5,opt,name=request,proto3" json:"request,omitempty"`
	Response   *Status                 `protobuf:"bytes,6,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *HandleStatus) Reset() {
	*x = HandleStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandleStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandleStatus) ProtoMessage() {}

func (x *HandleStatus) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandleStatus.ProtoReflect.Descriptor instead.
func (*HandleStatus) Descriptor() ([]byte, []int) {
	return file_pkg_proto_libp2p_trace_proto_rawDescGZIP(), []int{16}
}

func (x *HandleStatus) GetPeerId() *wrapperspb.StringValue {
	if x != nil {
		return x.PeerId
	}
	return nil
}

func (x *HandleStatus) GetProtocolId() *wrapperspb.StringValue {
	if x != nil {
		return x.ProtocolId
	}
	return nil
}

func (x *HandleStatus) GetError() *wrapperspb.StringValue {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *HandleStatus) GetLatency() *wrapperspb.FloatValue {
	if x != nil {
		return x.Latency
	}
	return nil
}

func (x *HandleStatus) GetRequest() *Status {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *HandleStatus) GetResponse() *Status {
	if x != nil {
		return x.Response
	}
	return nil
}

type HandleMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerId     *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=peer_id,proto3" json:"peer_id,omitempty"`
	ProtocolId *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=protocol_id,proto3" json:"protocol_id,omitempty"`
	Error      *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	Latency    *wrapperspb.FloatValue  `protobuf:"bytes,4,opt,name=latency,proto3" json:"latency,omitempty"`
	Metadata   *Metadata               `protobuf:"bytes,5,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *HandleMetadata) Reset() {
	*x = HandleMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandleMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandleMetadata) ProtoMessage() {}

func (x *HandleMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandleMetadata.ProtoReflect.Descriptor instead.
func (*HandleMetadata) Descriptor() ([]byte, []int) {
	return file_pkg_proto_libp2p_trace_proto_rawDescGZIP(), []int{17}
}

func (x *HandleMetadata) GetPeerId() *wrapperspb.StringValue {
	if x != nil {
		return x.PeerId
	}
	return nil
}

func (x *HandleMetadata) GetProtocolId() *wrapperspb.StringValue {
	if x != nil {
		return x.ProtocolId
	}
	return nil
}

func (x *HandleMetadata) GetError() *wrapperspb.StringValue {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *HandleMetadata) GetLatency() *wrapperspb.FloatValue {
	if x != nil {
		return x.Latency
	}
	return nil
}

func (x *HandleMetadata) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// RPCMeta represents the RPC meta data for a peer. This is used to represent the highest level of
// the RPC meta data, and is what is used when parsing/preparing the RPC meta data.
type RPCMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Messages      []*MessageMeta          `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
	Subscriptions []*SubMeta              `protobuf:"bytes,2,rep,name=subscriptions,proto3" json:"subscriptions,omitempty"`
	Control       *ControlMeta            `protobuf:"bytes,3,opt,name=control,proto3" json:"control,omitempty"`
	PeerId        *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=peer_id,proto3" json:"peer_id,omitempty"`
}

func (x *RPCMeta) Reset() {
	*x = RPCMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RPCMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RPCMeta) ProtoMessage() {}

func (x *RPCMeta) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RPCMeta.ProtoReflect.Descriptor instead.
func (*RPCMeta) Descriptor() ([]byte, []int) {
	return file_pkg_proto_libp2p_trace_proto_rawDescGZIP(), []int{18}
}

func (x *RPCMeta) GetMessages() []*MessageMeta {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *RPCMeta) GetSubscriptions() []*SubMeta {
	if x != nil {
		return x.Subscriptions
	}
	return nil
}

func (x *RPCMeta) GetControl() *ControlMeta {
	if x != nil {
		return x.Control
	}
	return nil
}

func (x *RPCMeta) GetPeerId() *wrapperspb.StringValue {
	if x != nil {
		return x.PeerId
	}
	return nil
}

// MessageMeta represents a single message. This is used to represent the highest level of the
// RPC meta data, and is what is used when parsing/preparing the RPC meta data.
type MessageMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageId *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=message_id,proto3" json:"message_id,omitempty"`
	TopicId   *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=topic_id,proto3" json:"topic_id,omitempty"`
}

func (x *MessageMeta) Reset() {
	*x = MessageMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageMeta) ProtoMessage() {}

func (x *MessageMeta) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageMeta.ProtoReflect.Descriptor instead.
func (*MessageMeta) Descriptor() ([]byte, []int) {
	return file_pkg_proto_libp2p_trace_proto_rawDescGZIP(), []int{19}
}

func (x *MessageMeta) GetMessageId() *wrapperspb.StringValue {
	if x != nil {
		return x.MessageId
	}
	return nil
}

func (x *MessageMeta) GetTopicId() *wrapperspb.StringValue {
	if x != nil {
		return x.TopicId
	}
	return nil
}

// MessageMetaItem represents a single message. This is used to represent the lowest level of the
// RPC meta data, and is what is persisted to the store.
type MessageMetaItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RootEventId  *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=root_event_id,proto3" json:"root_event_id,omitempty"`
	PeerId       *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=peer_id,proto3" json:"peer_id,omitempty"`
	MessageId    *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=message_id,proto3" json:"message_id,omitempty"`
	TopicId      *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=topic_id,proto3" json:"topic_id,omitempty"`
	ControlIndex *wrapperspb.UInt32Value `protobuf:"bytes,5,opt,name=control_index,proto3" json:"control_index,omitempty"`
}

func (x *MessageMetaItem) Reset() {
	*x = MessageMetaItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageMetaItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageMetaItem) ProtoMessage() {}

func (x *MessageMetaItem) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageMetaItem.ProtoReflect.Descriptor instead.
func (*MessageMetaItem) Descriptor() ([]byte, []int) {
	return file_pkg_proto_libp2p_trace_proto_rawDescGZIP(), []int{20}
}

func (x *MessageMetaItem) GetRootEventId() *wrapperspb.StringValue {
	if x != nil {
		return x.RootEventId
	}
	return nil
}

func (x *MessageMetaItem) GetPeerId() *wrapperspb.StringValue {
	if x != nil {
		return x.PeerId
	}
	return nil
}

func (x *MessageMetaItem) GetMessageId() *wrapperspb.StringValue {
	if x != nil {
		return x.MessageId
	}
	return nil
}

func (x *MessageMetaItem) GetTopicId() *wrapperspb.StringValue {
	if x != nil {
		return x.TopicId
	}
	return nil
}

func (x *MessageMetaItem) GetControlIndex() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ControlIndex
	}
	return nil
}

// SubMeta represents the RPC meta data for a peer. This is used to represent the highest level of
// the RPC meta data, and is what is used when parsing/preparing the RPC meta data.
type SubMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subscribe *wrapperspb.BoolValue   `protobuf:"bytes,1,opt,name=subscribe,proto3" json:"subscribe,omitempty"`
	TopicId   *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=topic_id,proto3" json:"topic_id,omitempty"`
}

func (x *SubMeta) Reset() {
	*x = SubMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubMeta) ProtoMessage() {}

func (x *SubMeta) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubMeta.ProtoReflect.Descriptor instead.
func (*SubMeta) Descriptor() ([]byte, []int) {
	return file_pkg_proto_libp2p_trace_proto_rawDescGZIP(), []int{21}
}

func (x *SubMeta) GetSubscribe() *wrapperspb.BoolValue {
	if x != nil {
		return x.Subscribe
	}
	return nil
}

func (x *SubMeta) GetTopicId() *wrapperspb.StringValue {
	if x != nil {
		return x.TopicId
	}
	return nil
}

// SubMetaItem represents a single subscription. This is used to represent the lowest level of the
// RPC meta data, and is what is persisted to the store.
type SubMetaItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RootEventId  *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=root_event_id,proto3" json:"root_event_id,omitempty"`
	PeerId       *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=peer_id,proto3" json:"peer_id,omitempty"`
	TopicId      *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=topic_id,proto3" json:"topic_id,omitempty"`
	Subscribe    *wrapperspb.BoolValue   `protobuf:"bytes,4,opt,name=subscribe,proto3" json:"subscribe,omitempty"`
	ControlIndex *wrapperspb.UInt32Value `protobuf:"bytes,5,opt,name=control_index,proto3" json:"control_index,omitempty"`
}

func (x *SubMetaItem) Reset() {
	*x = SubMetaItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubMetaItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubMetaItem) ProtoMessage() {}

func (x *SubMetaItem) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubMetaItem.ProtoReflect.Descriptor instead.
func (*SubMetaItem) Descriptor() ([]byte, []int) {
	return file_pkg_proto_libp2p_trace_proto_rawDescGZIP(), []int{22}
}

func (x *SubMetaItem) GetRootEventId() *wrapperspb.StringValue {
	if x != nil {
		return x.RootEventId
	}
	return nil
}

func (x *SubMetaItem) GetPeerId() *wrapperspb.StringValue {
	if x != nil {
		return x.PeerId
	}
	return nil
}

func (x *SubMetaItem) GetTopicId() *wrapperspb.StringValue {
	if x != nil {
		return x.TopicId
	}
	return nil
}

func (x *SubMetaItem) GetSubscribe() *wrapperspb.BoolValue {
	if x != nil {
		return x.Subscribe
	}
	return nil
}

func (x *SubMetaItem) GetControlIndex() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ControlIndex
	}
	return nil
}

type ControlMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ihave     []*ControlIHaveMeta     `protobuf:"bytes,1,rep,name=ihave,proto3" json:"ihave,omitempty"`
	Iwant     []*ControlIWantMeta     `protobuf:"bytes,2,rep,name=iwant,proto3" json:"iwant,omitempty"`
	Graft     []*ControlGraftMeta     `protobuf:"bytes,3,rep,name=graft,proto3" json:"graft,omitempty"`
	Prune     []*ControlPruneMeta     `protobuf:"bytes,4,rep,name=prune,proto3" json:"prune,omitempty"`
	Idontwant []*ControlIDontWantMeta `protobuf:"bytes,5,rep,name=idontwant,proto3" json:"idontwant,omitempty"`
}

func (x *ControlMeta) Reset() {
	*x = ControlMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControlMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlMeta) ProtoMessage() {}

func (x *ControlMeta) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlMeta.ProtoReflect.Descriptor instead.
func (*ControlMeta) Descriptor() ([]byte, []int) {
	return file_pkg_proto_libp2p_trace_proto_rawDescGZIP(), []int{23}
}

func (x *ControlMeta) GetIhave() []*ControlIHaveMeta {
	if x != nil {
		return x.Ihave
	}
	return nil
}

func (x *ControlMeta) GetIwant() []*ControlIWantMeta {
	if x != nil {
		return x.Iwant
	}
	return nil
}

func (x *ControlMeta) GetGraft() []*ControlGraftMeta {
	if x != nil {
		return x.Graft
	}
	return nil
}

func (x *ControlMeta) GetPrune() []*ControlPruneMeta {
	if x != nil {
		return x.Prune
	}
	return nil
}

func (x *ControlMeta) GetIdontwant() []*ControlIDontWantMeta {
	if x != nil {
		return x.Idontwant
	}
	return nil
}

// ControlIHaveMeta represents a single topic and its message IDs. This is used to represent the
// highest level of the control message, and is what is used when parsing/preparing the control
// messages.
type ControlIHaveMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TopicId    *wrapperspb.StringValue   `protobuf:"bytes,1,opt,name=topic_id,proto3" json:"topic_id,omitempty"`
	MessageIds []*wrapperspb.StringValue `protobuf:"bytes,2,rep,name=message_ids,proto3" json:"message_ids,omitempty"`
}

func (x *ControlIHaveMeta) Reset() {
	*x = ControlIHaveMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControlIHaveMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlIHaveMeta) ProtoMessage() {}

func (x *ControlIHaveMeta) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlIHaveMeta.ProtoReflect.Descriptor instead.
func (*ControlIHaveMeta) Descriptor() ([]byte, []int) {
	return file_pkg_proto_libp2p_trace_proto_rawDescGZIP(), []int{24}
}

func (x *ControlIHaveMeta) GetTopicId() *wrapperspb.StringValue {
	if x != nil {
		return x.TopicId
	}
	return nil
}

func (x *ControlIHaveMeta) GetMessageIds() []*wrapperspb.StringValue {
	if x != nil {
		return x.MessageIds
	}
	return nil
}

// ControlIHaveMetaItem represents a single message ID for a topic. This is used to represent the
// lowest level of the control message, and is what is persisted to the store.
type ControlIHaveMetaItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RootEventId  *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=root_event_id,proto3" json:"root_event_id,omitempty"`
	PeerId       *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=peer_id,proto3" json:"peer_id,omitempty"`
	MessageId    *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=message_id,proto3" json:"message_id,omitempty"`
	Topic        *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=topic,proto3" json:"topic,omitempty"`
	MessageIndex *wrapperspb.UInt32Value `protobuf:"bytes,5,opt,name=message_index,proto3" json:"message_index,omitempty"`
	ControlIndex *wrapperspb.UInt32Value `protobuf:"bytes,6,opt,name=control_index,proto3" json:"control_index,omitempty"`
}

func (x *ControlIHaveMetaItem) Reset() {
	*x = ControlIHaveMetaItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControlIHaveMetaItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlIHaveMetaItem) ProtoMessage() {}

func (x *ControlIHaveMetaItem) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlIHaveMetaItem.ProtoReflect.Descriptor instead.
func (*ControlIHaveMetaItem) Descriptor() ([]byte, []int) {
	return file_pkg_proto_libp2p_trace_proto_rawDescGZIP(), []int{25}
}

func (x *ControlIHaveMetaItem) GetRootEventId() *wrapperspb.StringValue {
	if x != nil {
		return x.RootEventId
	}
	return nil
}

func (x *ControlIHaveMetaItem) GetPeerId() *wrapperspb.StringValue {
	if x != nil {
		return x.PeerId
	}
	return nil
}

func (x *ControlIHaveMetaItem) GetMessageId() *wrapperspb.StringValue {
	if x != nil {
		return x.MessageId
	}
	return nil
}

func (x *ControlIHaveMetaItem) GetTopic() *wrapperspb.StringValue {
	if x != nil {
		return x.Topic
	}
	return nil
}

func (x *ControlIHaveMetaItem) GetMessageIndex() *wrapperspb.UInt32Value {
	if x != nil {
		return x.MessageIndex
	}
	return nil
}

func (x *ControlIHaveMetaItem) GetControlIndex() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ControlIndex
	}
	return nil
}

// ControlIWantMeta represents a single message ID. This is used to represent the highest level of
// the control message, and is what is used when parsing/preparing the control messages.
type ControlIWantMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageIds []*wrapperspb.StringValue `protobuf:"bytes,2,rep,name=message_ids,proto3" json:"message_ids,omitempty"`
}

func (x *ControlIWantMeta) Reset() {
	*x = ControlIWantMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControlIWantMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlIWantMeta) ProtoMessage() {}

func (x *ControlIWantMeta) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlIWantMeta.ProtoReflect.Descriptor instead.
func (*ControlIWantMeta) Descriptor() ([]byte, []int) {
	return file_pkg_proto_libp2p_trace_proto_rawDescGZIP(), []int{26}
}

func (x *ControlIWantMeta) GetMessageIds() []*wrapperspb.StringValue {
	if x != nil {
		return x.MessageIds
	}
	return nil
}

// ControlIWantMetaItem represents a single message ID. This is used to represent the lowest level
// of the control message, and is what is persisted to the store.
type ControlIWantMetaItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RootEventId  *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=root_event_id,proto3" json:"root_event_id,omitempty"`
	PeerId       *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=peer_id,proto3" json:"peer_id,omitempty"`
	MessageId    *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=message_id,proto3" json:"message_id,omitempty"`
	MessageIndex *wrapperspb.UInt32Value `protobuf:"bytes,4,opt,name=message_index,proto3" json:"message_index,omitempty"`
	ControlIndex *wrapperspb.UInt32Value `protobuf:"bytes,5,opt,name=control_index,proto3" json:"control_index,omitempty"`
}

func (x *ControlIWantMetaItem) Reset() {
	*x = ControlIWantMetaItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControlIWantMetaItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlIWantMetaItem) ProtoMessage() {}

func (x *ControlIWantMetaItem) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlIWantMetaItem.ProtoReflect.Descriptor instead.
func (*ControlIWantMetaItem) Descriptor() ([]byte, []int) {
	return file_pkg_proto_libp2p_trace_proto_rawDescGZIP(), []int{27}
}

func (x *ControlIWantMetaItem) GetRootEventId() *wrapperspb.StringValue {
	if x != nil {
		return x.RootEventId
	}
	return nil
}

func (x *ControlIWantMetaItem) GetPeerId() *wrapperspb.StringValue {
	if x != nil {
		return x.PeerId
	}
	return nil
}

func (x *ControlIWantMetaItem) GetMessageId() *wrapperspb.StringValue {
	if x != nil {
		return x.MessageId
	}
	return nil
}

func (x *ControlIWantMetaItem) GetMessageIndex() *wrapperspb.UInt32Value {
	if x != nil {
		return x.MessageIndex
	}
	return nil
}

func (x *ControlIWantMetaItem) GetControlIndex() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ControlIndex
	}
	return nil
}

// ControlGraftMeta represents a single topic. This is used to represent the highest level of the
// control message, and is what is used when parsing/preparing the control messages.
type ControlGraftMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TopicId *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=topic_id,proto3" json:"topic_id,omitempty"`
}

func (x *ControlGraftMeta) Reset() {
	*x = ControlGraftMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControlGraftMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlGraftMeta) ProtoMessage() {}

func (x *ControlGraftMeta) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlGraftMeta.ProtoReflect.Descriptor instead.
func (*ControlGraftMeta) Descriptor() ([]byte, []int) {
	return file_pkg_proto_libp2p_trace_proto_rawDescGZIP(), []int{28}
}

func (x *ControlGraftMeta) GetTopicId() *wrapperspb.StringValue {
	if x != nil {
		return x.TopicId
	}
	return nil
}

// ControlGraftMetaItem represents a single topic. This is used to represent the lowest level of
// the control message, and is what is persisted to the store.
type ControlGraftMetaItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RootEventId  *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=root_event_id,proto3" json:"root_event_id,omitempty"`
	PeerId       *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=peer_id,proto3" json:"peer_id,omitempty"`
	Topic        *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=topic,proto3" json:"topic,omitempty"`
	ControlIndex *wrapperspb.UInt32Value `protobuf:"bytes,4,opt,name=control_index,proto3" json:"control_index,omitempty"`
}

func (x *ControlGraftMetaItem) Reset() {
	*x = ControlGraftMetaItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControlGraftMetaItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlGraftMetaItem) ProtoMessage() {}

func (x *ControlGraftMetaItem) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlGraftMetaItem.ProtoReflect.Descriptor instead.
func (*ControlGraftMetaItem) Descriptor() ([]byte, []int) {
	return file_pkg_proto_libp2p_trace_proto_rawDescGZIP(), []int{29}
}

func (x *ControlGraftMetaItem) GetRootEventId() *wrapperspb.StringValue {
	if x != nil {
		return x.RootEventId
	}
	return nil
}

func (x *ControlGraftMetaItem) GetPeerId() *wrapperspb.StringValue {
	if x != nil {
		return x.PeerId
	}
	return nil
}

func (x *ControlGraftMetaItem) GetTopic() *wrapperspb.StringValue {
	if x != nil {
		return x.Topic
	}
	return nil
}

func (x *ControlGraftMetaItem) GetControlIndex() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ControlIndex
	}
	return nil
}

// ControlPruneMeta represents a single topic and its peer IDs. This is used to represent the
// highest level of the control message, and is what is used when parsing/preparing the control
// messages.
type ControlPruneMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TopicId *wrapperspb.StringValue   `protobuf:"bytes,1,opt,name=topic_id,proto3" json:"topic_id,omitempty"`
	PeerIds []*wrapperspb.StringValue `protobuf:"bytes,2,rep,name=peer_ids,proto3" json:"peer_ids,omitempty"`
}

func (x *ControlPruneMeta) Reset() {
	*x = ControlPruneMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControlPruneMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlPruneMeta) ProtoMessage() {}

func (x *ControlPruneMeta) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlPruneMeta.ProtoReflect.Descriptor instead.
func (*ControlPruneMeta) Descriptor() ([]byte, []int) {
	return file_pkg_proto_libp2p_trace_proto_rawDescGZIP(), []int{30}
}

func (x *ControlPruneMeta) GetTopicId() *wrapperspb.StringValue {
	if x != nil {
		return x.TopicId
	}
	return nil
}

func (x *ControlPruneMeta) GetPeerIds() []*wrapperspb.StringValue {
	if x != nil {
		return x.PeerIds
	}
	return nil
}

// ControlPruneMetaItem represents a single peer ID for a topic. This is used to represent the
// lowest level of the control message, and is what is persisted to the store.
type ControlPruneMetaItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RootEventId  *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=root_event_id,proto3" json:"root_event_id,omitempty"`
	PeerId       *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=peer_id,proto3" json:"peer_id,omitempty"`
	GraftPeerId  *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=graft_peer_id,proto3" json:"graft_peer_id,omitempty"`
	Topic        *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=topic,proto3" json:"topic,omitempty"`
	ControlIndex *wrapperspb.UInt32Value `protobuf:"bytes,5,opt,name=control_index,proto3" json:"control_index,omitempty"`
	PeerIndex    *wrapperspb.UInt32Value `protobuf:"bytes,6,opt,name=peer_index,proto3" json:"peer_index,omitempty"`
}

func (x *ControlPruneMetaItem) Reset() {
	*x = ControlPruneMetaItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControlPruneMetaItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlPruneMetaItem) ProtoMessage() {}

func (x *ControlPruneMetaItem) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlPruneMetaItem.ProtoReflect.Descriptor instead.
func (*ControlPruneMetaItem) Descriptor() ([]byte, []int) {
	return file_pkg_proto_libp2p_trace_proto_rawDescGZIP(), []int{31}
}

func (x *ControlPruneMetaItem) GetRootEventId() *wrapperspb.StringValue {
	if x != nil {
		return x.RootEventId
	}
	return nil
}

func (x *ControlPruneMetaItem) GetPeerId() *wrapperspb.StringValue {
	if x != nil {
		return x.PeerId
	}
	return nil
}

func (x *ControlPruneMetaItem) GetGraftPeerId() *wrapperspb.StringValue {
	if x != nil {
		return x.GraftPeerId
	}
	return nil
}

func (x *ControlPruneMetaItem) GetTopic() *wrapperspb.StringValue {
	if x != nil {
		return x.Topic
	}
	return nil
}

func (x *ControlPruneMetaItem) GetControlIndex() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ControlIndex
	}
	return nil
}

func (x *ControlPruneMetaItem) GetPeerIndex() *wrapperspb.UInt32Value {
	if x != nil {
		return x.PeerIndex
	}
	return nil
}

// ControlIDontWantMeta represents a single message ID. This is used to represent the highest level
// of the control message, and is what is used when parsing/preparing the control messages.
type ControlIDontWantMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageIds []*wrapperspb.StringValue `protobuf:"bytes,1,rep,name=message_ids,proto3" json:"message_ids,omitempty"`
}

func (x *ControlIDontWantMeta) Reset() {
	*x = ControlIDontWantMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControlIDontWantMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlIDontWantMeta) ProtoMessage() {}

func (x *ControlIDontWantMeta) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlIDontWantMeta.ProtoReflect.Descriptor instead.
func (*ControlIDontWantMeta) Descriptor() ([]byte, []int) {
	return file_pkg_proto_libp2p_trace_proto_rawDescGZIP(), []int{32}
}

func (x *ControlIDontWantMeta) GetMessageIds() []*wrapperspb.StringValue {
	if x != nil {
		return x.MessageIds
	}
	return nil
}

// ControlIDontWantMetaItem represents a single message ID. This is used to represent the lowest
// level of the control message, and is what is persisted to the store.
type ControlIDontWantMetaItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RootEventId  *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=root_event_id,proto3" json:"root_event_id,omitempty"`
	PeerId       *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=peer_id,proto3" json:"peer_id,omitempty"`
	MessageId    *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=message_id,proto3" json:"message_id,omitempty"`
	MessageIndex *wrapperspb.UInt32Value `protobuf:"bytes,4,opt,name=message_index,proto3" json:"message_index,omitempty"`
	ControlIndex *wrapperspb.UInt32Value `protobuf:"bytes,5,opt,name=control_index,proto3" json:"control_index,omitempty"`
}

func (x *ControlIDontWantMetaItem) Reset() {
	*x = ControlIDontWantMetaItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControlIDontWantMetaItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlIDontWantMetaItem) ProtoMessage() {}

func (x *ControlIDontWantMetaItem) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_libp2p_trace_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlIDontWantMetaItem.ProtoReflect.Descriptor instead.
func (*ControlIDontWantMetaItem) Descriptor() ([]byte, []int) {
	return file_pkg_proto_libp2p_trace_proto_rawDescGZIP(), []int{33}
}

func (x *ControlIDontWantMetaItem) GetRootEventId() *wrapperspb.StringValue {
	if x != nil {
		return x.RootEventId
	}
	return nil
}

func (x *ControlIDontWantMetaItem) GetPeerId() *wrapperspb.StringValue {
	if x != nil {
		return x.PeerId
	}
	return nil
}

func (x *ControlIDontWantMetaItem) GetMessageId() *wrapperspb.StringValue {
	if x != nil {
		return x.MessageId
	}
	return nil
}

func (x *ControlIDontWantMetaItem) GetMessageIndex() *wrapperspb.UInt32Value {
	if x != nil {
		return x.MessageIndex
	}
	return nil
}

func (x *ControlIDontWantMetaItem) GetControlIndex() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ControlIndex
	}
	return nil
}

var File_pkg_proto_libp2p_trace_proto protoreflect.FileDescriptor

var file_pkg_proto_libp2p_trace_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6c, 0x69, 0x62, 0x70,
	0x32, 0x70, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b,
	0x78, 0x61, 0x74, 0x75, 0x2e, 0x6c, 0x69, 0x62, 0x70, 0x32, 0x70, 0x1a, 0x1a, 0x70, 0x6b, 0x67,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6c, 0x69, 0x62, 0x70, 0x32, 0x70, 0x2f, 0x65, 0x74,
	0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x7b, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x50,
	0x65, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x22, 0x44, 0x0a, 0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50,
	0x65, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x22, 0x6b, 0x0a, 0x07, 0x52,
	0x65, 0x63, 0x76, 0x52, 0x50, 0x43, 0x12, 0x36, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x28,
	0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x78,
	0x61, 0x74, 0x75, 0x2e, 0x6c, 0x69, 0x62, 0x70, 0x32, 0x70, 0x2e, 0x52, 0x50, 0x43, 0x4d, 0x65,
	0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x22, 0x6b, 0x0a, 0x07, 0x53, 0x65, 0x6e, 0x64,
	0x52, 0x50, 0x43, 0x12, 0x36, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x04, 0x6d,
	0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x78, 0x61, 0x74, 0x75,
	0x2e, 0x6c, 0x69, 0x62, 0x70, 0x32, 0x70, 0x2e, 0x52, 0x50, 0x43, 0x4d, 0x65, 0x74, 0x61, 0x52,
	0x04, 0x6d, 0x65, 0x74, 0x61, 0x22, 0x6b, 0x0a, 0x07, 0x44, 0x72, 0x6f, 0x70, 0x52, 0x50, 0x43,
	0x12, 0x36, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x6c, 0x69,
	0x62, 0x70, 0x32, 0x70, 0x2e, 0x52, 0x50, 0x43, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x22, 0x3a, 0x0a, 0x04, 0x4a, 0x6f, 0x69, 0x6e, 0x12, 0x32, 0x0a, 0x05, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x22, 0x3b,
	0x0a, 0x05, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x22, 0x73, 0x0a, 0x05, 0x47,
	0x72, 0x61, 0x66, 0x74, 0x12, 0x36, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x05,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63,
	0x22, 0x73, 0x0a, 0x05, 0x50, 0x72, 0x75, 0x6e, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x70, 0x65, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x12, 0x32, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x22, 0x7a, 0x0a, 0x0e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x6d, 0x73, 0x67, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x12, 0x32, 0x0a,
	0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x22, 0x91, 0x03, 0x0a, 0x0d, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x06, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x07, 0x70, 0x65, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x12, 0x32, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x34, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x05, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0x38, 0x0a,
	0x08, 0x6d, 0x73, 0x67, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6d,
	0x73, 0x67, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x3c, 0x0a, 0x0a, 0x73, 0x65, 0x71, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x73, 0x65, 0x71, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xde, 0x02, 0x0a, 0x10, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x6d, 0x73,
	0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64,
	0x12, 0x36, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x30, 0x0a, 0x05,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0x38,
	0x0a, 0x08, 0x6d, 0x73, 0x67, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08,
	0x6d, 0x73, 0x67, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x3c, 0x0a, 0x0a, 0x73, 0x65, 0x71, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x73, 0x65, 0x71, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xdc, 0x02, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x6d, 0x73, 0x67,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x12,
	0x36, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07,
	0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x30, 0x0a, 0x05, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0x38, 0x0a,
	0x08, 0x6d, 0x73, 0x67, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6d,
	0x73, 0x67, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x3c, 0x0a, 0x0a, 0x73, 0x65, 0x71, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x73, 0x65, 0x71, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x4c, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x36, 0x0a, 0x07, 0x70,
	0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x70, 0x65, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x22, 0xb7, 0x03, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x12, 0x3e, 0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x70, 0x65, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x70, 0x65, 0x65,
	0x72, 0x12, 0x42, 0x0a, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x64, 0x64,
	0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6d,
	0x61, 0x64, 0x64, 0x72, 0x73, 0x12, 0x42, 0x0a, 0x0d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x09, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x09, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x07, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x22, 0xba, 0x03,
	0x0a, 0x0c, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x3e,
	0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0b, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x12, 0x42,
	0x0a, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x64, 0x64, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x64, 0x64,
	0x72, 0x73, 0x12, 0x42, 0x0a, 0x0d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06,
	0x6f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69,
	0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x69, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x07, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x07, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x22, 0xd1, 0x02, 0x0a, 0x0c, 0x48,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x36, 0x0a, 0x07, 0x70,
	0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x70, 0x65, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x12, 0x3e, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x5f, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x35, 0x0a, 0x07, 0x6c, 0x61, 0x74, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x2d,
	0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x6c, 0x69, 0x62, 0x70, 0x32, 0x70, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a,
	0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x6c, 0x69, 0x62, 0x70, 0x32, 0x70, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa6,
	0x02, 0x0a, 0x0e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x36, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x3e, 0x0a, 0x0b, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x35, 0x0a,
	0x07, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x6c, 0x61, 0x74,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x31, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x6c, 0x69,
	0x62, 0x70, 0x32, 0x70, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xe7, 0x01, 0x0a, 0x07, 0x52, 0x50, 0x43, 0x4d,
	0x65, 0x74, 0x61, 0x12, 0x34, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x6c, 0x69, 0x62,
	0x70, 0x32, 0x70, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x52,
	0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x0d, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x6c, 0x69, 0x62, 0x70, 0x32, 0x70, 0x2e, 0x53,
	0x75, 0x62, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x32, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x6c, 0x69,
	0x62, 0x70, 0x32, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x65, 0x74, 0x61,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x36, 0x0a, 0x07, 0x70, 0x65, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x22, 0x85, 0x01, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x12, 0x3c, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x12,
	0x38, 0x0a, 0x08, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x08, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x22, 0xc9, 0x02, 0x0a, 0x0f, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x42, 0x0a,
	0x0d, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0d, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x12, 0x36, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x0a, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x08, 0x74, 0x6f, 0x70, 0x69, 0x63,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x69,
	0x64, 0x12, 0x42, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x7d, 0x0a, 0x07, 0x53, 0x75, 0x62, 0x4d, 0x65, 0x74, 0x61,
	0x12, 0x38, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x09, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x5f, 0x69, 0x64, 0x22, 0xc1, 0x02, 0x0a, 0x0b, 0x53, 0x75, 0x62, 0x4d, 0x65, 0x74, 0x61,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x42, 0x0a, 0x0d, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x72, 0x6f, 0x6f, 0x74, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x12, 0x38, 0x0a, 0x08, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x08, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x12, 0x42, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xa2, 0x02, 0x0a, 0x0b, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x33, 0x0a, 0x05, 0x69, 0x68, 0x61, 0x76,
	0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x6c,
	0x69, 0x62, 0x70, 0x32, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x49, 0x48, 0x61,
	0x76, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x05, 0x69, 0x68, 0x61, 0x76, 0x65, 0x12, 0x33, 0x0a,
	0x05, 0x69, 0x77, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x78,
	0x61, 0x74, 0x75, 0x2e, 0x6c, 0x69, 0x62, 0x70, 0x32, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x49, 0x57, 0x61, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x05, 0x69, 0x77, 0x61,
	0x6e, 0x74, 0x12, 0x33, 0x0a, 0x05, 0x67, 0x72, 0x61, 0x66, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x6c, 0x69, 0x62, 0x70, 0x32, 0x70, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x47, 0x72, 0x61, 0x66, 0x74, 0x4d, 0x65, 0x74, 0x61,
	0x52, 0x05, 0x67, 0x72, 0x61, 0x66, 0x74, 0x12, 0x33, 0x0a, 0x05, 0x70, 0x72, 0x75, 0x6e, 0x65,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x6c, 0x69,
	0x62, 0x70, 0x32, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x72, 0x75, 0x6e,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x05, 0x70, 0x72, 0x75, 0x6e, 0x65, 0x12, 0x3f, 0x0a, 0x09,
	0x69, 0x64, 0x6f, 0x6e, 0x74, 0x77, 0x61, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x6c, 0x69, 0x62, 0x70, 0x32, 0x70, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x49, 0x44, 0x6f, 0x6e, 0x74, 0x57, 0x61, 0x6e, 0x74, 0x4d, 0x65,
	0x74, 0x61, 0x52, 0x09, 0x69, 0x64, 0x6f, 0x6e, 0x74, 0x77, 0x61, 0x6e, 0x74, 0x22, 0x8c, 0x01,
	0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x49, 0x48, 0x61, 0x76, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x12, 0x38, 0x0a, 0x08, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x08, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x12, 0x3e, 0x0a, 0x0b,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x22, 0x8c, 0x03, 0x0a,
	0x14, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x49, 0x48, 0x61, 0x76, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x42, 0x0a, 0x0d, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x72, 0x6f, 0x6f, 0x74,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x07, 0x70, 0x65, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x12, 0x3c, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x12,
	0x32, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x12, 0x42, 0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x42, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x52, 0x0a, 0x10, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x49, 0x57, 0x61, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x12,
	0x3e, 0x0a, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x22,
	0xd8, 0x02, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x49, 0x57, 0x61, 0x6e, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x42, 0x0a, 0x0d, 0x72, 0x6f, 0x6f, 0x74,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x72,
	0x6f, 0x6f, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x07,
	0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x70, 0x65, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x69, 0x64, 0x12, 0x42, 0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x42, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x4c, 0x0a, 0x10, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x47, 0x72, 0x61, 0x66, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x38,
	0x0a, 0x08, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x22, 0x8a, 0x02, 0x0a, 0x14, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x47, 0x72, 0x61, 0x66, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x42, 0x0a, 0x0d, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x32, 0x0a,
	0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x12, 0x42, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x86, 0x01, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x50, 0x72, 0x75, 0x6e, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x08, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x5f, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x08, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x22, 0x8c,
	0x03, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x72, 0x75, 0x6e, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x42, 0x0a, 0x0d, 0x72, 0x6f, 0x6f, 0x74, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x72, 0x6f,
	0x6f, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x07, 0x70,
	0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x70, 0x65, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x12, 0x42, 0x0a, 0x0d, 0x67, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x70, 0x65, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x67, 0x72, 0x61, 0x66, 0x74, 0x5f,
	0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x42, 0x0a, 0x0d, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x3c, 0x0a, 0x0a, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0a, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x56, 0x0a,
	0x14, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x49, 0x44, 0x6f, 0x6e, 0x74, 0x57, 0x61, 0x6e,
	0x74, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x3e, 0x0a, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x64, 0x73, 0x22, 0xdc, 0x02, 0x0a, 0x18, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x49, 0x44, 0x6f, 0x6e, 0x74, 0x57, 0x61, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x42, 0x0a, 0x0d, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x3c,
	0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x12, 0x42, 0x0a, 0x0d,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x42, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x2a, 0xeb, 0x03, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x10,
	0x0a, 0x0c, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x02,
	0x12, 0x0c, 0x0a, 0x08, 0x41, 0x44, 0x44, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x10, 0x03, 0x12, 0x0f,
	0x0a, 0x0b, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x10, 0x04, 0x12,
	0x0c, 0x0a, 0x08, 0x52, 0x45, 0x43, 0x56, 0x5f, 0x52, 0x50, 0x43, 0x10, 0x05, 0x12, 0x0c, 0x0a,
	0x08, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x52, 0x50, 0x43, 0x10, 0x06, 0x12, 0x08, 0x0a, 0x04, 0x4a,
	0x4f, 0x49, 0x4e, 0x10, 0x07, 0x12, 0x11, 0x0a, 0x0d, 0x48, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x08, 0x12, 0x13, 0x0a, 0x0f, 0x48, 0x41, 0x4e, 0x44,
	0x4c, 0x45, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x44, 0x41, 0x54, 0x41, 0x10, 0x09, 0x12, 0x0c, 0x0a,
	0x08, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x52, 0x50, 0x43, 0x10, 0x0a, 0x12, 0x09, 0x0a, 0x05, 0x4c,
	0x45, 0x41, 0x56, 0x45, 0x10, 0x0b, 0x12, 0x09, 0x0a, 0x05, 0x47, 0x52, 0x41, 0x46, 0x54, 0x10,
	0x0c, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x52, 0x55, 0x4e, 0x45, 0x10, 0x0d, 0x12, 0x13, 0x0a, 0x0f,
	0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10,
	0x0e, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x4d, 0x45, 0x53, 0x53,
	0x41, 0x47, 0x45, 0x10, 0x0f, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41,
	0x54, 0x45, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x10, 0x12, 0x13, 0x0a, 0x0f,
	0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10,
	0x11, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x50, 0x43, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x5f, 0x43, 0x4f,
	0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x49, 0x48, 0x41, 0x56, 0x45, 0x10, 0x12, 0x12, 0x1a, 0x0a,
	0x16, 0x52, 0x50, 0x43, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f,
	0x4c, 0x5f, 0x49, 0x57, 0x41, 0x4e, 0x54, 0x10, 0x13, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x50, 0x43,
	0x5f, 0x4d, 0x45, 0x54, 0x41, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x49, 0x44,
	0x4f, 0x4e, 0x54, 0x57, 0x41, 0x4e, 0x54, 0x10, 0x14, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x50, 0x43,
	0x5f, 0x4d, 0x45, 0x54, 0x41, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x47, 0x52,
	0x41, 0x46, 0x54, 0x10, 0x15, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x50, 0x43, 0x5f, 0x4d, 0x45, 0x54,
	0x41, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x50, 0x52, 0x55, 0x4e, 0x45, 0x10,
	0x16, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x50, 0x43, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x5f, 0x53, 0x55,
	0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x17, 0x12, 0x14, 0x0a, 0x10,
	0x52, 0x50, 0x43, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45,
	0x10, 0x18, 0x42, 0x2e, 0x5a, 0x2c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x65, 0x74, 0x68, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x6f, 0x70, 0x73, 0x2f, 0x78, 0x61, 0x74,
	0x75, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6c, 0x69, 0x62, 0x70,
	0x32, 0x70, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pkg_proto_libp2p_trace_proto_rawDescOnce sync.Once
	file_pkg_proto_libp2p_trace_proto_rawDescData = file_pkg_proto_libp2p_trace_proto_rawDesc
)

func file_pkg_proto_libp2p_trace_proto_rawDescGZIP() []byte {
	file_pkg_proto_libp2p_trace_proto_rawDescOnce.Do(func() {
		file_pkg_proto_libp2p_trace_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_proto_libp2p_trace_proto_rawDescData)
	})
	return file_pkg_proto_libp2p_trace_proto_rawDescData
}

var file_pkg_proto_libp2p_trace_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_pkg_proto_libp2p_trace_proto_msgTypes = make([]protoimpl.MessageInfo, 34)
var file_pkg_proto_libp2p_trace_proto_goTypes = []any{
	(EventType)(0),                   // 0: xatu.libp2p.EventType
	(*AddPeer)(nil),                  // 1: xatu.libp2p.AddPeer
	(*RemovePeer)(nil),               // 2: xatu.libp2p.RemovePeer
	(*RecvRPC)(nil),                  // 3: xatu.libp2p.RecvRPC
	(*SendRPC)(nil),                  // 4: xatu.libp2p.SendRPC
	(*DropRPC)(nil),                  // 5: xatu.libp2p.DropRPC
	(*Join)(nil),                     // 6: xatu.libp2p.Join
	(*Leave)(nil),                    // 7: xatu.libp2p.Leave
	(*Graft)(nil),                    // 8: xatu.libp2p.Graft
	(*Prune)(nil),                    // 9: xatu.libp2p.Prune
	(*PublishMessage)(nil),           // 10: xatu.libp2p.PublishMessage
	(*RejectMessage)(nil),            // 11: xatu.libp2p.RejectMessage
	(*DuplicateMessage)(nil),         // 12: xatu.libp2p.DuplicateMessage
	(*DeliverMessage)(nil),           // 13: xatu.libp2p.DeliverMessage
	(*TraceEventMetadata)(nil),       // 14: xatu.libp2p.TraceEventMetadata
	(*Connected)(nil),                // 15: xatu.libp2p.Connected
	(*Disconnected)(nil),             // 16: xatu.libp2p.Disconnected
	(*HandleStatus)(nil),             // 17: xatu.libp2p.HandleStatus
	(*HandleMetadata)(nil),           // 18: xatu.libp2p.HandleMetadata
	(*RPCMeta)(nil),                  // 19: xatu.libp2p.RPCMeta
	(*MessageMeta)(nil),              // 20: xatu.libp2p.MessageMeta
	(*MessageMetaItem)(nil),          // 21: xatu.libp2p.MessageMetaItem
	(*SubMeta)(nil),                  // 22: xatu.libp2p.SubMeta
	(*SubMetaItem)(nil),              // 23: xatu.libp2p.SubMetaItem
	(*ControlMeta)(nil),              // 24: xatu.libp2p.ControlMeta
	(*ControlIHaveMeta)(nil),         // 25: xatu.libp2p.ControlIHaveMeta
	(*ControlIHaveMetaItem)(nil),     // 26: xatu.libp2p.ControlIHaveMetaItem
	(*ControlIWantMeta)(nil),         // 27: xatu.libp2p.ControlIWantMeta
	(*ControlIWantMetaItem)(nil),     // 28: xatu.libp2p.ControlIWantMetaItem
	(*ControlGraftMeta)(nil),         // 29: xatu.libp2p.ControlGraftMeta
	(*ControlGraftMetaItem)(nil),     // 30: xatu.libp2p.ControlGraftMetaItem
	(*ControlPruneMeta)(nil),         // 31: xatu.libp2p.ControlPruneMeta
	(*ControlPruneMetaItem)(nil),     // 32: xatu.libp2p.ControlPruneMetaItem
	(*ControlIDontWantMeta)(nil),     // 33: xatu.libp2p.ControlIDontWantMeta
	(*ControlIDontWantMetaItem)(nil), // 34: xatu.libp2p.ControlIDontWantMetaItem
	(*wrapperspb.StringValue)(nil),   // 35: google.protobuf.StringValue
	(*wrapperspb.BoolValue)(nil),     // 36: google.protobuf.BoolValue
	(*wrapperspb.UInt32Value)(nil),   // 37: google.protobuf.UInt32Value
	(*wrapperspb.UInt64Value)(nil),   // 38: google.protobuf.UInt64Value
	(*timestamppb.Timestamp)(nil),    // 39: google.protobuf.Timestamp
	(*wrapperspb.FloatValue)(nil),    // 40: google.protobuf.FloatValue
	(*Status)(nil),                   // 41: xatu.libp2p.Status
	(*Metadata)(nil),                 // 42: xatu.libp2p.Metadata
}
var file_pkg_proto_libp2p_trace_proto_depIdxs = []int32{
	35,  // 0: xatu.libp2p.AddPeer.peer_id:type_name -> google.protobuf.StringValue
	35,  // 1: xatu.libp2p.AddPeer.protocol:type_name -> google.protobuf.StringValue
	35,  // 2: xatu.libp2p.RemovePeer.peer_id:type_name -> google.protobuf.StringValue
	35,  // 3: xatu.libp2p.RecvRPC.peer_id:type_name -> google.protobuf.StringValue
	19,  // 4: xatu.libp2p.RecvRPC.meta:type_name -> xatu.libp2p.RPCMeta
	35,  // 5: xatu.libp2p.SendRPC.peer_id:type_name -> google.protobuf.StringValue
	19,  // 6: xatu.libp2p.SendRPC.meta:type_name -> xatu.libp2p.RPCMeta
	35,  // 7: xatu.libp2p.DropRPC.peer_id:type_name -> google.protobuf.StringValue
	19,  // 8: xatu.libp2p.DropRPC.meta:type_name -> xatu.libp2p.RPCMeta
	35,  // 9: xatu.libp2p.Join.topic:type_name -> google.protobuf.StringValue
	35,  // 10: xatu.libp2p.Leave.topic:type_name -> google.protobuf.StringValue
	35,  // 11: xatu.libp2p.Graft.peer_id:type_name -> google.protobuf.StringValue
	35,  // 12: xatu.libp2p.Graft.topic:type_name -> google.protobuf.StringValue
	35,  // 13: xatu.libp2p.Prune.peer_id:type_name -> google.protobuf.StringValue
	35,  // 14: xatu.libp2p.Prune.topic:type_name -> google.protobuf.StringValue
	35,  // 15: xatu.libp2p.PublishMessage.msg_id:type_name -> google.protobuf.StringValue
	35,  // 16: xatu.libp2p.PublishMessage.topic:type_name -> google.protobuf.StringValue
	35,  // 17: xatu.libp2p.RejectMessage.msg_id:type_name -> google.protobuf.StringValue
	35,  // 18: xatu.libp2p.RejectMessage.peer_id:type_name -> google.protobuf.StringValue
	35,  // 19: xatu.libp2p.RejectMessage.topic:type_name -> google.protobuf.StringValue
	35,  // 20: xatu.libp2p.RejectMessage.reason:type_name -> google.protobuf.StringValue
	36,  // 21: xatu.libp2p.RejectMessage.local:type_name -> google.protobuf.BoolValue
	37,  // 22: xatu.libp2p.RejectMessage.msg_size:type_name -> google.protobuf.UInt32Value
	38,  // 23: xatu.libp2p.RejectMessage.seq_number:type_name -> google.protobuf.UInt64Value
	35,  // 24: xatu.libp2p.DuplicateMessage.msg_id:type_name -> google.protobuf.StringValue
	35,  // 25: xatu.libp2p.DuplicateMessage.peer_id:type_name -> google.protobuf.StringValue
	35,  // 26: xatu.libp2p.DuplicateMessage.topic:type_name -> google.protobuf.StringValue
	36,  // 27: xatu.libp2p.DuplicateMessage.local:type_name -> google.protobuf.BoolValue
	37,  // 28: xatu.libp2p.DuplicateMessage.msg_size:type_name -> google.protobuf.UInt32Value
	38,  // 29: xatu.libp2p.DuplicateMessage.seq_number:type_name -> google.protobuf.UInt64Value
	35,  // 30: xatu.libp2p.DeliverMessage.msg_id:type_name -> google.protobuf.StringValue
	35,  // 31: xatu.libp2p.DeliverMessage.peer_id:type_name -> google.protobuf.StringValue
	35,  // 32: xatu.libp2p.DeliverMessage.topic:type_name -> google.protobuf.StringValue
	36,  // 33: xatu.libp2p.DeliverMessage.local:type_name -> google.protobuf.BoolValue
	37,  // 34: xatu.libp2p.DeliverMessage.msg_size:type_name -> google.protobuf.UInt32Value
	38,  // 35: xatu.libp2p.DeliverMessage.seq_number:type_name -> google.protobuf.UInt64Value
	35,  // 36: xatu.libp2p.TraceEventMetadata.peer_id:type_name -> google.protobuf.StringValue
	35,  // 37: xatu.libp2p.Connected.remote_peer:type_name -> google.protobuf.StringValue
	35,  // 38: xatu.libp2p.Connected.remote_maddrs:type_name -> google.protobuf.StringValue
	35,  // 39: xatu.libp2p.Connected.agent_version:type_name -> google.protobuf.StringValue
	35,  // 40: xatu.libp2p.Connected.direction:type_name -> google.protobuf.StringValue
	39,  // 41: xatu.libp2p.Connected.opened:type_name -> google.protobuf.Timestamp
	36,  // 42: xatu.libp2p.Connected.transient:type_name -> google.protobuf.BoolValue
	36,  // 43: xatu.libp2p.Connected.limited:type_name -> google.protobuf.BoolValue
	35,  // 44: xatu.libp2p.Disconnected.remote_peer:type_name -> google.protobuf.StringValue
	35,  // 45: xatu.libp2p.Disconnected.remote_maddrs:type_name -> google.protobuf.StringValue
	35,  // 46: xatu.libp2p.Disconnected.agent_version:type_name -> google.protobuf.StringValue
	35,  // 47: xatu.libp2p.Disconnected.direction:type_name -> google.protobuf.StringValue
	39,  // 48: xatu.libp2p.Disconnected.opened:type_name -> google.protobuf.Timestamp
	36,  // 49: xatu.libp2p.Disconnected.transient:type_name -> google.protobuf.BoolValue
	36,  // 50: xatu.libp2p.Disconnected.limited:type_name -> google.protobuf.BoolValue
	35,  // 51: xatu.libp2p.HandleStatus.peer_id:type_name -> google.protobuf.StringValue
	35,  // 52: xatu.libp2p.HandleStatus.protocol_id:type_name -> google.protobuf.StringValue
	35,  // 53: xatu.libp2p.HandleStatus.error:type_name -> google.protobuf.StringValue
	40,  // 54: xatu.libp2p.HandleStatus.latency:type_name -> google.protobuf.FloatValue
	41,  // 55: xatu.libp2p.HandleStatus.request:type_name -> xatu.libp2p.Status
	41,  // 56: xatu.libp2p.HandleStatus.response:type_name -> xatu.libp2p.Status
	35,  // 57: xatu.libp2p.HandleMetadata.peer_id:type_name -> google.protobuf.StringValue
	35,  // 58: xatu.libp2p.HandleMetadata.protocol_id:type_name -> google.protobuf.StringValue
	35,  // 59: xatu.libp2p.HandleMetadata.error:type_name -> google.protobuf.StringValue
	40,  // 60: xatu.libp2p.HandleMetadata.latency:type_name -> google.protobuf.FloatValue
	42,  // 61: xatu.libp2p.HandleMetadata.metadata:type_name -> xatu.libp2p.Metadata
	20,  // 62: xatu.libp2p.RPCMeta.messages:type_name -> xatu.libp2p.MessageMeta
	22,  // 63: xatu.libp2p.RPCMeta.subscriptions:type_name -> xatu.libp2p.SubMeta
	24,  // 64: xatu.libp2p.RPCMeta.control:type_name -> xatu.libp2p.ControlMeta
	35,  // 65: xatu.libp2p.RPCMeta.peer_id:type_name -> google.protobuf.StringValue
	35,  // 66: xatu.libp2p.MessageMeta.message_id:type_name -> google.protobuf.StringValue
	35,  // 67: xatu.libp2p.MessageMeta.topic_id:type_name -> google.protobuf.StringValue
	35,  // 68: xatu.libp2p.MessageMetaItem.root_event_id:type_name -> google.protobuf.StringValue
	35,  // 69: xatu.libp2p.MessageMetaItem.peer_id:type_name -> google.protobuf.StringValue
	35,  // 70: xatu.libp2p.MessageMetaItem.message_id:type_name -> google.protobuf.StringValue
	35,  // 71: xatu.libp2p.MessageMetaItem.topic_id:type_name -> google.protobuf.StringValue
	37,  // 72: xatu.libp2p.MessageMetaItem.control_index:type_name -> google.protobuf.UInt32Value
	36,  // 73: xatu.libp2p.SubMeta.subscribe:type_name -> google.protobuf.BoolValue
	35,  // 74: xatu.libp2p.SubMeta.topic_id:type_name -> google.protobuf.StringValue
	35,  // 75: xatu.libp2p.SubMetaItem.root_event_id:type_name -> google.protobuf.StringValue
	35,  // 76: xatu.libp2p.SubMetaItem.peer_id:type_name -> google.protobuf.StringValue
	35,  // 77: xatu.libp2p.SubMetaItem.topic_id:type_name -> google.protobuf.StringValue
	36,  // 78: xatu.libp2p.SubMetaItem.subscribe:type_name -> google.protobuf.BoolValue
	37,  // 79: xatu.libp2p.SubMetaItem.control_index:type_name -> google.protobuf.UInt32Value
	25,  // 80: xatu.libp2p.ControlMeta.ihave:type_name -> xatu.libp2p.ControlIHaveMeta
	27,  // 81: xatu.libp2p.ControlMeta.iwant:type_name -> xatu.libp2p.ControlIWantMeta
	29,  // 82: xatu.libp2p.ControlMeta.graft:type_name -> xatu.libp2p.ControlGraftMeta
	31,  // 83: xatu.libp2p.ControlMeta.prune:type_name -> xatu.libp2p.ControlPruneMeta
	33,  // 84: xatu.libp2p.ControlMeta.idontwant:type_name -> xatu.libp2p.ControlIDontWantMeta
	35,  // 85: xatu.libp2p.ControlIHaveMeta.topic_id:type_name -> google.protobuf.StringValue
	35,  // 86: xatu.libp2p.ControlIHaveMeta.message_ids:type_name -> google.protobuf.StringValue
	35,  // 87: xatu.libp2p.ControlIHaveMetaItem.root_event_id:type_name -> google.protobuf.StringValue
	35,  // 88: xatu.libp2p.ControlIHaveMetaItem.peer_id:type_name -> google.protobuf.StringValue
	35,  // 89: xatu.libp2p.ControlIHaveMetaItem.message_id:type_name -> google.protobuf.StringValue
	35,  // 90: xatu.libp2p.ControlIHaveMetaItem.topic:type_name -> google.protobuf.StringValue
	37,  // 91: xatu.libp2p.ControlIHaveMetaItem.message_index:type_name -> google.protobuf.UInt32Value
	37,  // 92: xatu.libp2p.ControlIHaveMetaItem.control_index:type_name -> google.protobuf.UInt32Value
	35,  // 93: xatu.libp2p.ControlIWantMeta.message_ids:type_name -> google.protobuf.StringValue
	35,  // 94: xatu.libp2p.ControlIWantMetaItem.root_event_id:type_name -> google.protobuf.StringValue
	35,  // 95: xatu.libp2p.ControlIWantMetaItem.peer_id:type_name -> google.protobuf.StringValue
	35,  // 96: xatu.libp2p.ControlIWantMetaItem.message_id:type_name -> google.protobuf.StringValue
	37,  // 97: xatu.libp2p.ControlIWantMetaItem.message_index:type_name -> google.protobuf.UInt32Value
	37,  // 98: xatu.libp2p.ControlIWantMetaItem.control_index:type_name -> google.protobuf.UInt32Value
	35,  // 99: xatu.libp2p.ControlGraftMeta.topic_id:type_name -> google.protobuf.StringValue
	35,  // 100: xatu.libp2p.ControlGraftMetaItem.root_event_id:type_name -> google.protobuf.StringValue
	35,  // 101: xatu.libp2p.ControlGraftMetaItem.peer_id:type_name -> google.protobuf.StringValue
	35,  // 102: xatu.libp2p.ControlGraftMetaItem.topic:type_name -> google.protobuf.StringValue
	37,  // 103: xatu.libp2p.ControlGraftMetaItem.control_index:type_name -> google.protobuf.UInt32Value
	35,  // 104: xatu.libp2p.ControlPruneMeta.topic_id:type_name -> google.protobuf.StringValue
	35,  // 105: xatu.libp2p.ControlPruneMeta.peer_ids:type_name -> google.protobuf.StringValue
	35,  // 106: xatu.libp2p.ControlPruneMetaItem.root_event_id:type_name -> google.protobuf.StringValue
	35,  // 107: xatu.libp2p.ControlPruneMetaItem.peer_id:type_name -> google.protobuf.StringValue
	35,  // 108: xatu.libp2p.ControlPruneMetaItem.graft_peer_id:type_name -> google.protobuf.StringValue
	35,  // 109: xatu.libp2p.ControlPruneMetaItem.topic:type_name -> google.protobuf.StringValue
	37,  // 110: xatu.libp2p.ControlPruneMetaItem.control_index:type_name -> google.protobuf.UInt32Value
	37,  // 111: xatu.libp2p.ControlPruneMetaItem.peer_index:type_name -> google.protobuf.UInt32Value
	35,  // 112: xatu.libp2p.ControlIDontWantMeta.message_ids:type_name -> google.protobuf.StringValue
	35,  // 113: xatu.libp2p.ControlIDontWantMetaItem.root_event_id:type_name -> google.protobuf.StringValue
	35,  // 114: xatu.libp2p.ControlIDontWantMetaItem.peer_id:type_name -> google.protobuf.StringValue
	35,  // 115: xatu.libp2p.ControlIDontWantMetaItem.message_id:type_name -> google.protobuf.StringValue
	37,  // 116: xatu.libp2p.ControlIDontWantMetaItem.message_index:type_name -> google.protobuf.UInt32Value
	37,  // 117: xatu.libp2p.ControlIDontWantMetaItem.control_index:type_name -> google.protobuf.UInt32Value
	118, // [118:118] is the sub-list for method output_type
	118, // [118:118] is the sub-list for method input_type
	118, // [118:118] is the sub-list for extension type_name
	118, // [118:118] is the sub-list for extension extendee
	0,   // [0:118] is the sub-list for field type_name
}

func init() { file_pkg_proto_libp2p_trace_proto_init() }
func file_pkg_proto_libp2p_trace_proto_init() {
	if File_pkg_proto_libp2p_trace_proto != nil {
		return
	}
	file_pkg_proto_libp2p_eth_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_pkg_proto_libp2p_trace_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*AddPeer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_libp2p_trace_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*RemovePeer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_libp2p_trace_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*RecvRPC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_libp2p_trace_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*SendRPC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_libp2p_trace_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*DropRPC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_libp2p_trace_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*Join); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_libp2p_trace_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*Leave); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_libp2p_trace_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*Graft); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_libp2p_trace_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*Prune); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_libp2p_trace_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*PublishMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_libp2p_trace_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*RejectMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_libp2p_trace_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*DuplicateMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_libp2p_trace_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*DeliverMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_libp2p_trace_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*TraceEventMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_libp2p_trace_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*Connected); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_libp2p_trace_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*Disconnected); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_libp2p_trace_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*HandleStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_libp2p_trace_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*HandleMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_libp2p_trace_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*RPCMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_libp2p_trace_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*MessageMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_libp2p_trace_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*MessageMetaItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_libp2p_trace_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*SubMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_libp2p_trace_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*SubMetaItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_libp2p_trace_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*ControlMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_libp2p_trace_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*ControlIHaveMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_libp2p_trace_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*ControlIHaveMetaItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_libp2p_trace_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*ControlIWantMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_libp2p_trace_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*ControlIWantMetaItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_libp2p_trace_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*ControlGraftMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_libp2p_trace_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*ControlGraftMetaItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_libp2p_trace_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*ControlPruneMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_libp2p_trace_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*ControlPruneMetaItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_libp2p_trace_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*ControlIDontWantMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_libp2p_trace_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*ControlIDontWantMetaItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_proto_libp2p_trace_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   34,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pkg_proto_libp2p_trace_proto_goTypes,
		DependencyIndexes: file_pkg_proto_libp2p_trace_proto_depIdxs,
		EnumInfos:         file_pkg_proto_libp2p_trace_proto_enumTypes,
		MessageInfos:      file_pkg_proto_libp2p_trace_proto_msgTypes,
	}.Build()
	File_pkg_proto_libp2p_trace_proto = out.File
	file_pkg_proto_libp2p_trace_proto_rawDesc = nil
	file_pkg_proto_libp2p_trace_proto_goTypes = nil
	file_pkg_proto_libp2p_trace_proto_depIdxs = nil
}
