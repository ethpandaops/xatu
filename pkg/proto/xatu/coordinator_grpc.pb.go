// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: pkg/proto/xatu/coordinator.proto

package xatu

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Coordinator_CreateNodeRecords_FullMethodName                 = "/xatu.Coordinator/CreateNodeRecords"
	Coordinator_ListStalledExecutionNodeRecords_FullMethodName   = "/xatu.Coordinator/ListStalledExecutionNodeRecords"
	Coordinator_CreateExecutionNodeRecordStatus_FullMethodName   = "/xatu.Coordinator/CreateExecutionNodeRecordStatus"
	Coordinator_CoordinateExecutionNodeRecords_FullMethodName    = "/xatu.Coordinator/CoordinateExecutionNodeRecords"
	Coordinator_ListStalledConsensusNodeRecords_FullMethodName   = "/xatu.Coordinator/ListStalledConsensusNodeRecords"
	Coordinator_CreateConsensusNodeRecordStatus_FullMethodName   = "/xatu.Coordinator/CreateConsensusNodeRecordStatus"
	Coordinator_CreateConsensusNodeRecordStatuses_FullMethodName = "/xatu.Coordinator/CreateConsensusNodeRecordStatuses"
	Coordinator_CoordinateConsensusNodeRecords_FullMethodName    = "/xatu.Coordinator/CoordinateConsensusNodeRecords"
	Coordinator_GetDiscoveryNodeRecord_FullMethodName            = "/xatu.Coordinator/GetDiscoveryNodeRecord"
	Coordinator_GetDiscoveryExecutionNodeRecord_FullMethodName   = "/xatu.Coordinator/GetDiscoveryExecutionNodeRecord"
	Coordinator_GetDiscoveryConsensusNodeRecord_FullMethodName   = "/xatu.Coordinator/GetDiscoveryConsensusNodeRecord"
	Coordinator_GetCannonLocation_FullMethodName                 = "/xatu.Coordinator/GetCannonLocation"
	Coordinator_UpsertCannonLocation_FullMethodName              = "/xatu.Coordinator/UpsertCannonLocation"
)

// CoordinatorClient is the client API for Coordinator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CoordinatorClient interface {
	CreateNodeRecords(ctx context.Context, in *CreateNodeRecordsRequest, opts ...grpc.CallOption) (*CreateNodeRecordsResponse, error)
	ListStalledExecutionNodeRecords(ctx context.Context, in *ListStalledExecutionNodeRecordsRequest, opts ...grpc.CallOption) (*ListStalledExecutionNodeRecordsResponse, error)
	CreateExecutionNodeRecordStatus(ctx context.Context, in *CreateExecutionNodeRecordStatusRequest, opts ...grpc.CallOption) (*CreateExecutionNodeRecordStatusResponse, error)
	CoordinateExecutionNodeRecords(ctx context.Context, in *CoordinateExecutionNodeRecordsRequest, opts ...grpc.CallOption) (*CoordinateExecutionNodeRecordsResponse, error)
	ListStalledConsensusNodeRecords(ctx context.Context, in *ListStalledConsensusNodeRecordsRequest, opts ...grpc.CallOption) (*ListStalledConsensusNodeRecordsResponse, error)
	CreateConsensusNodeRecordStatus(ctx context.Context, in *CreateConsensusNodeRecordStatusRequest, opts ...grpc.CallOption) (*CreateConsensusNodeRecordStatusResponse, error)
	CreateConsensusNodeRecordStatuses(ctx context.Context, in *CreateConsensusNodeRecordStatusesRequest, opts ...grpc.CallOption) (*CreateConsensusNodeRecordStatusesResponse, error)
	CoordinateConsensusNodeRecords(ctx context.Context, in *CoordinateConsensusNodeRecordsRequest, opts ...grpc.CallOption) (*CoordinateConsensusNodeRecordsResponse, error)
	GetDiscoveryNodeRecord(ctx context.Context, in *GetDiscoveryNodeRecordRequest, opts ...grpc.CallOption) (*GetDiscoveryNodeRecordResponse, error)
	GetDiscoveryExecutionNodeRecord(ctx context.Context, in *GetDiscoveryExecutionNodeRecordRequest, opts ...grpc.CallOption) (*GetDiscoveryExecutionNodeRecordResponse, error)
	GetDiscoveryConsensusNodeRecord(ctx context.Context, in *GetDiscoveryConsensusNodeRecordRequest, opts ...grpc.CallOption) (*GetDiscoveryConsensusNodeRecordResponse, error)
	GetCannonLocation(ctx context.Context, in *GetCannonLocationRequest, opts ...grpc.CallOption) (*GetCannonLocationResponse, error)
	UpsertCannonLocation(ctx context.Context, in *UpsertCannonLocationRequest, opts ...grpc.CallOption) (*UpsertCannonLocationResponse, error)
}

type coordinatorClient struct {
	cc grpc.ClientConnInterface
}

func NewCoordinatorClient(cc grpc.ClientConnInterface) CoordinatorClient {
	return &coordinatorClient{cc}
}

func (c *coordinatorClient) CreateNodeRecords(ctx context.Context, in *CreateNodeRecordsRequest, opts ...grpc.CallOption) (*CreateNodeRecordsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateNodeRecordsResponse)
	err := c.cc.Invoke(ctx, Coordinator_CreateNodeRecords_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorClient) ListStalledExecutionNodeRecords(ctx context.Context, in *ListStalledExecutionNodeRecordsRequest, opts ...grpc.CallOption) (*ListStalledExecutionNodeRecordsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListStalledExecutionNodeRecordsResponse)
	err := c.cc.Invoke(ctx, Coordinator_ListStalledExecutionNodeRecords_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorClient) CreateExecutionNodeRecordStatus(ctx context.Context, in *CreateExecutionNodeRecordStatusRequest, opts ...grpc.CallOption) (*CreateExecutionNodeRecordStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateExecutionNodeRecordStatusResponse)
	err := c.cc.Invoke(ctx, Coordinator_CreateExecutionNodeRecordStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorClient) CoordinateExecutionNodeRecords(ctx context.Context, in *CoordinateExecutionNodeRecordsRequest, opts ...grpc.CallOption) (*CoordinateExecutionNodeRecordsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CoordinateExecutionNodeRecordsResponse)
	err := c.cc.Invoke(ctx, Coordinator_CoordinateExecutionNodeRecords_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorClient) ListStalledConsensusNodeRecords(ctx context.Context, in *ListStalledConsensusNodeRecordsRequest, opts ...grpc.CallOption) (*ListStalledConsensusNodeRecordsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListStalledConsensusNodeRecordsResponse)
	err := c.cc.Invoke(ctx, Coordinator_ListStalledConsensusNodeRecords_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorClient) CreateConsensusNodeRecordStatus(ctx context.Context, in *CreateConsensusNodeRecordStatusRequest, opts ...grpc.CallOption) (*CreateConsensusNodeRecordStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateConsensusNodeRecordStatusResponse)
	err := c.cc.Invoke(ctx, Coordinator_CreateConsensusNodeRecordStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorClient) CreateConsensusNodeRecordStatuses(ctx context.Context, in *CreateConsensusNodeRecordStatusesRequest, opts ...grpc.CallOption) (*CreateConsensusNodeRecordStatusesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateConsensusNodeRecordStatusesResponse)
	err := c.cc.Invoke(ctx, Coordinator_CreateConsensusNodeRecordStatuses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorClient) CoordinateConsensusNodeRecords(ctx context.Context, in *CoordinateConsensusNodeRecordsRequest, opts ...grpc.CallOption) (*CoordinateConsensusNodeRecordsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CoordinateConsensusNodeRecordsResponse)
	err := c.cc.Invoke(ctx, Coordinator_CoordinateConsensusNodeRecords_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorClient) GetDiscoveryNodeRecord(ctx context.Context, in *GetDiscoveryNodeRecordRequest, opts ...grpc.CallOption) (*GetDiscoveryNodeRecordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDiscoveryNodeRecordResponse)
	err := c.cc.Invoke(ctx, Coordinator_GetDiscoveryNodeRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorClient) GetDiscoveryExecutionNodeRecord(ctx context.Context, in *GetDiscoveryExecutionNodeRecordRequest, opts ...grpc.CallOption) (*GetDiscoveryExecutionNodeRecordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDiscoveryExecutionNodeRecordResponse)
	err := c.cc.Invoke(ctx, Coordinator_GetDiscoveryExecutionNodeRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorClient) GetDiscoveryConsensusNodeRecord(ctx context.Context, in *GetDiscoveryConsensusNodeRecordRequest, opts ...grpc.CallOption) (*GetDiscoveryConsensusNodeRecordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDiscoveryConsensusNodeRecordResponse)
	err := c.cc.Invoke(ctx, Coordinator_GetDiscoveryConsensusNodeRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorClient) GetCannonLocation(ctx context.Context, in *GetCannonLocationRequest, opts ...grpc.CallOption) (*GetCannonLocationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCannonLocationResponse)
	err := c.cc.Invoke(ctx, Coordinator_GetCannonLocation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorClient) UpsertCannonLocation(ctx context.Context, in *UpsertCannonLocationRequest, opts ...grpc.CallOption) (*UpsertCannonLocationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpsertCannonLocationResponse)
	err := c.cc.Invoke(ctx, Coordinator_UpsertCannonLocation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoordinatorServer is the server API for Coordinator service.
// All implementations must embed UnimplementedCoordinatorServer
// for forward compatibility.
type CoordinatorServer interface {
	CreateNodeRecords(context.Context, *CreateNodeRecordsRequest) (*CreateNodeRecordsResponse, error)
	ListStalledExecutionNodeRecords(context.Context, *ListStalledExecutionNodeRecordsRequest) (*ListStalledExecutionNodeRecordsResponse, error)
	CreateExecutionNodeRecordStatus(context.Context, *CreateExecutionNodeRecordStatusRequest) (*CreateExecutionNodeRecordStatusResponse, error)
	CoordinateExecutionNodeRecords(context.Context, *CoordinateExecutionNodeRecordsRequest) (*CoordinateExecutionNodeRecordsResponse, error)
	ListStalledConsensusNodeRecords(context.Context, *ListStalledConsensusNodeRecordsRequest) (*ListStalledConsensusNodeRecordsResponse, error)
	CreateConsensusNodeRecordStatus(context.Context, *CreateConsensusNodeRecordStatusRequest) (*CreateConsensusNodeRecordStatusResponse, error)
	CreateConsensusNodeRecordStatuses(context.Context, *CreateConsensusNodeRecordStatusesRequest) (*CreateConsensusNodeRecordStatusesResponse, error)
	CoordinateConsensusNodeRecords(context.Context, *CoordinateConsensusNodeRecordsRequest) (*CoordinateConsensusNodeRecordsResponse, error)
	GetDiscoveryNodeRecord(context.Context, *GetDiscoveryNodeRecordRequest) (*GetDiscoveryNodeRecordResponse, error)
	GetDiscoveryExecutionNodeRecord(context.Context, *GetDiscoveryExecutionNodeRecordRequest) (*GetDiscoveryExecutionNodeRecordResponse, error)
	GetDiscoveryConsensusNodeRecord(context.Context, *GetDiscoveryConsensusNodeRecordRequest) (*GetDiscoveryConsensusNodeRecordResponse, error)
	GetCannonLocation(context.Context, *GetCannonLocationRequest) (*GetCannonLocationResponse, error)
	UpsertCannonLocation(context.Context, *UpsertCannonLocationRequest) (*UpsertCannonLocationResponse, error)
	mustEmbedUnimplementedCoordinatorServer()
}

// UnimplementedCoordinatorServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCoordinatorServer struct{}

func (UnimplementedCoordinatorServer) CreateNodeRecords(context.Context, *CreateNodeRecordsRequest) (*CreateNodeRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNodeRecords not implemented")
}
func (UnimplementedCoordinatorServer) ListStalledExecutionNodeRecords(context.Context, *ListStalledExecutionNodeRecordsRequest) (*ListStalledExecutionNodeRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStalledExecutionNodeRecords not implemented")
}
func (UnimplementedCoordinatorServer) CreateExecutionNodeRecordStatus(context.Context, *CreateExecutionNodeRecordStatusRequest) (*CreateExecutionNodeRecordStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateExecutionNodeRecordStatus not implemented")
}
func (UnimplementedCoordinatorServer) CoordinateExecutionNodeRecords(context.Context, *CoordinateExecutionNodeRecordsRequest) (*CoordinateExecutionNodeRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CoordinateExecutionNodeRecords not implemented")
}
func (UnimplementedCoordinatorServer) ListStalledConsensusNodeRecords(context.Context, *ListStalledConsensusNodeRecordsRequest) (*ListStalledConsensusNodeRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStalledConsensusNodeRecords not implemented")
}
func (UnimplementedCoordinatorServer) CreateConsensusNodeRecordStatus(context.Context, *CreateConsensusNodeRecordStatusRequest) (*CreateConsensusNodeRecordStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConsensusNodeRecordStatus not implemented")
}
func (UnimplementedCoordinatorServer) CreateConsensusNodeRecordStatuses(context.Context, *CreateConsensusNodeRecordStatusesRequest) (*CreateConsensusNodeRecordStatusesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConsensusNodeRecordStatuses not implemented")
}
func (UnimplementedCoordinatorServer) CoordinateConsensusNodeRecords(context.Context, *CoordinateConsensusNodeRecordsRequest) (*CoordinateConsensusNodeRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CoordinateConsensusNodeRecords not implemented")
}
func (UnimplementedCoordinatorServer) GetDiscoveryNodeRecord(context.Context, *GetDiscoveryNodeRecordRequest) (*GetDiscoveryNodeRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDiscoveryNodeRecord not implemented")
}
func (UnimplementedCoordinatorServer) GetDiscoveryExecutionNodeRecord(context.Context, *GetDiscoveryExecutionNodeRecordRequest) (*GetDiscoveryExecutionNodeRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDiscoveryExecutionNodeRecord not implemented")
}
func (UnimplementedCoordinatorServer) GetDiscoveryConsensusNodeRecord(context.Context, *GetDiscoveryConsensusNodeRecordRequest) (*GetDiscoveryConsensusNodeRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDiscoveryConsensusNodeRecord not implemented")
}
func (UnimplementedCoordinatorServer) GetCannonLocation(context.Context, *GetCannonLocationRequest) (*GetCannonLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCannonLocation not implemented")
}
func (UnimplementedCoordinatorServer) UpsertCannonLocation(context.Context, *UpsertCannonLocationRequest) (*UpsertCannonLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertCannonLocation not implemented")
}
func (UnimplementedCoordinatorServer) mustEmbedUnimplementedCoordinatorServer() {}
func (UnimplementedCoordinatorServer) testEmbeddedByValue()                     {}

// UnsafeCoordinatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoordinatorServer will
// result in compilation errors.
type UnsafeCoordinatorServer interface {
	mustEmbedUnimplementedCoordinatorServer()
}

func RegisterCoordinatorServer(s grpc.ServiceRegistrar, srv CoordinatorServer) {
	// If the following call pancis, it indicates UnimplementedCoordinatorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Coordinator_ServiceDesc, srv)
}

func _Coordinator_CreateNodeRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNodeRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServer).CreateNodeRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Coordinator_CreateNodeRecords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServer).CreateNodeRecords(ctx, req.(*CreateNodeRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coordinator_ListStalledExecutionNodeRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStalledExecutionNodeRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServer).ListStalledExecutionNodeRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Coordinator_ListStalledExecutionNodeRecords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServer).ListStalledExecutionNodeRecords(ctx, req.(*ListStalledExecutionNodeRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coordinator_CreateExecutionNodeRecordStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateExecutionNodeRecordStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServer).CreateExecutionNodeRecordStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Coordinator_CreateExecutionNodeRecordStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServer).CreateExecutionNodeRecordStatus(ctx, req.(*CreateExecutionNodeRecordStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coordinator_CoordinateExecutionNodeRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoordinateExecutionNodeRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServer).CoordinateExecutionNodeRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Coordinator_CoordinateExecutionNodeRecords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServer).CoordinateExecutionNodeRecords(ctx, req.(*CoordinateExecutionNodeRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coordinator_ListStalledConsensusNodeRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStalledConsensusNodeRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServer).ListStalledConsensusNodeRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Coordinator_ListStalledConsensusNodeRecords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServer).ListStalledConsensusNodeRecords(ctx, req.(*ListStalledConsensusNodeRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coordinator_CreateConsensusNodeRecordStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConsensusNodeRecordStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServer).CreateConsensusNodeRecordStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Coordinator_CreateConsensusNodeRecordStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServer).CreateConsensusNodeRecordStatus(ctx, req.(*CreateConsensusNodeRecordStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coordinator_CreateConsensusNodeRecordStatuses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConsensusNodeRecordStatusesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServer).CreateConsensusNodeRecordStatuses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Coordinator_CreateConsensusNodeRecordStatuses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServer).CreateConsensusNodeRecordStatuses(ctx, req.(*CreateConsensusNodeRecordStatusesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coordinator_CoordinateConsensusNodeRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoordinateConsensusNodeRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServer).CoordinateConsensusNodeRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Coordinator_CoordinateConsensusNodeRecords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServer).CoordinateConsensusNodeRecords(ctx, req.(*CoordinateConsensusNodeRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coordinator_GetDiscoveryNodeRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDiscoveryNodeRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServer).GetDiscoveryNodeRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Coordinator_GetDiscoveryNodeRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServer).GetDiscoveryNodeRecord(ctx, req.(*GetDiscoveryNodeRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coordinator_GetDiscoveryExecutionNodeRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDiscoveryExecutionNodeRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServer).GetDiscoveryExecutionNodeRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Coordinator_GetDiscoveryExecutionNodeRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServer).GetDiscoveryExecutionNodeRecord(ctx, req.(*GetDiscoveryExecutionNodeRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coordinator_GetDiscoveryConsensusNodeRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDiscoveryConsensusNodeRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServer).GetDiscoveryConsensusNodeRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Coordinator_GetDiscoveryConsensusNodeRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServer).GetDiscoveryConsensusNodeRecord(ctx, req.(*GetDiscoveryConsensusNodeRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coordinator_GetCannonLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCannonLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServer).GetCannonLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Coordinator_GetCannonLocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServer).GetCannonLocation(ctx, req.(*GetCannonLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coordinator_UpsertCannonLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertCannonLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServer).UpsertCannonLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Coordinator_UpsertCannonLocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServer).UpsertCannonLocation(ctx, req.(*UpsertCannonLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Coordinator_ServiceDesc is the grpc.ServiceDesc for Coordinator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Coordinator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "xatu.Coordinator",
	HandlerType: (*CoordinatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNodeRecords",
			Handler:    _Coordinator_CreateNodeRecords_Handler,
		},
		{
			MethodName: "ListStalledExecutionNodeRecords",
			Handler:    _Coordinator_ListStalledExecutionNodeRecords_Handler,
		},
		{
			MethodName: "CreateExecutionNodeRecordStatus",
			Handler:    _Coordinator_CreateExecutionNodeRecordStatus_Handler,
		},
		{
			MethodName: "CoordinateExecutionNodeRecords",
			Handler:    _Coordinator_CoordinateExecutionNodeRecords_Handler,
		},
		{
			MethodName: "ListStalledConsensusNodeRecords",
			Handler:    _Coordinator_ListStalledConsensusNodeRecords_Handler,
		},
		{
			MethodName: "CreateConsensusNodeRecordStatus",
			Handler:    _Coordinator_CreateConsensusNodeRecordStatus_Handler,
		},
		{
			MethodName: "CreateConsensusNodeRecordStatuses",
			Handler:    _Coordinator_CreateConsensusNodeRecordStatuses_Handler,
		},
		{
			MethodName: "CoordinateConsensusNodeRecords",
			Handler:    _Coordinator_CoordinateConsensusNodeRecords_Handler,
		},
		{
			MethodName: "GetDiscoveryNodeRecord",
			Handler:    _Coordinator_GetDiscoveryNodeRecord_Handler,
		},
		{
			MethodName: "GetDiscoveryExecutionNodeRecord",
			Handler:    _Coordinator_GetDiscoveryExecutionNodeRecord_Handler,
		},
		{
			MethodName: "GetDiscoveryConsensusNodeRecord",
			Handler:    _Coordinator_GetDiscoveryConsensusNodeRecord_Handler,
		},
		{
			MethodName: "GetCannonLocation",
			Handler:    _Coordinator_GetCannonLocation_Handler,
		},
		{
			MethodName: "UpsertCannonLocation",
			Handler:    _Coordinator_UpsertCannonLocation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/proto/xatu/coordinator.proto",
}
