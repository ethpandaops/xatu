// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.2
// source: pkg/proto/xatu/event_ingester.proto

package xatu

import (
	blockprint "github.com/ethpandaops/xatu/pkg/proto/blockprint"
	v1 "github.com/ethpandaops/xatu/pkg/proto/eth/v1"
	v2 "github.com/ethpandaops/xatu/pkg/proto/eth/v2"
	libp2p "github.com/ethpandaops/xatu/pkg/proto/libp2p"
	gossipsub "github.com/ethpandaops/xatu/pkg/proto/libp2p/gossipsub"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Event_Name int32

const (
	Event_BEACON_API_ETH_V1_EVENTS_UNKNOWN                       Event_Name = 0
	Event_BEACON_API_ETH_V1_EVENTS_BLOCK                         Event_Name = 1
	Event_BEACON_API_ETH_V1_EVENTS_CHAIN_REORG                   Event_Name = 2
	Event_BEACON_API_ETH_V1_EVENTS_FINALIZED_CHECKPOINT          Event_Name = 3
	Event_BEACON_API_ETH_V1_EVENTS_HEAD                          Event_Name = 4
	Event_BEACON_API_ETH_V1_EVENTS_VOLUNTARY_EXIT                Event_Name = 5
	Event_BEACON_API_ETH_V1_EVENTS_ATTESTATION                   Event_Name = 6
	Event_BEACON_API_ETH_V1_EVENTS_CONTRIBUTION_AND_PROOF        Event_Name = 7
	Event_MEMPOOL_TRANSACTION                                    Event_Name = 8
	Event_BEACON_API_ETH_V2_BEACON_BLOCK                         Event_Name = 9
	Event_BEACON_API_ETH_V1_DEBUG_FORK_CHOICE                    Event_Name = 10
	Event_BEACON_API_ETH_V1_DEBUG_FORK_CHOICE_REORG              Event_Name = 11
	Event_BEACON_API_ETH_V1_BEACON_COMMITTEE                     Event_Name = 12
	Event_BEACON_API_ETH_V1_VALIDATOR_ATTESTATION_DATA           Event_Name = 13
	Event_BEACON_API_ETH_V1_EVENTS_BLOCK_V2                      Event_Name = 14
	Event_BEACON_API_ETH_V1_EVENTS_CHAIN_REORG_V2                Event_Name = 15
	Event_BEACON_API_ETH_V1_EVENTS_FINALIZED_CHECKPOINT_V2       Event_Name = 16
	Event_BEACON_API_ETH_V1_EVENTS_HEAD_V2                       Event_Name = 17
	Event_BEACON_API_ETH_V1_EVENTS_VOLUNTARY_EXIT_V2             Event_Name = 18
	Event_BEACON_API_ETH_V1_EVENTS_ATTESTATION_V2                Event_Name = 19
	Event_BEACON_API_ETH_V1_EVENTS_CONTRIBUTION_AND_PROOF_V2     Event_Name = 20
	Event_MEMPOOL_TRANSACTION_V2                                 Event_Name = 21
	Event_BEACON_API_ETH_V2_BEACON_BLOCK_V2                      Event_Name = 22
	Event_BEACON_API_ETH_V1_DEBUG_FORK_CHOICE_V2                 Event_Name = 23
	Event_BEACON_API_ETH_V1_DEBUG_FORK_CHOICE_REORG_V2           Event_Name = 24
	Event_BEACON_API_ETH_V2_BEACON_BLOCK_ATTESTER_SLASHING       Event_Name = 25
	Event_BEACON_API_ETH_V2_BEACON_BLOCK_PROPOSER_SLASHING       Event_Name = 26
	Event_BEACON_API_ETH_V2_BEACON_BLOCK_VOLUNTARY_EXIT          Event_Name = 27
	Event_BEACON_API_ETH_V2_BEACON_BLOCK_DEPOSIT                 Event_Name = 28
	Event_BEACON_API_ETH_V2_BEACON_BLOCK_BLS_TO_EXECUTION_CHANGE Event_Name = 29
	Event_BEACON_API_ETH_V2_BEACON_BLOCK_EXECUTION_TRANSACTION   Event_Name = 30
	Event_BEACON_API_ETH_V2_BEACON_BLOCK_WITHDRAWAL              Event_Name = 31
	Event_BEACON_API_ETH_V1_EVENTS_BLOB_SIDECAR                  Event_Name = 32
	Event_BLOCKPRINT_BLOCK_CLASSIFICATION                        Event_Name = 33
	Event_BEACON_API_ETH_V1_BEACON_BLOB_SIDECAR                  Event_Name = 34
	Event_BEACON_P2P_ATTESTATION                                 Event_Name = 35
	Event_BEACON_API_ETH_V1_PROPOSER_DUTY                        Event_Name = 36
	Event_BEACON_API_ETH_V2_BEACON_BLOCK_ELABORATED_ATTESTATION  Event_Name = 37
	Event_LIBP2P_TRACE_CONNECTED                                 Event_Name = 38
	Event_LIBP2P_TRACE_DISCONNECTED                              Event_Name = 39
	Event_LIBP2P_TRACE_ADD_PEER                                  Event_Name = 40
	Event_LIBP2P_TRACE_REMOVE_PEER                               Event_Name = 41
	Event_LIBP2P_TRACE_RECV_RPC                                  Event_Name = 42
	Event_LIBP2P_TRACE_SEND_RPC                                  Event_Name = 43
	Event_LIBP2P_TRACE_DROP_RPC                                  Event_Name = 44
	Event_LIBP2P_TRACE_JOIN                                      Event_Name = 45
	Event_LIBP2P_TRACE_UNKNOWN                                   Event_Name = 46
	Event_LIBP2P_TRACE_HANDLE_METADATA                           Event_Name = 47
	Event_LIBP2P_TRACE_HANDLE_STATUS                             Event_Name = 48
	Event_LIBP2P_TRACE_GOSSIPSUB_BEACON_BLOCK                    Event_Name = 49
	Event_LIBP2P_TRACE_GOSSIPSUB_BEACON_ATTESTATION              Event_Name = 50
	Event_LIBP2P_TRACE_GOSSIPSUB_BLOB_SIDECAR                    Event_Name = 51
	Event_BEACON_API_ETH_V1_BEACON_VALIDATORS                    Event_Name = 52
)

// Enum value maps for Event_Name.
var (
	Event_Name_name = map[int32]string{
		0:  "BEACON_API_ETH_V1_EVENTS_UNKNOWN",
		1:  "BEACON_API_ETH_V1_EVENTS_BLOCK",
		2:  "BEACON_API_ETH_V1_EVENTS_CHAIN_REORG",
		3:  "BEACON_API_ETH_V1_EVENTS_FINALIZED_CHECKPOINT",
		4:  "BEACON_API_ETH_V1_EVENTS_HEAD",
		5:  "BEACON_API_ETH_V1_EVENTS_VOLUNTARY_EXIT",
		6:  "BEACON_API_ETH_V1_EVENTS_ATTESTATION",
		7:  "BEACON_API_ETH_V1_EVENTS_CONTRIBUTION_AND_PROOF",
		8:  "MEMPOOL_TRANSACTION",
		9:  "BEACON_API_ETH_V2_BEACON_BLOCK",
		10: "BEACON_API_ETH_V1_DEBUG_FORK_CHOICE",
		11: "BEACON_API_ETH_V1_DEBUG_FORK_CHOICE_REORG",
		12: "BEACON_API_ETH_V1_BEACON_COMMITTEE",
		13: "BEACON_API_ETH_V1_VALIDATOR_ATTESTATION_DATA",
		14: "BEACON_API_ETH_V1_EVENTS_BLOCK_V2",
		15: "BEACON_API_ETH_V1_EVENTS_CHAIN_REORG_V2",
		16: "BEACON_API_ETH_V1_EVENTS_FINALIZED_CHECKPOINT_V2",
		17: "BEACON_API_ETH_V1_EVENTS_HEAD_V2",
		18: "BEACON_API_ETH_V1_EVENTS_VOLUNTARY_EXIT_V2",
		19: "BEACON_API_ETH_V1_EVENTS_ATTESTATION_V2",
		20: "BEACON_API_ETH_V1_EVENTS_CONTRIBUTION_AND_PROOF_V2",
		21: "MEMPOOL_TRANSACTION_V2",
		22: "BEACON_API_ETH_V2_BEACON_BLOCK_V2",
		23: "BEACON_API_ETH_V1_DEBUG_FORK_CHOICE_V2",
		24: "BEACON_API_ETH_V1_DEBUG_FORK_CHOICE_REORG_V2",
		25: "BEACON_API_ETH_V2_BEACON_BLOCK_ATTESTER_SLASHING",
		26: "BEACON_API_ETH_V2_BEACON_BLOCK_PROPOSER_SLASHING",
		27: "BEACON_API_ETH_V2_BEACON_BLOCK_VOLUNTARY_EXIT",
		28: "BEACON_API_ETH_V2_BEACON_BLOCK_DEPOSIT",
		29: "BEACON_API_ETH_V2_BEACON_BLOCK_BLS_TO_EXECUTION_CHANGE",
		30: "BEACON_API_ETH_V2_BEACON_BLOCK_EXECUTION_TRANSACTION",
		31: "BEACON_API_ETH_V2_BEACON_BLOCK_WITHDRAWAL",
		32: "BEACON_API_ETH_V1_EVENTS_BLOB_SIDECAR",
		33: "BLOCKPRINT_BLOCK_CLASSIFICATION",
		34: "BEACON_API_ETH_V1_BEACON_BLOB_SIDECAR",
		35: "BEACON_P2P_ATTESTATION",
		36: "BEACON_API_ETH_V1_PROPOSER_DUTY",
		37: "BEACON_API_ETH_V2_BEACON_BLOCK_ELABORATED_ATTESTATION",
		38: "LIBP2P_TRACE_CONNECTED",
		39: "LIBP2P_TRACE_DISCONNECTED",
		40: "LIBP2P_TRACE_ADD_PEER",
		41: "LIBP2P_TRACE_REMOVE_PEER",
		42: "LIBP2P_TRACE_RECV_RPC",
		43: "LIBP2P_TRACE_SEND_RPC",
		44: "LIBP2P_TRACE_DROP_RPC",
		45: "LIBP2P_TRACE_JOIN",
		46: "LIBP2P_TRACE_UNKNOWN",
		47: "LIBP2P_TRACE_HANDLE_METADATA",
		48: "LIBP2P_TRACE_HANDLE_STATUS",
		49: "LIBP2P_TRACE_GOSSIPSUB_BEACON_BLOCK",
		50: "LIBP2P_TRACE_GOSSIPSUB_BEACON_ATTESTATION",
		51: "LIBP2P_TRACE_GOSSIPSUB_BLOB_SIDECAR",
		52: "BEACON_API_ETH_V1_BEACON_VALIDATORS",
	}
	Event_Name_value = map[string]int32{
		"BEACON_API_ETH_V1_EVENTS_UNKNOWN":                       0,
		"BEACON_API_ETH_V1_EVENTS_BLOCK":                         1,
		"BEACON_API_ETH_V1_EVENTS_CHAIN_REORG":                   2,
		"BEACON_API_ETH_V1_EVENTS_FINALIZED_CHECKPOINT":          3,
		"BEACON_API_ETH_V1_EVENTS_HEAD":                          4,
		"BEACON_API_ETH_V1_EVENTS_VOLUNTARY_EXIT":                5,
		"BEACON_API_ETH_V1_EVENTS_ATTESTATION":                   6,
		"BEACON_API_ETH_V1_EVENTS_CONTRIBUTION_AND_PROOF":        7,
		"MEMPOOL_TRANSACTION":                                    8,
		"BEACON_API_ETH_V2_BEACON_BLOCK":                         9,
		"BEACON_API_ETH_V1_DEBUG_FORK_CHOICE":                    10,
		"BEACON_API_ETH_V1_DEBUG_FORK_CHOICE_REORG":              11,
		"BEACON_API_ETH_V1_BEACON_COMMITTEE":                     12,
		"BEACON_API_ETH_V1_VALIDATOR_ATTESTATION_DATA":           13,
		"BEACON_API_ETH_V1_EVENTS_BLOCK_V2":                      14,
		"BEACON_API_ETH_V1_EVENTS_CHAIN_REORG_V2":                15,
		"BEACON_API_ETH_V1_EVENTS_FINALIZED_CHECKPOINT_V2":       16,
		"BEACON_API_ETH_V1_EVENTS_HEAD_V2":                       17,
		"BEACON_API_ETH_V1_EVENTS_VOLUNTARY_EXIT_V2":             18,
		"BEACON_API_ETH_V1_EVENTS_ATTESTATION_V2":                19,
		"BEACON_API_ETH_V1_EVENTS_CONTRIBUTION_AND_PROOF_V2":     20,
		"MEMPOOL_TRANSACTION_V2":                                 21,
		"BEACON_API_ETH_V2_BEACON_BLOCK_V2":                      22,
		"BEACON_API_ETH_V1_DEBUG_FORK_CHOICE_V2":                 23,
		"BEACON_API_ETH_V1_DEBUG_FORK_CHOICE_REORG_V2":           24,
		"BEACON_API_ETH_V2_BEACON_BLOCK_ATTESTER_SLASHING":       25,
		"BEACON_API_ETH_V2_BEACON_BLOCK_PROPOSER_SLASHING":       26,
		"BEACON_API_ETH_V2_BEACON_BLOCK_VOLUNTARY_EXIT":          27,
		"BEACON_API_ETH_V2_BEACON_BLOCK_DEPOSIT":                 28,
		"BEACON_API_ETH_V2_BEACON_BLOCK_BLS_TO_EXECUTION_CHANGE": 29,
		"BEACON_API_ETH_V2_BEACON_BLOCK_EXECUTION_TRANSACTION":   30,
		"BEACON_API_ETH_V2_BEACON_BLOCK_WITHDRAWAL":              31,
		"BEACON_API_ETH_V1_EVENTS_BLOB_SIDECAR":                  32,
		"BLOCKPRINT_BLOCK_CLASSIFICATION":                        33,
		"BEACON_API_ETH_V1_BEACON_BLOB_SIDECAR":                  34,
		"BEACON_P2P_ATTESTATION":                                 35,
		"BEACON_API_ETH_V1_PROPOSER_DUTY":                        36,
		"BEACON_API_ETH_V2_BEACON_BLOCK_ELABORATED_ATTESTATION":  37,
		"LIBP2P_TRACE_CONNECTED":                                 38,
		"LIBP2P_TRACE_DISCONNECTED":                              39,
		"LIBP2P_TRACE_ADD_PEER":                                  40,
		"LIBP2P_TRACE_REMOVE_PEER":                               41,
		"LIBP2P_TRACE_RECV_RPC":                                  42,
		"LIBP2P_TRACE_SEND_RPC":                                  43,
		"LIBP2P_TRACE_DROP_RPC":                                  44,
		"LIBP2P_TRACE_JOIN":                                      45,
		"LIBP2P_TRACE_UNKNOWN":                                   46,
		"LIBP2P_TRACE_HANDLE_METADATA":                           47,
		"LIBP2P_TRACE_HANDLE_STATUS":                             48,
		"LIBP2P_TRACE_GOSSIPSUB_BEACON_BLOCK":                    49,
		"LIBP2P_TRACE_GOSSIPSUB_BEACON_ATTESTATION":              50,
		"LIBP2P_TRACE_GOSSIPSUB_BLOB_SIDECAR":                    51,
		"BEACON_API_ETH_V1_BEACON_VALIDATORS":                    52,
	}
)

func (x Event_Name) Enum() *Event_Name {
	p := new(Event_Name)
	*p = x
	return p
}

func (x Event_Name) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Event_Name) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_proto_xatu_event_ingester_proto_enumTypes[0].Descriptor()
}

func (Event_Name) Type() protoreflect.EnumType {
	return &file_pkg_proto_xatu_event_ingester_proto_enumTypes[0]
}

func (x Event_Name) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Event_Name.Descriptor instead.
func (Event_Name) EnumDescriptor() ([]byte, []int) {
	return file_pkg_proto_xatu_event_ingester_proto_rawDescGZIP(), []int{18, 0}
}

type CreateEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events []*DecoratedEvent `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *CreateEventsRequest) Reset() {
	*x = CreateEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEventsRequest) ProtoMessage() {}

func (x *CreateEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEventsRequest.ProtoReflect.Descriptor instead.
func (*CreateEventsRequest) Descriptor() ([]byte, []int) {
	return file_pkg_proto_xatu_event_ingester_proto_rawDescGZIP(), []int{0}
}

func (x *CreateEventsRequest) GetEvents() []*DecoratedEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

type CreateEventsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateEventsResponse) Reset() {
	*x = CreateEventsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEventsResponse) ProtoMessage() {}

func (x *CreateEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEventsResponse.ProtoReflect.Descriptor instead.
func (*CreateEventsResponse) Descriptor() ([]byte, []int) {
	return file_pkg_proto_xatu_event_ingester_proto_rawDescGZIP(), []int{1}
}

type Epoch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number is the epoch number.
	Number uint64 `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	// StartDateTime is the epoch start time.
	StartDateTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start_date_time,proto3" json:"start_date_time,omitempty"`
}

func (x *Epoch) Reset() {
	*x = Epoch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Epoch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Epoch) ProtoMessage() {}

func (x *Epoch) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Epoch.ProtoReflect.Descriptor instead.
func (*Epoch) Descriptor() ([]byte, []int) {
	return file_pkg_proto_xatu_event_ingester_proto_rawDescGZIP(), []int{2}
}

func (x *Epoch) GetNumber() uint64 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *Epoch) GetStartDateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDateTime
	}
	return nil
}

type EpochV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number is the epoch number.
	Number *wrapperspb.UInt64Value `protobuf:"bytes,1,opt,name=number,proto3" json:"number,omitempty"`
	// StartDateTime is the epoch start time.
	StartDateTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start_date_time,proto3" json:"start_date_time,omitempty"`
}

func (x *EpochV2) Reset() {
	*x = EpochV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EpochV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EpochV2) ProtoMessage() {}

func (x *EpochV2) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EpochV2.ProtoReflect.Descriptor instead.
func (*EpochV2) Descriptor() ([]byte, []int) {
	return file_pkg_proto_xatu_event_ingester_proto_rawDescGZIP(), []int{3}
}

func (x *EpochV2) GetNumber() *wrapperspb.UInt64Value {
	if x != nil {
		return x.Number
	}
	return nil
}

func (x *EpochV2) GetStartDateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDateTime
	}
	return nil
}

type Slot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number is the slot number.
	Number uint64 `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	// StartDateTime is the slot start time.
	StartDateTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start_date_time,proto3" json:"start_date_time,omitempty"`
}

func (x *Slot) Reset() {
	*x = Slot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Slot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Slot) ProtoMessage() {}

func (x *Slot) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Slot.ProtoReflect.Descriptor instead.
func (*Slot) Descriptor() ([]byte, []int) {
	return file_pkg_proto_xatu_event_ingester_proto_rawDescGZIP(), []int{4}
}

func (x *Slot) GetNumber() uint64 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *Slot) GetStartDateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDateTime
	}
	return nil
}

type SlotV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number is the slot number.
	Number *wrapperspb.UInt64Value `protobuf:"bytes,1,opt,name=number,proto3" json:"number,omitempty"`
	// StartDateTime is the slot start time.
	StartDateTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start_date_time,proto3" json:"start_date_time,omitempty"`
}

func (x *SlotV2) Reset() {
	*x = SlotV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlotV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlotV2) ProtoMessage() {}

func (x *SlotV2) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlotV2.ProtoReflect.Descriptor instead.
func (*SlotV2) Descriptor() ([]byte, []int) {
	return file_pkg_proto_xatu_event_ingester_proto_rawDescGZIP(), []int{5}
}

func (x *SlotV2) GetNumber() *wrapperspb.UInt64Value {
	if x != nil {
		return x.Number
	}
	return nil
}

func (x *SlotV2) GetStartDateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDateTime
	}
	return nil
}

type ForkID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Next string `protobuf:"bytes,2,opt,name=next,proto3" json:"next,omitempty"`
}

func (x *ForkID) Reset() {
	*x = ForkID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForkID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForkID) ProtoMessage() {}

func (x *ForkID) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForkID.ProtoReflect.Descriptor instead.
func (*ForkID) Descriptor() ([]byte, []int) {
	return file_pkg_proto_xatu_event_ingester_proto_rawDescGZIP(), []int{6}
}

func (x *ForkID) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *ForkID) GetNext() string {
	if x != nil {
		return x.Next
	}
	return ""
}

type Propagation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SlotStartDiff is the difference between the slot start time and the
	// attestation received time (in milliseconds).
	SlotStartDiff uint64 `protobuf:"varint,3,opt,name=slot_start_diff,proto3" json:"slot_start_diff,omitempty"`
}

func (x *Propagation) Reset() {
	*x = Propagation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Propagation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Propagation) ProtoMessage() {}

func (x *Propagation) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Propagation.ProtoReflect.Descriptor instead.
func (*Propagation) Descriptor() ([]byte, []int) {
	return file_pkg_proto_xatu_event_ingester_proto_rawDescGZIP(), []int{7}
}

func (x *Propagation) GetSlotStartDiff() uint64 {
	if x != nil {
		return x.SlotStartDiff
	}
	return 0
}

type PropagationV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SlotStartDiff is the difference between the slot start time and the
	// attestation received time (in milliseconds).
	SlotStartDiff *wrapperspb.UInt64Value `protobuf:"bytes,1,opt,name=slot_start_diff,proto3" json:"slot_start_diff,omitempty"`
}

func (x *PropagationV2) Reset() {
	*x = PropagationV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropagationV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropagationV2) ProtoMessage() {}

func (x *PropagationV2) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropagationV2.ProtoReflect.Descriptor instead.
func (*PropagationV2) Descriptor() ([]byte, []int) {
	return file_pkg_proto_xatu_event_ingester_proto_rawDescGZIP(), []int{8}
}

func (x *PropagationV2) GetSlotStartDiff() *wrapperspb.UInt64Value {
	if x != nil {
		return x.SlotStartDiff
	}
	return nil
}

type AttestingValidator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// CommitteeIndex is the position of the validator within the committee.
	CommitteeIndex uint64 `protobuf:"varint,1,opt,name=committee_index,proto3" json:"committee_index,omitempty"`
	// Index is the index of the validator in the beacon chain.
	Index uint64 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *AttestingValidator) Reset() {
	*x = AttestingValidator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttestingValidator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttestingValidator) ProtoMessage() {}

func (x *AttestingValidator) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttestingValidator.ProtoReflect.Descriptor instead.
func (*AttestingValidator) Descriptor() ([]byte, []int) {
	return file_pkg_proto_xatu_event_ingester_proto_rawDescGZIP(), []int{9}
}

func (x *AttestingValidator) GetCommitteeIndex() uint64 {
	if x != nil {
		return x.CommitteeIndex
	}
	return 0
}

func (x *AttestingValidator) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

type AttestingValidatorV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// CommitteeIndex is the position of the validator within the committee.
	CommitteeIndex *wrapperspb.UInt64Value `protobuf:"bytes,1,opt,name=committee_index,proto3" json:"committee_index,omitempty"`
	// Index is the index of the validator in the beacon chain.
	Index *wrapperspb.UInt64Value `protobuf:"bytes,2,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *AttestingValidatorV2) Reset() {
	*x = AttestingValidatorV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttestingValidatorV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttestingValidatorV2) ProtoMessage() {}

func (x *AttestingValidatorV2) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttestingValidatorV2.ProtoReflect.Descriptor instead.
func (*AttestingValidatorV2) Descriptor() ([]byte, []int) {
	return file_pkg_proto_xatu_event_ingester_proto_rawDescGZIP(), []int{10}
}

func (x *AttestingValidatorV2) GetCommitteeIndex() *wrapperspb.UInt64Value {
	if x != nil {
		return x.CommitteeIndex
	}
	return nil
}

func (x *AttestingValidatorV2) GetIndex() *wrapperspb.UInt64Value {
	if x != nil {
		return x.Index
	}
	return nil
}

type DebugForkChoiceReorg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Before *v1.ForkChoice      `protobuf:"bytes,1,opt,name=before,proto3" json:"before,omitempty"`
	After  *v1.ForkChoice      `protobuf:"bytes,2,opt,name=after,proto3" json:"after,omitempty"`
	Event  *v1.EventChainReorg `protobuf:"bytes,3,opt,name=event,proto3" json:"event,omitempty"`
}

func (x *DebugForkChoiceReorg) Reset() {
	*x = DebugForkChoiceReorg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DebugForkChoiceReorg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebugForkChoiceReorg) ProtoMessage() {}

func (x *DebugForkChoiceReorg) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebugForkChoiceReorg.ProtoReflect.Descriptor instead.
func (*DebugForkChoiceReorg) Descriptor() ([]byte, []int) {
	return file_pkg_proto_xatu_event_ingester_proto_rawDescGZIP(), []int{11}
}

func (x *DebugForkChoiceReorg) GetBefore() *v1.ForkChoice {
	if x != nil {
		return x.Before
	}
	return nil
}

func (x *DebugForkChoiceReorg) GetAfter() *v1.ForkChoice {
	if x != nil {
		return x.After
	}
	return nil
}

func (x *DebugForkChoiceReorg) GetEvent() *v1.EventChainReorg {
	if x != nil {
		return x.Event
	}
	return nil
}

type DebugForkChoiceReorgV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Before *v1.ForkChoiceV2      `protobuf:"bytes,1,opt,name=before,proto3" json:"before,omitempty"`
	After  *v1.ForkChoiceV2      `protobuf:"bytes,2,opt,name=after,proto3" json:"after,omitempty"`
	Event  *v1.EventChainReorgV2 `protobuf:"bytes,3,opt,name=event,proto3" json:"event,omitempty"`
}

func (x *DebugForkChoiceReorgV2) Reset() {
	*x = DebugForkChoiceReorgV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DebugForkChoiceReorgV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebugForkChoiceReorgV2) ProtoMessage() {}

func (x *DebugForkChoiceReorgV2) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebugForkChoiceReorgV2.ProtoReflect.Descriptor instead.
func (*DebugForkChoiceReorgV2) Descriptor() ([]byte, []int) {
	return file_pkg_proto_xatu_event_ingester_proto_rawDescGZIP(), []int{12}
}

func (x *DebugForkChoiceReorgV2) GetBefore() *v1.ForkChoiceV2 {
	if x != nil {
		return x.Before
	}
	return nil
}

func (x *DebugForkChoiceReorgV2) GetAfter() *v1.ForkChoiceV2 {
	if x != nil {
		return x.After
	}
	return nil
}

func (x *DebugForkChoiceReorgV2) GetEvent() *v1.EventChainReorgV2 {
	if x != nil {
		return x.Event
	}
	return nil
}

type Validators struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Validators []*v1.Validator `protobuf:"bytes,1,rep,name=validators,proto3" json:"validators,omitempty"`
}

func (x *Validators) Reset() {
	*x = Validators{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Validators) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Validators) ProtoMessage() {}

func (x *Validators) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Validators.ProtoReflect.Descriptor instead.
func (*Validators) Descriptor() ([]byte, []int) {
	return file_pkg_proto_xatu_event_ingester_proto_rawDescGZIP(), []int{13}
}

func (x *Validators) GetValidators() []*v1.Validator {
	if x != nil {
		return x.Validators
	}
	return nil
}

type BlockIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Epoch contains the epoch information for the block.
	Epoch *EpochV2 `protobuf:"bytes,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	// Slot contains the slot information for the block.
	Slot *SlotV2 `protobuf:"bytes,2,opt,name=slot,proto3" json:"slot,omitempty"`
	// Version contains information about the version of the block.
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	// Root contains the root of the beacon block.
	Root string `protobuf:"bytes,4,opt,name=root,proto3" json:"root,omitempty"`
}

func (x *BlockIdentifier) Reset() {
	*x = BlockIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockIdentifier) ProtoMessage() {}

func (x *BlockIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockIdentifier.ProtoReflect.Descriptor instead.
func (*BlockIdentifier) Descriptor() ([]byte, []int) {
	return file_pkg_proto_xatu_event_ingester_proto_rawDescGZIP(), []int{14}
}

func (x *BlockIdentifier) GetEpoch() *EpochV2 {
	if x != nil {
		return x.Epoch
	}
	return nil
}

func (x *BlockIdentifier) GetSlot() *SlotV2 {
	if x != nil {
		return x.Slot
	}
	return nil
}

func (x *BlockIdentifier) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *BlockIdentifier) GetRoot() string {
	if x != nil {
		return x.Root
	}
	return ""
}

type ClientMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name is the name of the client.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Version is the Xatu-sentry version of the client.
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// ID is the unique ID of the client.
	Id string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	// Implmentation is the implementation of the client.
	Implementation string `protobuf:"bytes,4,opt,name=implementation,proto3" json:"implementation,omitempty"`
	// OS is the operating system of the client.
	Os string `protobuf:"bytes,5,opt,name=os,proto3" json:"os,omitempty"`
	// ClockDrift is the NTP calculated clock drift of the client.
	ClockDrift uint64 `protobuf:"varint,6,opt,name=clock_drift,proto3" json:"clock_drift,omitempty"`
	// Ethereum contains information about the Ethereum network and configuration.
	Ethereum *ClientMeta_Ethereum `protobuf:"bytes,8,opt,name=ethereum,proto3" json:"ethereum,omitempty"`
	// Labels contains additional labels as set by the client.
	Labels map[string]string `protobuf:"bytes,9,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// AdditionalData contains additional, computed data as set by the client
	// about the event.
	//
	// Types that are assignable to AdditionalData:
	//
	//	*ClientMeta_EthV1EventsAttestation
	//	*ClientMeta_EthV1EventsHead
	//	*ClientMeta_EthV1EventsBlock
	//	*ClientMeta_EthV1EventsVoluntaryExit
	//	*ClientMeta_EthV1EventsFinalizedCheckpoint
	//	*ClientMeta_EthV1EventsChainReorg
	//	*ClientMeta_EthV1EventsContributionAndProof
	//	*ClientMeta_MempoolTransaction
	//	*ClientMeta_EthV2BeaconBlock
	//	*ClientMeta_EthV1DebugForkChoice
	//	*ClientMeta_EthV1DebugForkChoiceReorg
	//	*ClientMeta_EthV1BeaconCommittee
	//	*ClientMeta_EthV1ValidatorAttestationData
	//	*ClientMeta_EthV1EventsAttestationV2
	//	*ClientMeta_EthV1EventsHeadV2
	//	*ClientMeta_EthV1EventsBlockV2
	//	*ClientMeta_EthV1EventsVoluntaryExitV2
	//	*ClientMeta_EthV1EventsFinalizedCheckpointV2
	//	*ClientMeta_EthV1EventsChainReorgV2
	//	*ClientMeta_EthV1EventsContributionAndProofV2
	//	*ClientMeta_MempoolTransactionV2
	//	*ClientMeta_EthV2BeaconBlockV2
	//	*ClientMeta_EthV1DebugForkChoiceV2
	//	*ClientMeta_EthV1DebugForkChoiceReorgV2
	//	*ClientMeta_EthV2BeaconBlockAttesterSlashing
	//	*ClientMeta_EthV2BeaconBlockProposerSlashing
	//	*ClientMeta_EthV2BeaconBlockVoluntaryExit
	//	*ClientMeta_EthV2BeaconBlockDeposit
	//	*ClientMeta_EthV2BeaconBlockBlsToExecutionChange
	//	*ClientMeta_EthV2BeaconBlockExecutionTransaction
	//	*ClientMeta_EthV2BeaconBlockWithdrawal
	//	*ClientMeta_EthV1EventsBlobSidecar
	//	*ClientMeta_BlockprintBlockClassification
	//	*ClientMeta_EthV1BeaconBlobSidecar
	//	*ClientMeta_BeaconP2PAttestation
	//	*ClientMeta_EthV1ProposerDuty
	//	*ClientMeta_EthV2BeaconBlockElaboratedAttestation
	//	*ClientMeta_Libp2PTraceAddPeer
	//	*ClientMeta_Libp2PTraceRemovePeer
	//	*ClientMeta_Libp2PTraceRecvRpc
	//	*ClientMeta_Libp2PTraceSendRpc
	//	*ClientMeta_Libp2PTraceJoin
	//	*ClientMeta_Libp2PTraceConnected
	//	*ClientMeta_Libp2PTraceDisconnected
	//	*ClientMeta_Libp2PTraceHandleMetadata
	//	*ClientMeta_Libp2PTraceHandleStatus
	//	*ClientMeta_Libp2PTraceGossipsubBeaconBlock
	//	*ClientMeta_Libp2PTraceGossipsubBeaconAttestation
	//	*ClientMeta_Libp2PTraceGossipsubBlobSidecar
	//	*ClientMeta_EthV1Validators
	AdditionalData isClientMeta_AdditionalData `protobuf_oneof:"AdditionalData"`
}

func (x *ClientMeta) Reset() {
	*x = ClientMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientMeta) ProtoMessage() {}

func (x *ClientMeta) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientMeta.ProtoReflect.Descriptor instead.
func (*ClientMeta) Descriptor() ([]byte, []int) {
	return file_pkg_proto_xatu_event_ingester_proto_rawDescGZIP(), []int{15}
}

func (x *ClientMeta) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClientMeta) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ClientMeta) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ClientMeta) GetImplementation() string {
	if x != nil {
		return x.Implementation
	}
	return ""
}

func (x *ClientMeta) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

func (x *ClientMeta) GetClockDrift() uint64 {
	if x != nil {
		return x.ClockDrift
	}
	return 0
}

func (x *ClientMeta) GetEthereum() *ClientMeta_Ethereum {
	if x != nil {
		return x.Ethereum
	}
	return nil
}

func (x *ClientMeta) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (m *ClientMeta) GetAdditionalData() isClientMeta_AdditionalData {
	if m != nil {
		return m.AdditionalData
	}
	return nil
}

func (x *ClientMeta) GetEthV1EventsAttestation() *ClientMeta_AdditionalEthV1EventsAttestationData {
	if x, ok := x.GetAdditionalData().(*ClientMeta_EthV1EventsAttestation); ok {
		return x.EthV1EventsAttestation
	}
	return nil
}

func (x *ClientMeta) GetEthV1EventsHead() *ClientMeta_AdditionalEthV1EventsHeadData {
	if x, ok := x.GetAdditionalData().(*ClientMeta_EthV1EventsHead); ok {
		return x.EthV1EventsHead
	}
	return nil
}

func (x *ClientMeta) GetEthV1EventsBlock() *ClientMeta_AdditionalEthV1EventsBlockData {
	if x, ok := x.GetAdditionalData().(*ClientMeta_EthV1EventsBlock); ok {
		return x.EthV1EventsBlock
	}
	return nil
}

func (x *ClientMeta) GetEthV1EventsVoluntaryExit() *ClientMeta_AdditionalEthV1EventsVoluntaryExitData {
	if x, ok := x.GetAdditionalData().(*ClientMeta_EthV1EventsVoluntaryExit); ok {
		return x.EthV1EventsVoluntaryExit
	}
	return nil
}

func (x *ClientMeta) GetEthV1EventsFinalizedCheckpoint() *ClientMeta_AdditionalEthV1EventsFinalizedCheckpointData {
	if x, ok := x.GetAdditionalData().(*ClientMeta_EthV1EventsFinalizedCheckpoint); ok {
		return x.EthV1EventsFinalizedCheckpoint
	}
	return nil
}

func (x *ClientMeta) GetEthV1EventsChainReorg() *ClientMeta_AdditionalEthV1EventsChainReorgData {
	if x, ok := x.GetAdditionalData().(*ClientMeta_EthV1EventsChainReorg); ok {
		return x.EthV1EventsChainReorg
	}
	return nil
}

func (x *ClientMeta) GetEthV1EventsContributionAndProof() *ClientMeta_AdditionalEthV1EventsContributionAndProofData {
	if x, ok := x.GetAdditionalData().(*ClientMeta_EthV1EventsContributionAndProof); ok {
		return x.EthV1EventsContributionAndProof
	}
	return nil
}

func (x *ClientMeta) GetMempoolTransaction() *ClientMeta_AdditionalMempoolTransactionData {
	if x, ok := x.GetAdditionalData().(*ClientMeta_MempoolTransaction); ok {
		return x.MempoolTransaction
	}
	return nil
}

func (x *ClientMeta) GetEthV2BeaconBlock() *ClientMeta_AdditionalEthV2BeaconBlockData {
	if x, ok := x.GetAdditionalData().(*ClientMeta_EthV2BeaconBlock); ok {
		return x.EthV2BeaconBlock
	}
	return nil
}

func (x *ClientMeta) GetEthV1DebugForkChoice() *ClientMeta_AdditionalEthV1DebugForkChoiceData {
	if x, ok := x.GetAdditionalData().(*ClientMeta_EthV1DebugForkChoice); ok {
		return x.EthV1DebugForkChoice
	}
	return nil
}

func (x *ClientMeta) GetEthV1DebugForkChoiceReorg() *ClientMeta_AdditionalEthV1DebugForkChoiceReOrgData {
	if x, ok := x.GetAdditionalData().(*ClientMeta_EthV1DebugForkChoiceReorg); ok {
		return x.EthV1DebugForkChoiceReorg
	}
	return nil
}

func (x *ClientMeta) GetEthV1BeaconCommittee() *ClientMeta_AdditionalEthV1BeaconCommitteeData {
	if x, ok := x.GetAdditionalData().(*ClientMeta_EthV1BeaconCommittee); ok {
		return x.EthV1BeaconCommittee
	}
	return nil
}

func (x *ClientMeta) GetEthV1ValidatorAttestationData() *ClientMeta_AdditionalEthV1ValidatorAttestationDataData {
	if x, ok := x.GetAdditionalData().(*ClientMeta_EthV1ValidatorAttestationData); ok {
		return x.EthV1ValidatorAttestationData
	}
	return nil
}

func (x *ClientMeta) GetEthV1EventsAttestationV2() *ClientMeta_AdditionalEthV1EventsAttestationV2Data {
	if x, ok := x.GetAdditionalData().(*ClientMeta_EthV1EventsAttestationV2); ok {
		return x.EthV1EventsAttestationV2
	}
	return nil
}

func (x *ClientMeta) GetEthV1EventsHeadV2() *ClientMeta_AdditionalEthV1EventsHeadV2Data {
	if x, ok := x.GetAdditionalData().(*ClientMeta_EthV1EventsHeadV2); ok {
		return x.EthV1EventsHeadV2
	}
	return nil
}

func (x *ClientMeta) GetEthV1EventsBlockV2() *ClientMeta_AdditionalEthV1EventsBlockV2Data {
	if x, ok := x.GetAdditionalData().(*ClientMeta_EthV1EventsBlockV2); ok {
		return x.EthV1EventsBlockV2
	}
	return nil
}

func (x *ClientMeta) GetEthV1EventsVoluntaryExitV2() *ClientMeta_AdditionalEthV1EventsVoluntaryExitV2Data {
	if x, ok := x.GetAdditionalData().(*ClientMeta_EthV1EventsVoluntaryExitV2); ok {
		return x.EthV1EventsVoluntaryExitV2
	}
	return nil
}

func (x *ClientMeta) GetEthV1EventsFinalizedCheckpointV2() *ClientMeta_AdditionalEthV1EventsFinalizedCheckpointV2Data {
	if x, ok := x.GetAdditionalData().(*ClientMeta_EthV1EventsFinalizedCheckpointV2); ok {
		return x.EthV1EventsFinalizedCheckpointV2
	}
	return nil
}

func (x *ClientMeta) GetEthV1EventsChainReorgV2() *ClientMeta_AdditionalEthV1EventsChainReorgV2Data {
	if x, ok := x.GetAdditionalData().(*ClientMeta_EthV1EventsChainReorgV2); ok {
		return x.EthV1EventsChainReorgV2
	}
	return nil
}

func (x *ClientMeta) GetEthV1EventsContributionAndProofV2() *ClientMeta_AdditionalEthV1EventsContributionAndProofV2Data {
	if x, ok := x.GetAdditionalData().(*ClientMeta_EthV1EventsContributionAndProofV2); ok {
		return x.EthV1EventsContributionAndProofV2
	}
	return nil
}

func (x *ClientMeta) GetMempoolTransactionV2() *ClientMeta_AdditionalMempoolTransactionV2Data {
	if x, ok := x.GetAdditionalData().(*ClientMeta_MempoolTransactionV2); ok {
		return x.MempoolTransactionV2
	}
	return nil
}

func (x *ClientMeta) GetEthV2BeaconBlockV2() *ClientMeta_AdditionalEthV2BeaconBlockV2Data {
	if x, ok := x.GetAdditionalData().(*ClientMeta_EthV2BeaconBlockV2); ok {
		return x.EthV2BeaconBlockV2
	}
	return nil
}

func (x *ClientMeta) GetEthV1DebugForkChoiceV2() *ClientMeta_AdditionalEthV1DebugForkChoiceV2Data {
	if x, ok := x.GetAdditionalData().(*ClientMeta_EthV1DebugForkChoiceV2); ok {
		return x.EthV1DebugForkChoiceV2
	}
	return nil
}

func (x *ClientMeta) GetEthV1DebugForkChoiceReorgV2() *ClientMeta_AdditionalEthV1DebugForkChoiceReOrgV2Data {
	if x, ok := x.GetAdditionalData().(*ClientMeta_EthV1DebugForkChoiceReorgV2); ok {
		return x.EthV1DebugForkChoiceReorgV2
	}
	return nil
}

func (x *ClientMeta) GetEthV2BeaconBlockAttesterSlashing() *ClientMeta_AdditionalEthV2BeaconBlockAttesterSlashingData {
	if x, ok := x.GetAdditionalData().(*ClientMeta_EthV2BeaconBlockAttesterSlashing); ok {
		return x.EthV2BeaconBlockAttesterSlashing
	}
	return nil
}

func (x *ClientMeta) GetEthV2BeaconBlockProposerSlashing() *ClientMeta_AdditionalEthV2BeaconBlockProposerSlashingData {
	if x, ok := x.GetAdditionalData().(*ClientMeta_EthV2BeaconBlockProposerSlashing); ok {
		return x.EthV2BeaconBlockProposerSlashing
	}
	return nil
}

func (x *ClientMeta) GetEthV2BeaconBlockVoluntaryExit() *ClientMeta_AdditionalEthV2BeaconBlockVoluntaryExitData {
	if x, ok := x.GetAdditionalData().(*ClientMeta_EthV2BeaconBlockVoluntaryExit); ok {
		return x.EthV2BeaconBlockVoluntaryExit
	}
	return nil
}

func (x *ClientMeta) GetEthV2BeaconBlockDeposit() *ClientMeta_AdditionalEthV2BeaconBlockDepositData {
	if x, ok := x.GetAdditionalData().(*ClientMeta_EthV2BeaconBlockDeposit); ok {
		return x.EthV2BeaconBlockDeposit
	}
	return nil
}

func (x *ClientMeta) GetEthV2BeaconBlockBlsToExecutionChange() *ClientMeta_AdditionalEthV2BeaconBlockBLSToExecutionChangeData {
	if x, ok := x.GetAdditionalData().(*ClientMeta_EthV2BeaconBlockBlsToExecutionChange); ok {
		return x.EthV2BeaconBlockBlsToExecutionChange
	}
	return nil
}

func (x *ClientMeta) GetEthV2BeaconBlockExecutionTransaction() *ClientMeta_AdditionalEthV2BeaconBlockExecutionTransactionData {
	if x, ok := x.GetAdditionalData().(*ClientMeta_EthV2BeaconBlockExecutionTransaction); ok {
		return x.EthV2BeaconBlockExecutionTransaction
	}
	return nil
}

func (x *ClientMeta) GetEthV2BeaconBlockWithdrawal() *ClientMeta_AdditionalEthV2BeaconBlockWithdrawalData {
	if x, ok := x.GetAdditionalData().(*ClientMeta_EthV2BeaconBlockWithdrawal); ok {
		return x.EthV2BeaconBlockWithdrawal
	}
	return nil
}

func (x *ClientMeta) GetEthV1EventsBlobSidecar() *ClientMeta_AdditionalEthV1EventsBlobSidecarData {
	if x, ok := x.GetAdditionalData().(*ClientMeta_EthV1EventsBlobSidecar); ok {
		return x.EthV1EventsBlobSidecar
	}
	return nil
}

func (x *ClientMeta) GetBlockprintBlockClassification() *ClientMeta_AdditionalBlockprintBlockClassificationData {
	if x, ok := x.GetAdditionalData().(*ClientMeta_BlockprintBlockClassification); ok {
		return x.BlockprintBlockClassification
	}
	return nil
}

func (x *ClientMeta) GetEthV1BeaconBlobSidecar() *ClientMeta_AdditionalEthV1BeaconBlobSidecarData {
	if x, ok := x.GetAdditionalData().(*ClientMeta_EthV1BeaconBlobSidecar); ok {
		return x.EthV1BeaconBlobSidecar
	}
	return nil
}

func (x *ClientMeta) GetBeaconP2PAttestation() *ClientMeta_AdditionalBeaconP2PAttestationData {
	if x, ok := x.GetAdditionalData().(*ClientMeta_BeaconP2PAttestation); ok {
		return x.BeaconP2PAttestation
	}
	return nil
}

func (x *ClientMeta) GetEthV1ProposerDuty() *ClientMeta_AdditionalEthV1ProposerDutyData {
	if x, ok := x.GetAdditionalData().(*ClientMeta_EthV1ProposerDuty); ok {
		return x.EthV1ProposerDuty
	}
	return nil
}

func (x *ClientMeta) GetEthV2BeaconBlockElaboratedAttestation() *ClientMeta_AdditionalEthV2BeaconBlockElaboratedAttestationData {
	if x, ok := x.GetAdditionalData().(*ClientMeta_EthV2BeaconBlockElaboratedAttestation); ok {
		return x.EthV2BeaconBlockElaboratedAttestation
	}
	return nil
}

func (x *ClientMeta) GetLibp2PTraceAddPeer() *ClientMeta_AdditionalLibP2PTraceAddPeerData {
	if x, ok := x.GetAdditionalData().(*ClientMeta_Libp2PTraceAddPeer); ok {
		return x.Libp2PTraceAddPeer
	}
	return nil
}

func (x *ClientMeta) GetLibp2PTraceRemovePeer() *ClientMeta_AdditionalLibP2PTraceRemovePeerData {
	if x, ok := x.GetAdditionalData().(*ClientMeta_Libp2PTraceRemovePeer); ok {
		return x.Libp2PTraceRemovePeer
	}
	return nil
}

func (x *ClientMeta) GetLibp2PTraceRecvRpc() *ClientMeta_AdditionalLibP2PTraceRecvRPCData {
	if x, ok := x.GetAdditionalData().(*ClientMeta_Libp2PTraceRecvRpc); ok {
		return x.Libp2PTraceRecvRpc
	}
	return nil
}

func (x *ClientMeta) GetLibp2PTraceSendRpc() *ClientMeta_AdditionalLibP2PTraceSendRPCData {
	if x, ok := x.GetAdditionalData().(*ClientMeta_Libp2PTraceSendRpc); ok {
		return x.Libp2PTraceSendRpc
	}
	return nil
}

func (x *ClientMeta) GetLibp2PTraceJoin() *ClientMeta_AdditionalLibP2PTraceJoinData {
	if x, ok := x.GetAdditionalData().(*ClientMeta_Libp2PTraceJoin); ok {
		return x.Libp2PTraceJoin
	}
	return nil
}

func (x *ClientMeta) GetLibp2PTraceConnected() *ClientMeta_AdditionalLibP2PTraceConnectedData {
	if x, ok := x.GetAdditionalData().(*ClientMeta_Libp2PTraceConnected); ok {
		return x.Libp2PTraceConnected
	}
	return nil
}

func (x *ClientMeta) GetLibp2PTraceDisconnected() *ClientMeta_AdditionalLibP2PTraceDisconnectedData {
	if x, ok := x.GetAdditionalData().(*ClientMeta_Libp2PTraceDisconnected); ok {
		return x.Libp2PTraceDisconnected
	}
	return nil
}

func (x *ClientMeta) GetLibp2PTraceHandleMetadata() *ClientMeta_AdditionalLibP2PTraceHandleMetadataData {
	if x, ok := x.GetAdditionalData().(*ClientMeta_Libp2PTraceHandleMetadata); ok {
		return x.Libp2PTraceHandleMetadata
	}
	return nil
}

func (x *ClientMeta) GetLibp2PTraceHandleStatus() *ClientMeta_AdditionalLibP2PTraceHandleStatusData {
	if x, ok := x.GetAdditionalData().(*ClientMeta_Libp2PTraceHandleStatus); ok {
		return x.Libp2PTraceHandleStatus
	}
	return nil
}

func (x *ClientMeta) GetLibp2PTraceGossipsubBeaconBlock() *ClientMeta_AdditionalLibP2PTraceGossipSubBeaconBlockData {
	if x, ok := x.GetAdditionalData().(*ClientMeta_Libp2PTraceGossipsubBeaconBlock); ok {
		return x.Libp2PTraceGossipsubBeaconBlock
	}
	return nil
}

func (x *ClientMeta) GetLibp2PTraceGossipsubBeaconAttestation() *ClientMeta_AdditionalLibP2PTraceGossipSubBeaconAttestationData {
	if x, ok := x.GetAdditionalData().(*ClientMeta_Libp2PTraceGossipsubBeaconAttestation); ok {
		return x.Libp2PTraceGossipsubBeaconAttestation
	}
	return nil
}

func (x *ClientMeta) GetLibp2PTraceGossipsubBlobSidecar() *ClientMeta_AdditionalLibP2PTraceGossipSubBlobSidecarData {
	if x, ok := x.GetAdditionalData().(*ClientMeta_Libp2PTraceGossipsubBlobSidecar); ok {
		return x.Libp2PTraceGossipsubBlobSidecar
	}
	return nil
}

func (x *ClientMeta) GetEthV1Validators() *ClientMeta_AdditionalEthV1ValidatorsData {
	if x, ok := x.GetAdditionalData().(*ClientMeta_EthV1Validators); ok {
		return x.EthV1Validators
	}
	return nil
}

type isClientMeta_AdditionalData interface {
	isClientMeta_AdditionalData()
}

type ClientMeta_EthV1EventsAttestation struct {
	// AdditionalEthV1EventsAttestationData contains additional data about an
	// eth v1 attestation event.
	EthV1EventsAttestation *ClientMeta_AdditionalEthV1EventsAttestationData `protobuf:"bytes,10,opt,name=eth_v1_events_attestation,json=BEACON_API_ETH_V1_EVENTS_ATTESTATION,proto3,oneof"`
}

type ClientMeta_EthV1EventsHead struct {
	// AdditionalEthV1EventsHeadData contains additional data about the eth v1
	// head event.
	EthV1EventsHead *ClientMeta_AdditionalEthV1EventsHeadData `protobuf:"bytes,11,opt,name=eth_v1_events_head,json=BEACON_API_ETH_V1_EVENTS_HEAD,proto3,oneof"`
}

type ClientMeta_EthV1EventsBlock struct {
	// AdditionalEthV1EventsBlockData contains additional data about the eth v1
	// block event.
	EthV1EventsBlock *ClientMeta_AdditionalEthV1EventsBlockData `protobuf:"bytes,12,opt,name=eth_v1_events_block,json=BEACON_API_ETH_V1_EVENTS_BLOCK,proto3,oneof"`
}

type ClientMeta_EthV1EventsVoluntaryExit struct {
	// AdditionalEthV1EventsVoluntaryExitData contains additional data about the
	// eth v1 voluntary exit event.
	EthV1EventsVoluntaryExit *ClientMeta_AdditionalEthV1EventsVoluntaryExitData `protobuf:"bytes,13,opt,name=eth_v1_events_voluntary_exit,json=BEACON_API_ETH_V1_EVENTS_VOLUNTARY_EXIT,proto3,oneof"`
}

type ClientMeta_EthV1EventsFinalizedCheckpoint struct {
	// AdditionalEthV1EventsFinalizedCheckpointData contains additional data
	// about the eth v1 finalized checkpoint event.
	EthV1EventsFinalizedCheckpoint *ClientMeta_AdditionalEthV1EventsFinalizedCheckpointData `protobuf:"bytes,14,opt,name=eth_v1_events_finalized_checkpoint,json=BEACON_API_ETH_V1_EVENTS_FINALIZED_CHECKPOINT,proto3,oneof"`
}

type ClientMeta_EthV1EventsChainReorg struct {
	// AdditionalEthV1EventsChainReorgData contains additional data about the
	// eth v1 chain reorg event.
	EthV1EventsChainReorg *ClientMeta_AdditionalEthV1EventsChainReorgData `protobuf:"bytes,15,opt,name=eth_v1_events_chain_reorg,json=BEACON_API_ETH_V1_EVENTS_CHAIN_REORG,proto3,oneof"`
}

type ClientMeta_EthV1EventsContributionAndProof struct {
	// AdditionalEthV1EventsContributionAndProofData contains additional data
	// about the eth v1 contribution and proof.
	EthV1EventsContributionAndProof *ClientMeta_AdditionalEthV1EventsContributionAndProofData `protobuf:"bytes,16,opt,name=eth_v1_events_contribution_and_proof,json=BEACON_API_ETH_V1_EVENTS_CONTRIBUTION_AND_PROOF,proto3,oneof"`
}

type ClientMeta_MempoolTransaction struct {
	// AdditionalMempoolTransactionData contains additional data about the
	// mempool transaction event.
	MempoolTransaction *ClientMeta_AdditionalMempoolTransactionData `protobuf:"bytes,17,opt,name=mempool_transaction,json=MEMPOOL_TRANSACTION,proto3,oneof"`
}

type ClientMeta_EthV2BeaconBlock struct {
	// AdditionalEthV2BeaconBlockData contains additional data about the eth v2
	// beacon block event.
	EthV2BeaconBlock *ClientMeta_AdditionalEthV2BeaconBlockData `protobuf:"bytes,18,opt,name=eth_v2_beacon_block,json=BEACON_API_ETH_V2_BEACON_BLOCK,proto3,oneof"`
}

type ClientMeta_EthV1DebugForkChoice struct {
	// AdditionalEthV1DebugForkChoice contains additional data about the eth v1
	// debug fork choice event.
	EthV1DebugForkChoice *ClientMeta_AdditionalEthV1DebugForkChoiceData `protobuf:"bytes,19,opt,name=eth_v1_debug_fork_choice,json=BEACON_API_ETH_V1_DEBUG_FORK_CHOICE,proto3,oneof"`
}

type ClientMeta_EthV1DebugForkChoiceReorg struct {
	// AdditionalEthV1DebugForkChoiceReorg contains additional data about the
	// eth v1 debug fork choice reorg event.
	EthV1DebugForkChoiceReorg *ClientMeta_AdditionalEthV1DebugForkChoiceReOrgData `protobuf:"bytes,20,opt,name=eth_v1_debug_fork_choice_reorg,json=BEACON_API_ETH_V1_DEBUG_FORK_CHOICE_REORG,proto3,oneof"`
}

type ClientMeta_EthV1BeaconCommittee struct {
	// AdditionalEthV1BeaconCommitteeData contains additional data about the
	// beacon committee
	EthV1BeaconCommittee *ClientMeta_AdditionalEthV1BeaconCommitteeData `protobuf:"bytes,21,opt,name=eth_v1_beacon_committee,json=BEACON_API_ETH_V1_BEACON_COMMITTEE,proto3,oneof"`
}

type ClientMeta_EthV1ValidatorAttestationData struct {
	// AdditionalEthV1ValidatorAttestationDataData contains additional data
	// about the eth v1 validator attestation data
	EthV1ValidatorAttestationData *ClientMeta_AdditionalEthV1ValidatorAttestationDataData `protobuf:"bytes,22,opt,name=eth_v1_validator_attestation_data,json=BEACON_API_ETH_V1_VALIDATOR_ATTESTATION_DATA,proto3,oneof"`
}

type ClientMeta_EthV1EventsAttestationV2 struct {
	// AdditionalEthV1EventsAttestationV2Data contains additional data about an
	// eth v1 attestation event.
	EthV1EventsAttestationV2 *ClientMeta_AdditionalEthV1EventsAttestationV2Data `protobuf:"bytes,24,opt,name=eth_v1_events_attestation_v2,json=BEACON_API_ETH_V1_EVENTS_ATTESTATION_V2,proto3,oneof"`
}

type ClientMeta_EthV1EventsHeadV2 struct {
	// AdditionalEthV1EventsHeadV2Data contains additional data about the eth v1
	// head event.
	EthV1EventsHeadV2 *ClientMeta_AdditionalEthV1EventsHeadV2Data `protobuf:"bytes,25,opt,name=eth_v1_events_head_v2,json=BEACON_API_ETH_V1_EVENTS_HEAD_V2,proto3,oneof"`
}

type ClientMeta_EthV1EventsBlockV2 struct {
	// AdditionalEthV1EventsBlockV2Data contains additional data about the eth
	// v1 block event.
	EthV1EventsBlockV2 *ClientMeta_AdditionalEthV1EventsBlockV2Data `protobuf:"bytes,26,opt,name=eth_v1_events_block_v2,json=BEACON_API_ETH_V1_EVENTS_BLOCK_V2,proto3,oneof"`
}

type ClientMeta_EthV1EventsVoluntaryExitV2 struct {
	// AdditionalEthV1EventsVoluntaryExitV2Data contains additional data about
	// the eth v1 voluntary exit event.
	EthV1EventsVoluntaryExitV2 *ClientMeta_AdditionalEthV1EventsVoluntaryExitV2Data `protobuf:"bytes,27,opt,name=eth_v1_events_voluntary_exit_v2,json=BEACON_API_ETH_V1_EVENTS_VOLUNTARY_EXIT_V2,proto3,oneof"`
}

type ClientMeta_EthV1EventsFinalizedCheckpointV2 struct {
	// AdditionalEthV1EventsFinalizedCheckpointV2Data contains additional data
	// about the eth v1 finalized checkpoint event.
	EthV1EventsFinalizedCheckpointV2 *ClientMeta_AdditionalEthV1EventsFinalizedCheckpointV2Data `protobuf:"bytes,28,opt,name=eth_v1_events_finalized_checkpoint_v2,json=BEACON_API_ETH_V1_EVENTS_FINALIZED_CHECKPOINT_V2,proto3,oneof"`
}

type ClientMeta_EthV1EventsChainReorgV2 struct {
	// AdditionalEthV1EventsChainReorgV2Data contains additional data about the
	// eth v1 chain reorg event.
	EthV1EventsChainReorgV2 *ClientMeta_AdditionalEthV1EventsChainReorgV2Data `protobuf:"bytes,29,opt,name=eth_v1_events_chain_reorg_v2,json=BEACON_API_ETH_V1_EVENTS_CHAIN_REORG_V2,proto3,oneof"`
}

type ClientMeta_EthV1EventsContributionAndProofV2 struct {
	// AdditionalEthV1EventsContributionAndProofV2Data contains additional data
	// about the eth v1 contribution and proof.
	EthV1EventsContributionAndProofV2 *ClientMeta_AdditionalEthV1EventsContributionAndProofV2Data `protobuf:"bytes,30,opt,name=eth_v1_events_contribution_and_proof_v2,json=BEACON_API_ETH_V1_EVENTS_CONTRIBUTION_AND_PROOF_V2,proto3,oneof"`
}

type ClientMeta_MempoolTransactionV2 struct {
	// AdditionalMempoolTransactionV2Data contains additional data about the
	// mempool transaction event.
	MempoolTransactionV2 *ClientMeta_AdditionalMempoolTransactionV2Data `protobuf:"bytes,31,opt,name=mempool_transaction_v2,json=MEMPOOL_TRANSACTION_V2,proto3,oneof"`
}

type ClientMeta_EthV2BeaconBlockV2 struct {
	// AdditionalEthV2BeaconBlockV2Data contains additional data about the eth
	// v2 beacon block event.
	EthV2BeaconBlockV2 *ClientMeta_AdditionalEthV2BeaconBlockV2Data `protobuf:"bytes,32,opt,name=eth_v2_beacon_block_v2,json=BEACON_API_ETH_V2_BEACON_BLOCK_V2,proto3,oneof"`
}

type ClientMeta_EthV1DebugForkChoiceV2 struct {
	// AdditionalEthV1DebugForkChoice contains additional data about the eth v1
	// debug fork choice event.
	EthV1DebugForkChoiceV2 *ClientMeta_AdditionalEthV1DebugForkChoiceV2Data `protobuf:"bytes,33,opt,name=eth_v1_debug_fork_choice_v2,json=BEACON_API_ETH_V1_DEBUG_FORK_CHOICE_V2,proto3,oneof"`
}

type ClientMeta_EthV1DebugForkChoiceReorgV2 struct {
	// AdditionalEthV1DebugForkChoiceReorg contains additional data about the
	// eth v1 debug fork choice reorg event.
	EthV1DebugForkChoiceReorgV2 *ClientMeta_AdditionalEthV1DebugForkChoiceReOrgV2Data `protobuf:"bytes,34,opt,name=eth_v1_debug_fork_choice_reorg_v2,json=BEACON_API_ETH_V1_DEBUG_FORK_CHOICE_REORG_V2,proto3,oneof"`
}

type ClientMeta_EthV2BeaconBlockAttesterSlashing struct {
	// AdditionalEthV2BeaconBlockAttesterSlashingData contains additional data
	// on attester slashings derived from beacon blocks.
	EthV2BeaconBlockAttesterSlashing *ClientMeta_AdditionalEthV2BeaconBlockAttesterSlashingData `protobuf:"bytes,35,opt,name=eth_v2_beacon_block_attester_slashing,json=BEACON_API_ETH_V2_BEACON_BLOCK_ATTESTER_SLASHING,proto3,oneof"`
}

type ClientMeta_EthV2BeaconBlockProposerSlashing struct {
	// AdditionalEthV2BeaconBlockProposerSlashingData contains additional data
	// on proposer slashings derived from beacon blocks.
	EthV2BeaconBlockProposerSlashing *ClientMeta_AdditionalEthV2BeaconBlockProposerSlashingData `protobuf:"bytes,36,opt,name=eth_v2_beacon_block_proposer_slashing,json=BEACON_API_ETH_V2_BEACON_BLOCK_PROPOSER_SLASHING,proto3,oneof"`
}

type ClientMeta_EthV2BeaconBlockVoluntaryExit struct {
	// AdditionalEthV2BeaconBlockVoluntaryExitData contains additional data on
	// voluntary exits derived from beacon blocks.
	EthV2BeaconBlockVoluntaryExit *ClientMeta_AdditionalEthV2BeaconBlockVoluntaryExitData `protobuf:"bytes,37,opt,name=eth_v2_beacon_block_voluntary_exit,json=BEACON_API_ETH_V2_BEACON_BLOCK_VOLUNTARY_EXIT,proto3,oneof"`
}

type ClientMeta_EthV2BeaconBlockDeposit struct {
	// AdditionalEthV2BeaconBlockDepositData contains additional data on
	// deposits derived from beacon blocks.
	EthV2BeaconBlockDeposit *ClientMeta_AdditionalEthV2BeaconBlockDepositData `protobuf:"bytes,38,opt,name=eth_v2_beacon_block_deposit,json=BEACON_API_ETH_V2_BEACON_BLOCK_DEPOSIT,proto3,oneof"`
}

type ClientMeta_EthV2BeaconBlockBlsToExecutionChange struct {
	// AdditionalEthV2BeaconBlockBLSToExecutionChangeData contains additional
	// data on bls to execution changes derived from beacon blocks.
	EthV2BeaconBlockBlsToExecutionChange *ClientMeta_AdditionalEthV2BeaconBlockBLSToExecutionChangeData `protobuf:"bytes,39,opt,name=eth_v2_beacon_block_bls_to_execution_change,json=BEACON_API_ETH_V2_BEACON_BLOCK_BLS_TO_EXECUTION_CHANGE,proto3,oneof"`
}

type ClientMeta_EthV2BeaconBlockExecutionTransaction struct {
	// AdditionalEthV2BeaconBlockExecutionTransactionData contains additional
	// data on execution transactions derived from beacon blocks.
	EthV2BeaconBlockExecutionTransaction *ClientMeta_AdditionalEthV2BeaconBlockExecutionTransactionData `protobuf:"bytes,40,opt,name=eth_v2_beacon_block_execution_transaction,json=BEACON_API_ETH_V2_BEACON_BLOCK_EXECUTION_TRANSACTION,proto3,oneof"`
}

type ClientMeta_EthV2BeaconBlockWithdrawal struct {
	// AdditionalEthV2BeaconBlockWithdrawalData contains additional data on
	// withdrawals derived from beacon blocks.
	EthV2BeaconBlockWithdrawal *ClientMeta_AdditionalEthV2BeaconBlockWithdrawalData `protobuf:"bytes,41,opt,name=eth_v2_beacon_block_withdrawal,json=BEACON_API_ETH_V2_BEACON_BLOCK_WITHDRAWAL,proto3,oneof"`
}

type ClientMeta_EthV1EventsBlobSidecar struct {
	// AdditionalEthV1EventsBlobSidecarData contains additional data about the
	// eth v1 blob sidecar event.
	EthV1EventsBlobSidecar *ClientMeta_AdditionalEthV1EventsBlobSidecarData `protobuf:"bytes,42,opt,name=eth_v1_events_blob_sidecar,json=BEACON_API_ETH_V1_EVENTS_BLOB_SIDECAR,proto3,oneof"`
}

type ClientMeta_BlockprintBlockClassification struct {
	// AdditionalBlockprintBlockClassification contains additional data on
	// blockprint block classifications.
	BlockprintBlockClassification *ClientMeta_AdditionalBlockprintBlockClassificationData `protobuf:"bytes,43,opt,name=blockprint_block_classification,json=BLOCKPRINT_BLOCK_CLASSIFICATION,proto3,oneof"`
}

type ClientMeta_EthV1BeaconBlobSidecar struct {
	// AdditionalEthV1BeaconBlobSidecarData contains additional data on beacon
	// blob sidecars.
	EthV1BeaconBlobSidecar *ClientMeta_AdditionalEthV1BeaconBlobSidecarData `protobuf:"bytes,44,opt,name=eth_v1_beacon_blob_sidecar,json=BEACON_API_ETH_V1_BEACON_BLOB_SIDECAR,proto3,oneof"`
}

type ClientMeta_BeaconP2PAttestation struct {
	// AdditionalBeaconP2PAttestation contains additional data on unvalidated
	// beacon attestations that were received over the p2p network.
	BeaconP2PAttestation *ClientMeta_AdditionalBeaconP2PAttestationData `protobuf:"bytes,45,opt,name=beacon_p2p_attestation,json=BEACON_P2P_ATTESTATION,proto3,oneof"`
}

type ClientMeta_EthV1ProposerDuty struct {
	// AdditionalEthV1ProposerDutyData contains addtional data on proposer
	// duties.
	EthV1ProposerDuty *ClientMeta_AdditionalEthV1ProposerDutyData `protobuf:"bytes,46,opt,name=eth_v1_proposer_duty,json=BEACON_API_ETH_V1_PROPOSER_DUTY,proto3,oneof"`
}

type ClientMeta_EthV2BeaconBlockElaboratedAttestation struct {
	// AdditionalEthV2BeaconBlockElaboratedAttestationData contains additional
	// data on derived attestations derived from beacon blocks.
	EthV2BeaconBlockElaboratedAttestation *ClientMeta_AdditionalEthV2BeaconBlockElaboratedAttestationData `protobuf:"bytes,47,opt,name=eth_v2_beacon_block_elaborated_attestation,json=BEACON_API_ETH_V2_BEACON_BLOCK_ELABORATED_ATTESTATION,proto3,oneof"`
}

type ClientMeta_Libp2PTraceAddPeer struct {
	// AdditionalLibP2PTraceData contains additional data about libp2p traces.
	Libp2PTraceAddPeer *ClientMeta_AdditionalLibP2PTraceAddPeerData `protobuf:"bytes,48,opt,name=libp2p_trace_add_peer,json=LIBP2P_TRACE_ADD_PEER,proto3,oneof"`
}

type ClientMeta_Libp2PTraceRemovePeer struct {
	Libp2PTraceRemovePeer *ClientMeta_AdditionalLibP2PTraceRemovePeerData `protobuf:"bytes,49,opt,name=libp2p_trace_remove_peer,json=LIBP2P_TRACE_REMOVE_PEER,proto3,oneof"`
}

type ClientMeta_Libp2PTraceRecvRpc struct {
	Libp2PTraceRecvRpc *ClientMeta_AdditionalLibP2PTraceRecvRPCData `protobuf:"bytes,50,opt,name=libp2p_trace_recv_rpc,json=LIBP2P_TRACE_RECV_RPC,proto3,oneof"`
}

type ClientMeta_Libp2PTraceSendRpc struct {
	Libp2PTraceSendRpc *ClientMeta_AdditionalLibP2PTraceSendRPCData `protobuf:"bytes,51,opt,name=libp2p_trace_send_rpc,json=LIBP2P_TRACE_SEND_RPC,proto3,oneof"`
}

type ClientMeta_Libp2PTraceJoin struct {
	Libp2PTraceJoin *ClientMeta_AdditionalLibP2PTraceJoinData `protobuf:"bytes,52,opt,name=libp2p_trace_join,json=LIBP2P_TRACE_JOIN,proto3,oneof"`
}

type ClientMeta_Libp2PTraceConnected struct {
	Libp2PTraceConnected *ClientMeta_AdditionalLibP2PTraceConnectedData `protobuf:"bytes,53,opt,name=libp2p_trace_connected,json=LIBP2P_TRACE_CONNECTED,proto3,oneof"`
}

type ClientMeta_Libp2PTraceDisconnected struct {
	Libp2PTraceDisconnected *ClientMeta_AdditionalLibP2PTraceDisconnectedData `protobuf:"bytes,54,opt,name=libp2p_trace_disconnected,json=LIBP2P_TRACE_DISCCONNECTED,proto3,oneof"`
}

type ClientMeta_Libp2PTraceHandleMetadata struct {
	Libp2PTraceHandleMetadata *ClientMeta_AdditionalLibP2PTraceHandleMetadataData `protobuf:"bytes,55,opt,name=libp2p_trace_handle_metadata,json=LIBP2P_TRACE_HANDLE_METADATA,proto3,oneof"`
}

type ClientMeta_Libp2PTraceHandleStatus struct {
	Libp2PTraceHandleStatus *ClientMeta_AdditionalLibP2PTraceHandleStatusData `protobuf:"bytes,56,opt,name=libp2p_trace_handle_status,json=LIBP2P_TRACE_HANDLE_STATUS,proto3,oneof"`
}

type ClientMeta_Libp2PTraceGossipsubBeaconBlock struct {
	// AdditionalLibP2PTraceGossipSubBeaconBlockData contains additional data about the gossip sub beacon block event.
	Libp2PTraceGossipsubBeaconBlock *ClientMeta_AdditionalLibP2PTraceGossipSubBeaconBlockData `protobuf:"bytes,57,opt,name=libp2p_trace_gossipsub_beacon_block,json=LIBP2P_TRACE_GOSSIPSUB_BEACON_BLOCK,proto3,oneof"`
}

type ClientMeta_Libp2PTraceGossipsubBeaconAttestation struct {
	// AdditionalLibP2PTraceGossipSubBeaconAttestationData contains additional data about the gossip sub beacon attestation event.
	Libp2PTraceGossipsubBeaconAttestation *ClientMeta_AdditionalLibP2PTraceGossipSubBeaconAttestationData `protobuf:"bytes,58,opt,name=libp2p_trace_gossipsub_beacon_attestation,json=LIBP2P_TRACE_GOSSIPSUB_BEACON_ATTESTATION,proto3,oneof"`
}

type ClientMeta_Libp2PTraceGossipsubBlobSidecar struct {
	// AdditionalLibP2PTraceGossipSubBlobSidecarData contains additional data about the gossip sub blob sidecar event.
	Libp2PTraceGossipsubBlobSidecar *ClientMeta_AdditionalLibP2PTraceGossipSubBlobSidecarData `protobuf:"bytes,59,opt,name=libp2p_trace_gossipsub_blob_sidecar,json=LIBP2P_TRACE_GOSSIPSUB_BLOB_SIDECAR,proto3,oneof"`
}

type ClientMeta_EthV1Validators struct {
	// AdditionalEthV1ValidatorsData contains additional data about the eth v1 validators.
	EthV1Validators *ClientMeta_AdditionalEthV1ValidatorsData `protobuf:"bytes,60,opt,name=eth_v1_validators,json=BEACON_API_ETH_V1_BEACON_VALIDATORS,proto3,oneof"`
}

func (*ClientMeta_EthV1EventsAttestation) isClientMeta_AdditionalData() {}

func (*ClientMeta_EthV1EventsHead) isClientMeta_AdditionalData() {}

func (*ClientMeta_EthV1EventsBlock) isClientMeta_AdditionalData() {}

func (*ClientMeta_EthV1EventsVoluntaryExit) isClientMeta_AdditionalData() {}

func (*ClientMeta_EthV1EventsFinalizedCheckpoint) isClientMeta_AdditionalData() {}

func (*ClientMeta_EthV1EventsChainReorg) isClientMeta_AdditionalData() {}

func (*ClientMeta_EthV1EventsContributionAndProof) isClientMeta_AdditionalData() {}

func (*ClientMeta_MempoolTransaction) isClientMeta_AdditionalData() {}

func (*ClientMeta_EthV2BeaconBlock) isClientMeta_AdditionalData() {}

func (*ClientMeta_EthV1DebugForkChoice) isClientMeta_AdditionalData() {}

func (*ClientMeta_EthV1DebugForkChoiceReorg) isClientMeta_AdditionalData() {}

func (*ClientMeta_EthV1BeaconCommittee) isClientMeta_AdditionalData() {}

func (*ClientMeta_EthV1ValidatorAttestationData) isClientMeta_AdditionalData() {}

func (*ClientMeta_EthV1EventsAttestationV2) isClientMeta_AdditionalData() {}

func (*ClientMeta_EthV1EventsHeadV2) isClientMeta_AdditionalData() {}

func (*ClientMeta_EthV1EventsBlockV2) isClientMeta_AdditionalData() {}

func (*ClientMeta_EthV1EventsVoluntaryExitV2) isClientMeta_AdditionalData() {}

func (*ClientMeta_EthV1EventsFinalizedCheckpointV2) isClientMeta_AdditionalData() {}

func (*ClientMeta_EthV1EventsChainReorgV2) isClientMeta_AdditionalData() {}

func (*ClientMeta_EthV1EventsContributionAndProofV2) isClientMeta_AdditionalData() {}

func (*ClientMeta_MempoolTransactionV2) isClientMeta_AdditionalData() {}

func (*ClientMeta_EthV2BeaconBlockV2) isClientMeta_AdditionalData() {}

func (*ClientMeta_EthV1DebugForkChoiceV2) isClientMeta_AdditionalData() {}

func (*ClientMeta_EthV1DebugForkChoiceReorgV2) isClientMeta_AdditionalData() {}

func (*ClientMeta_EthV2BeaconBlockAttesterSlashing) isClientMeta_AdditionalData() {}

func (*ClientMeta_EthV2BeaconBlockProposerSlashing) isClientMeta_AdditionalData() {}

func (*ClientMeta_EthV2BeaconBlockVoluntaryExit) isClientMeta_AdditionalData() {}

func (*ClientMeta_EthV2BeaconBlockDeposit) isClientMeta_AdditionalData() {}

func (*ClientMeta_EthV2BeaconBlockBlsToExecutionChange) isClientMeta_AdditionalData() {}

func (*ClientMeta_EthV2BeaconBlockExecutionTransaction) isClientMeta_AdditionalData() {}

func (*ClientMeta_EthV2BeaconBlockWithdrawal) isClientMeta_AdditionalData() {}

func (*ClientMeta_EthV1EventsBlobSidecar) isClientMeta_AdditionalData() {}

func (*ClientMeta_BlockprintBlockClassification) isClientMeta_AdditionalData() {}

func (*ClientMeta_EthV1BeaconBlobSidecar) isClientMeta_AdditionalData() {}

func (*ClientMeta_BeaconP2PAttestation) isClientMeta_AdditionalData() {}

func (*ClientMeta_EthV1ProposerDuty) isClientMeta_AdditionalData() {}

func (*ClientMeta_EthV2BeaconBlockElaboratedAttestation) isClientMeta_AdditionalData() {}

func (*ClientMeta_Libp2PTraceAddPeer) isClientMeta_AdditionalData() {}

func (*ClientMeta_Libp2PTraceRemovePeer) isClientMeta_AdditionalData() {}

func (*ClientMeta_Libp2PTraceRecvRpc) isClientMeta_AdditionalData() {}

func (*ClientMeta_Libp2PTraceSendRpc) isClientMeta_AdditionalData() {}

func (*ClientMeta_Libp2PTraceJoin) isClientMeta_AdditionalData() {}

func (*ClientMeta_Libp2PTraceConnected) isClientMeta_AdditionalData() {}

func (*ClientMeta_Libp2PTraceDisconnected) isClientMeta_AdditionalData() {}

func (*ClientMeta_Libp2PTraceHandleMetadata) isClientMeta_AdditionalData() {}

func (*ClientMeta_Libp2PTraceHandleStatus) isClientMeta_AdditionalData() {}

func (*ClientMeta_Libp2PTraceGossipsubBeaconBlock) isClientMeta_AdditionalData() {}

func (*ClientMeta_Libp2PTraceGossipsubBeaconAttestation) isClientMeta_AdditionalData() {}

func (*ClientMeta_Libp2PTraceGossipsubBlobSidecar) isClientMeta_AdditionalData() {}

func (*ClientMeta_EthV1Validators) isClientMeta_AdditionalData() {}

type ServerMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Event contains information about the event from the server's perspective.
	Event *ServerMeta_Event `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
	// Client contains information about the client from the server's perspective.
	Client *ServerMeta_Client `protobuf:"bytes,2,opt,name=client,proto3" json:"client,omitempty"`
	// AdditionalData contains additional, computed data as set by the server
	// about the event.
	//
	// Types that are assignable to AdditionalData:
	//
	//	*ServerMeta_BEACON_P2P_ATTESTATION
	//	*ServerMeta_LIBP2P_TRACE_CONNECTED
	//	*ServerMeta_LIBP2P_TRACE_DISCONNECTED
	AdditionalData isServerMeta_AdditionalData `protobuf_oneof:"AdditionalData"`
}

func (x *ServerMeta) Reset() {
	*x = ServerMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerMeta) ProtoMessage() {}

func (x *ServerMeta) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerMeta.ProtoReflect.Descriptor instead.
func (*ServerMeta) Descriptor() ([]byte, []int) {
	return file_pkg_proto_xatu_event_ingester_proto_rawDescGZIP(), []int{16}
}

func (x *ServerMeta) GetEvent() *ServerMeta_Event {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *ServerMeta) GetClient() *ServerMeta_Client {
	if x != nil {
		return x.Client
	}
	return nil
}

func (m *ServerMeta) GetAdditionalData() isServerMeta_AdditionalData {
	if m != nil {
		return m.AdditionalData
	}
	return nil
}

func (x *ServerMeta) GetBEACON_P2P_ATTESTATION() *ServerMeta_AdditionalBeaconP2PAttestationData {
	if x, ok := x.GetAdditionalData().(*ServerMeta_BEACON_P2P_ATTESTATION); ok {
		return x.BEACON_P2P_ATTESTATION
	}
	return nil
}

func (x *ServerMeta) GetLIBP2P_TRACE_CONNECTED() *ServerMeta_AdditionalLibp2PTraceConnectedData {
	if x, ok := x.GetAdditionalData().(*ServerMeta_LIBP2P_TRACE_CONNECTED); ok {
		return x.LIBP2P_TRACE_CONNECTED
	}
	return nil
}

func (x *ServerMeta) GetLIBP2P_TRACE_DISCONNECTED() *ServerMeta_AdditionalLibp2PTraceDisconnectedData {
	if x, ok := x.GetAdditionalData().(*ServerMeta_LIBP2P_TRACE_DISCONNECTED); ok {
		return x.LIBP2P_TRACE_DISCONNECTED
	}
	return nil
}

type isServerMeta_AdditionalData interface {
	isServerMeta_AdditionalData()
}

type ServerMeta_BEACON_P2P_ATTESTATION struct {
	// AdditionalBeaconP2PAttestation contains additional data on unvalidated
	// beacon attestations that were received over the p2p network.
	BEACON_P2P_ATTESTATION *ServerMeta_AdditionalBeaconP2PAttestationData `protobuf:"bytes,3,opt,name=BEACON_P2P_ATTESTATION,proto3,oneof"`
}

type ServerMeta_LIBP2P_TRACE_CONNECTED struct {
	// AdditionalLibp2PTraceConnected contains additional data on peer
	// geo location
	LIBP2P_TRACE_CONNECTED *ServerMeta_AdditionalLibp2PTraceConnectedData `protobuf:"bytes,4,opt,name=LIBP2P_TRACE_CONNECTED,proto3,oneof"`
}

type ServerMeta_LIBP2P_TRACE_DISCONNECTED struct {
	// AdditionalLibp2PTraceDisconnected contains additional data on peer
	// geo location
	LIBP2P_TRACE_DISCONNECTED *ServerMeta_AdditionalLibp2PTraceDisconnectedData `protobuf:"bytes,5,opt,name=LIBP2P_TRACE_DISCONNECTED,proto3,oneof"`
}

func (*ServerMeta_BEACON_P2P_ATTESTATION) isServerMeta_AdditionalData() {}

func (*ServerMeta_LIBP2P_TRACE_CONNECTED) isServerMeta_AdditionalData() {}

func (*ServerMeta_LIBP2P_TRACE_DISCONNECTED) isServerMeta_AdditionalData() {}

type Meta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Client contains information about the event that is from the client.
	Client *ClientMeta `protobuf:"bytes,1,opt,name=client,proto3" json:"client,omitempty"`
	// Server contains information about the event that is from the server.
	Server *ServerMeta `protobuf:"bytes,2,opt,name=server,proto3" json:"server,omitempty"`
}

func (x *Meta) Reset() {
	*x = Meta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Meta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Meta) ProtoMessage() {}

func (x *Meta) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Meta.ProtoReflect.Descriptor instead.
func (*Meta) Descriptor() ([]byte, []int) {
	return file_pkg_proto_xatu_event_ingester_proto_rawDescGZIP(), []int{17}
}

func (x *Meta) GetClient() *ClientMeta {
	if x != nil {
		return x.Client
	}
	return nil
}

func (x *Meta) GetServer() *ServerMeta {
	if x != nil {
		return x.Server
	}
	return nil
}

type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name is the name of the event.
	Name Event_Name `protobuf:"varint,1,opt,name=name,proto3,enum=xatu.Event_Name" json:"name,omitempty"`
	// DateTime is the date and time of the event as seen by the client.
	DateTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=date_time,proto3" json:"date_time,omitempty"`
	// ID is the id of the event.
	Id string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_pkg_proto_xatu_event_ingester_proto_rawDescGZIP(), []int{18}
}

func (x *Event) GetName() Event_Name {
	if x != nil {
		return x.Name
	}
	return Event_BEACON_API_ETH_V1_EVENTS_UNKNOWN
}

func (x *Event) GetDateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DateTime
	}
	return nil
}

func (x *Event) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// DecoratedEvent is an event that has been decorated with additional
// information.
type DecoratedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Event *Event `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
	Meta  *Meta  `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// Types that are assignable to Data:
	//
	//	*DecoratedEvent_EthV1EventsAttestation
	//	*DecoratedEvent_EthV1EventsBlock
	//	*DecoratedEvent_EthV1EventsChainReorg
	//	*DecoratedEvent_EthV1EventsFinalizedCheckpoint
	//	*DecoratedEvent_EthV1EventsHead
	//	*DecoratedEvent_EthV1EventsVoluntaryExit
	//	*DecoratedEvent_EthV1EventsContributionAndProof
	//	*DecoratedEvent_MempoolTransaction
	//	*DecoratedEvent_EthV2BeaconBlock
	//	*DecoratedEvent_EthV1ForkChoice
	//	*DecoratedEvent_EthV1ForkChoiceReorg
	//	*DecoratedEvent_EthV1BeaconCommittee
	//	*DecoratedEvent_EthV1ValidatorAttestationData
	//	*DecoratedEvent_EthV1EventsAttestationV2
	//	*DecoratedEvent_EthV1EventsBlockV2
	//	*DecoratedEvent_EthV1EventsChainReorgV2
	//	*DecoratedEvent_EthV1EventsFinalizedCheckpointV2
	//	*DecoratedEvent_EthV1EventsHeadV2
	//	*DecoratedEvent_EthV1EventsVoluntaryExitV2
	//	*DecoratedEvent_EthV1EventsContributionAndProofV2
	//	*DecoratedEvent_MempoolTransactionV2
	//	*DecoratedEvent_EthV2BeaconBlockV2
	//	*DecoratedEvent_EthV1ForkChoiceV2
	//	*DecoratedEvent_EthV1ForkChoiceReorgV2
	//	*DecoratedEvent_EthV2BeaconBlockAttesterSlashing
	//	*DecoratedEvent_EthV2BeaconBlockProposerSlashing
	//	*DecoratedEvent_EthV2BeaconBlockVoluntaryExit
	//	*DecoratedEvent_EthV2BeaconBlockDeposit
	//	*DecoratedEvent_EthV2BeaconBlockBlsToExecutionChange
	//	*DecoratedEvent_EthV2BeaconBlockExecutionTransaction
	//	*DecoratedEvent_EthV2BeaconBlockWithdrawal
	//	*DecoratedEvent_EthV1EventsBlobSidecar
	//	*DecoratedEvent_BlockprintBlockClassification
	//	*DecoratedEvent_EthV1BeaconBlockBlobSidecar
	//	*DecoratedEvent_BeaconP2PAttestation
	//	*DecoratedEvent_EthV1ProposerDuty
	//	*DecoratedEvent_EthV2BeaconBlockElaboratedAttestation
	//	*DecoratedEvent_Libp2PTraceAddPeer
	//	*DecoratedEvent_Libp2PTraceRemovePeer
	//	*DecoratedEvent_Libp2PTraceRecvRpc
	//	*DecoratedEvent_Libp2PTraceSendRpc
	//	*DecoratedEvent_Libp2PTraceJoin
	//	*DecoratedEvent_Libp2PTraceConnected
	//	*DecoratedEvent_Libp2PTraceDisconnected
	//	*DecoratedEvent_Libp2PTraceHandleMetadata
	//	*DecoratedEvent_Libp2PTraceHandleStatus
	//	*DecoratedEvent_Libp2PTraceGossipsubBeaconBlock
	//	*DecoratedEvent_Libp2PTraceGossipsubBeaconAttestation
	//	*DecoratedEvent_Libp2PTraceGossipsubBlobSidecar
	//	*DecoratedEvent_EthV1Validators
	Data isDecoratedEvent_Data `protobuf_oneof:"data"`
}

func (x *DecoratedEvent) Reset() {
	*x = DecoratedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecoratedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecoratedEvent) ProtoMessage() {}

func (x *DecoratedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecoratedEvent.ProtoReflect.Descriptor instead.
func (*DecoratedEvent) Descriptor() ([]byte, []int) {
	return file_pkg_proto_xatu_event_ingester_proto_rawDescGZIP(), []int{19}
}

func (x *DecoratedEvent) GetEvent() *Event {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *DecoratedEvent) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (m *DecoratedEvent) GetData() isDecoratedEvent_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

// Deprecated: Marked as deprecated in pkg/proto/xatu/event_ingester.proto.
func (x *DecoratedEvent) GetEthV1EventsAttestation() *v1.Attestation {
	if x, ok := x.GetData().(*DecoratedEvent_EthV1EventsAttestation); ok {
		return x.EthV1EventsAttestation
	}
	return nil
}

// Deprecated: Marked as deprecated in pkg/proto/xatu/event_ingester.proto.
func (x *DecoratedEvent) GetEthV1EventsBlock() *v1.EventBlock {
	if x, ok := x.GetData().(*DecoratedEvent_EthV1EventsBlock); ok {
		return x.EthV1EventsBlock
	}
	return nil
}

// Deprecated: Marked as deprecated in pkg/proto/xatu/event_ingester.proto.
func (x *DecoratedEvent) GetEthV1EventsChainReorg() *v1.EventChainReorg {
	if x, ok := x.GetData().(*DecoratedEvent_EthV1EventsChainReorg); ok {
		return x.EthV1EventsChainReorg
	}
	return nil
}

// Deprecated: Marked as deprecated in pkg/proto/xatu/event_ingester.proto.
func (x *DecoratedEvent) GetEthV1EventsFinalizedCheckpoint() *v1.EventFinalizedCheckpoint {
	if x, ok := x.GetData().(*DecoratedEvent_EthV1EventsFinalizedCheckpoint); ok {
		return x.EthV1EventsFinalizedCheckpoint
	}
	return nil
}

// Deprecated: Marked as deprecated in pkg/proto/xatu/event_ingester.proto.
func (x *DecoratedEvent) GetEthV1EventsHead() *v1.EventHead {
	if x, ok := x.GetData().(*DecoratedEvent_EthV1EventsHead); ok {
		return x.EthV1EventsHead
	}
	return nil
}

// Deprecated: Marked as deprecated in pkg/proto/xatu/event_ingester.proto.
func (x *DecoratedEvent) GetEthV1EventsVoluntaryExit() *v1.EventVoluntaryExit {
	if x, ok := x.GetData().(*DecoratedEvent_EthV1EventsVoluntaryExit); ok {
		return x.EthV1EventsVoluntaryExit
	}
	return nil
}

// Deprecated: Marked as deprecated in pkg/proto/xatu/event_ingester.proto.
func (x *DecoratedEvent) GetEthV1EventsContributionAndProof() *v1.EventContributionAndProof {
	if x, ok := x.GetData().(*DecoratedEvent_EthV1EventsContributionAndProof); ok {
		return x.EthV1EventsContributionAndProof
	}
	return nil
}

// Deprecated: Marked as deprecated in pkg/proto/xatu/event_ingester.proto.
func (x *DecoratedEvent) GetMempoolTransaction() string {
	if x, ok := x.GetData().(*DecoratedEvent_MempoolTransaction); ok {
		return x.MempoolTransaction
	}
	return ""
}

// Deprecated: Marked as deprecated in pkg/proto/xatu/event_ingester.proto.
func (x *DecoratedEvent) GetEthV2BeaconBlock() *v2.EventBlock {
	if x, ok := x.GetData().(*DecoratedEvent_EthV2BeaconBlock); ok {
		return x.EthV2BeaconBlock
	}
	return nil
}

// Deprecated: Marked as deprecated in pkg/proto/xatu/event_ingester.proto.
func (x *DecoratedEvent) GetEthV1ForkChoice() *v1.ForkChoice {
	if x, ok := x.GetData().(*DecoratedEvent_EthV1ForkChoice); ok {
		return x.EthV1ForkChoice
	}
	return nil
}

// Deprecated: Marked as deprecated in pkg/proto/xatu/event_ingester.proto.
func (x *DecoratedEvent) GetEthV1ForkChoiceReorg() *DebugForkChoiceReorg {
	if x, ok := x.GetData().(*DecoratedEvent_EthV1ForkChoiceReorg); ok {
		return x.EthV1ForkChoiceReorg
	}
	return nil
}

func (x *DecoratedEvent) GetEthV1BeaconCommittee() *v1.Committee {
	if x, ok := x.GetData().(*DecoratedEvent_EthV1BeaconCommittee); ok {
		return x.EthV1BeaconCommittee
	}
	return nil
}

func (x *DecoratedEvent) GetEthV1ValidatorAttestationData() *v1.AttestationDataV2 {
	if x, ok := x.GetData().(*DecoratedEvent_EthV1ValidatorAttestationData); ok {
		return x.EthV1ValidatorAttestationData
	}
	return nil
}

func (x *DecoratedEvent) GetEthV1EventsAttestationV2() *v1.AttestationV2 {
	if x, ok := x.GetData().(*DecoratedEvent_EthV1EventsAttestationV2); ok {
		return x.EthV1EventsAttestationV2
	}
	return nil
}

func (x *DecoratedEvent) GetEthV1EventsBlockV2() *v1.EventBlockV2 {
	if x, ok := x.GetData().(*DecoratedEvent_EthV1EventsBlockV2); ok {
		return x.EthV1EventsBlockV2
	}
	return nil
}

func (x *DecoratedEvent) GetEthV1EventsChainReorgV2() *v1.EventChainReorgV2 {
	if x, ok := x.GetData().(*DecoratedEvent_EthV1EventsChainReorgV2); ok {
		return x.EthV1EventsChainReorgV2
	}
	return nil
}

func (x *DecoratedEvent) GetEthV1EventsFinalizedCheckpointV2() *v1.EventFinalizedCheckpointV2 {
	if x, ok := x.GetData().(*DecoratedEvent_EthV1EventsFinalizedCheckpointV2); ok {
		return x.EthV1EventsFinalizedCheckpointV2
	}
	return nil
}

func (x *DecoratedEvent) GetEthV1EventsHeadV2() *v1.EventHeadV2 {
	if x, ok := x.GetData().(*DecoratedEvent_EthV1EventsHeadV2); ok {
		return x.EthV1EventsHeadV2
	}
	return nil
}

func (x *DecoratedEvent) GetEthV1EventsVoluntaryExitV2() *v1.EventVoluntaryExitV2 {
	if x, ok := x.GetData().(*DecoratedEvent_EthV1EventsVoluntaryExitV2); ok {
		return x.EthV1EventsVoluntaryExitV2
	}
	return nil
}

func (x *DecoratedEvent) GetEthV1EventsContributionAndProofV2() *v1.EventContributionAndProofV2 {
	if x, ok := x.GetData().(*DecoratedEvent_EthV1EventsContributionAndProofV2); ok {
		return x.EthV1EventsContributionAndProofV2
	}
	return nil
}

func (x *DecoratedEvent) GetMempoolTransactionV2() string {
	if x, ok := x.GetData().(*DecoratedEvent_MempoolTransactionV2); ok {
		return x.MempoolTransactionV2
	}
	return ""
}

func (x *DecoratedEvent) GetEthV2BeaconBlockV2() *v2.EventBlockV2 {
	if x, ok := x.GetData().(*DecoratedEvent_EthV2BeaconBlockV2); ok {
		return x.EthV2BeaconBlockV2
	}
	return nil
}

func (x *DecoratedEvent) GetEthV1ForkChoiceV2() *v1.ForkChoiceV2 {
	if x, ok := x.GetData().(*DecoratedEvent_EthV1ForkChoiceV2); ok {
		return x.EthV1ForkChoiceV2
	}
	return nil
}

func (x *DecoratedEvent) GetEthV1ForkChoiceReorgV2() *DebugForkChoiceReorgV2 {
	if x, ok := x.GetData().(*DecoratedEvent_EthV1ForkChoiceReorgV2); ok {
		return x.EthV1ForkChoiceReorgV2
	}
	return nil
}

func (x *DecoratedEvent) GetEthV2BeaconBlockAttesterSlashing() *v1.AttesterSlashingV2 {
	if x, ok := x.GetData().(*DecoratedEvent_EthV2BeaconBlockAttesterSlashing); ok {
		return x.EthV2BeaconBlockAttesterSlashing
	}
	return nil
}

func (x *DecoratedEvent) GetEthV2BeaconBlockProposerSlashing() *v1.ProposerSlashingV2 {
	if x, ok := x.GetData().(*DecoratedEvent_EthV2BeaconBlockProposerSlashing); ok {
		return x.EthV2BeaconBlockProposerSlashing
	}
	return nil
}

func (x *DecoratedEvent) GetEthV2BeaconBlockVoluntaryExit() *v1.SignedVoluntaryExitV2 {
	if x, ok := x.GetData().(*DecoratedEvent_EthV2BeaconBlockVoluntaryExit); ok {
		return x.EthV2BeaconBlockVoluntaryExit
	}
	return nil
}

func (x *DecoratedEvent) GetEthV2BeaconBlockDeposit() *v1.DepositV2 {
	if x, ok := x.GetData().(*DecoratedEvent_EthV2BeaconBlockDeposit); ok {
		return x.EthV2BeaconBlockDeposit
	}
	return nil
}

func (x *DecoratedEvent) GetEthV2BeaconBlockBlsToExecutionChange() *v2.SignedBLSToExecutionChangeV2 {
	if x, ok := x.GetData().(*DecoratedEvent_EthV2BeaconBlockBlsToExecutionChange); ok {
		return x.EthV2BeaconBlockBlsToExecutionChange
	}
	return nil
}

func (x *DecoratedEvent) GetEthV2BeaconBlockExecutionTransaction() *v1.Transaction {
	if x, ok := x.GetData().(*DecoratedEvent_EthV2BeaconBlockExecutionTransaction); ok {
		return x.EthV2BeaconBlockExecutionTransaction
	}
	return nil
}

func (x *DecoratedEvent) GetEthV2BeaconBlockWithdrawal() *v1.WithdrawalV2 {
	if x, ok := x.GetData().(*DecoratedEvent_EthV2BeaconBlockWithdrawal); ok {
		return x.EthV2BeaconBlockWithdrawal
	}
	return nil
}

func (x *DecoratedEvent) GetEthV1EventsBlobSidecar() *v1.EventBlobSidecar {
	if x, ok := x.GetData().(*DecoratedEvent_EthV1EventsBlobSidecar); ok {
		return x.EthV1EventsBlobSidecar
	}
	return nil
}

func (x *DecoratedEvent) GetBlockprintBlockClassification() *blockprint.BlockClassification {
	if x, ok := x.GetData().(*DecoratedEvent_BlockprintBlockClassification); ok {
		return x.BlockprintBlockClassification
	}
	return nil
}

func (x *DecoratedEvent) GetEthV1BeaconBlockBlobSidecar() *v1.BlobSidecar {
	if x, ok := x.GetData().(*DecoratedEvent_EthV1BeaconBlockBlobSidecar); ok {
		return x.EthV1BeaconBlockBlobSidecar
	}
	return nil
}

func (x *DecoratedEvent) GetBeaconP2PAttestation() *v1.AttestationV2 {
	if x, ok := x.GetData().(*DecoratedEvent_BeaconP2PAttestation); ok {
		return x.BeaconP2PAttestation
	}
	return nil
}

func (x *DecoratedEvent) GetEthV1ProposerDuty() *v1.ProposerDuty {
	if x, ok := x.GetData().(*DecoratedEvent_EthV1ProposerDuty); ok {
		return x.EthV1ProposerDuty
	}
	return nil
}

func (x *DecoratedEvent) GetEthV2BeaconBlockElaboratedAttestation() *v1.ElaboratedAttestation {
	if x, ok := x.GetData().(*DecoratedEvent_EthV2BeaconBlockElaboratedAttestation); ok {
		return x.EthV2BeaconBlockElaboratedAttestation
	}
	return nil
}

func (x *DecoratedEvent) GetLibp2PTraceAddPeer() *libp2p.AddPeer {
	if x, ok := x.GetData().(*DecoratedEvent_Libp2PTraceAddPeer); ok {
		return x.Libp2PTraceAddPeer
	}
	return nil
}

func (x *DecoratedEvent) GetLibp2PTraceRemovePeer() *libp2p.RemovePeer {
	if x, ok := x.GetData().(*DecoratedEvent_Libp2PTraceRemovePeer); ok {
		return x.Libp2PTraceRemovePeer
	}
	return nil
}

func (x *DecoratedEvent) GetLibp2PTraceRecvRpc() *libp2p.RecvRPC {
	if x, ok := x.GetData().(*DecoratedEvent_Libp2PTraceRecvRpc); ok {
		return x.Libp2PTraceRecvRpc
	}
	return nil
}

func (x *DecoratedEvent) GetLibp2PTraceSendRpc() *libp2p.SendRPC {
	if x, ok := x.GetData().(*DecoratedEvent_Libp2PTraceSendRpc); ok {
		return x.Libp2PTraceSendRpc
	}
	return nil
}

func (x *DecoratedEvent) GetLibp2PTraceJoin() *libp2p.Join {
	if x, ok := x.GetData().(*DecoratedEvent_Libp2PTraceJoin); ok {
		return x.Libp2PTraceJoin
	}
	return nil
}

func (x *DecoratedEvent) GetLibp2PTraceConnected() *libp2p.Connected {
	if x, ok := x.GetData().(*DecoratedEvent_Libp2PTraceConnected); ok {
		return x.Libp2PTraceConnected
	}
	return nil
}

func (x *DecoratedEvent) GetLibp2PTraceDisconnected() *libp2p.Disconnected {
	if x, ok := x.GetData().(*DecoratedEvent_Libp2PTraceDisconnected); ok {
		return x.Libp2PTraceDisconnected
	}
	return nil
}

func (x *DecoratedEvent) GetLibp2PTraceHandleMetadata() *libp2p.HandleMetadata {
	if x, ok := x.GetData().(*DecoratedEvent_Libp2PTraceHandleMetadata); ok {
		return x.Libp2PTraceHandleMetadata
	}
	return nil
}

func (x *DecoratedEvent) GetLibp2PTraceHandleStatus() *libp2p.HandleStatus {
	if x, ok := x.GetData().(*DecoratedEvent_Libp2PTraceHandleStatus); ok {
		return x.Libp2PTraceHandleStatus
	}
	return nil
}

func (x *DecoratedEvent) GetLibp2PTraceGossipsubBeaconBlock() *gossipsub.BeaconBlock {
	if x, ok := x.GetData().(*DecoratedEvent_Libp2PTraceGossipsubBeaconBlock); ok {
		return x.Libp2PTraceGossipsubBeaconBlock
	}
	return nil
}

func (x *DecoratedEvent) GetLibp2PTraceGossipsubBeaconAttestation() *v1.Attestation {
	if x, ok := x.GetData().(*DecoratedEvent_Libp2PTraceGossipsubBeaconAttestation); ok {
		return x.Libp2PTraceGossipsubBeaconAttestation
	}
	return nil
}

func (x *DecoratedEvent) GetLibp2PTraceGossipsubBlobSidecar() *gossipsub.BlobSidecar {
	if x, ok := x.GetData().(*DecoratedEvent_Libp2PTraceGossipsubBlobSidecar); ok {
		return x.Libp2PTraceGossipsubBlobSidecar
	}
	return nil
}

func (x *DecoratedEvent) GetEthV1Validators() *Validators {
	if x, ok := x.GetData().(*DecoratedEvent_EthV1Validators); ok {
		return x.EthV1Validators
	}
	return nil
}

type isDecoratedEvent_Data interface {
	isDecoratedEvent_Data()
}

type DecoratedEvent_EthV1EventsAttestation struct {
	// Deprecated: Marked as deprecated in pkg/proto/xatu/event_ingester.proto.
	EthV1EventsAttestation *v1.Attestation `protobuf:"bytes,3,opt,name=eth_v1_events_attestation,json=BEACON_API_ETH_V1_EVENTS_ATTESTATION,proto3,oneof"`
}

type DecoratedEvent_EthV1EventsBlock struct {
	// Deprecated: Marked as deprecated in pkg/proto/xatu/event_ingester.proto.
	EthV1EventsBlock *v1.EventBlock `protobuf:"bytes,4,opt,name=eth_v1_events_block,json=BEACON_API_ETH_V1_EVENTS_BLOCK,proto3,oneof"`
}

type DecoratedEvent_EthV1EventsChainReorg struct {
	// Deprecated: Marked as deprecated in pkg/proto/xatu/event_ingester.proto.
	EthV1EventsChainReorg *v1.EventChainReorg `protobuf:"bytes,5,opt,name=eth_v1_events_chain_reorg,json=BEACON_API_ETH_V1_EVENTS_CHAIN_REORG,proto3,oneof"`
}

type DecoratedEvent_EthV1EventsFinalizedCheckpoint struct {
	// Deprecated: Marked as deprecated in pkg/proto/xatu/event_ingester.proto.
	EthV1EventsFinalizedCheckpoint *v1.EventFinalizedCheckpoint `protobuf:"bytes,6,opt,name=eth_v1_events_finalized_checkpoint,json=BEACON_API_ETH_V1_EVENTS_FINALIZED_CHECKPOINT,proto3,oneof"`
}

type DecoratedEvent_EthV1EventsHead struct {
	// Deprecated: Marked as deprecated in pkg/proto/xatu/event_ingester.proto.
	EthV1EventsHead *v1.EventHead `protobuf:"bytes,7,opt,name=eth_v1_events_head,json=BEACON_API_ETH_V1_EVENTS_HEAD,proto3,oneof"`
}

type DecoratedEvent_EthV1EventsVoluntaryExit struct {
	// Deprecated: Marked as deprecated in pkg/proto/xatu/event_ingester.proto.
	EthV1EventsVoluntaryExit *v1.EventVoluntaryExit `protobuf:"bytes,8,opt,name=eth_v1_events_voluntary_exit,json=BEACON_API_ETH_V1_EVENTS_VOLUNTARY_EXIT,proto3,oneof"`
}

type DecoratedEvent_EthV1EventsContributionAndProof struct {
	// Deprecated: Marked as deprecated in pkg/proto/xatu/event_ingester.proto.
	EthV1EventsContributionAndProof *v1.EventContributionAndProof `protobuf:"bytes,9,opt,name=eth_v1_events_contribution_and_proof,json=BEACON_API_ETH_V1_EVENTS_CONTRIBUTION_AND_PROOF,proto3,oneof"`
}

type DecoratedEvent_MempoolTransaction struct {
	// Deprecated: Marked as deprecated in pkg/proto/xatu/event_ingester.proto.
	MempoolTransaction string `protobuf:"bytes,10,opt,name=mempool_transaction,json=MEMPOOL_TRANSACTION,proto3,oneof"`
}

type DecoratedEvent_EthV2BeaconBlock struct {
	// Deprecated: Marked as deprecated in pkg/proto/xatu/event_ingester.proto.
	EthV2BeaconBlock *v2.EventBlock `protobuf:"bytes,11,opt,name=eth_v2_beacon_block,json=BEACON_API_ETH_V2_BEACON_BLOCK,proto3,oneof"`
}

type DecoratedEvent_EthV1ForkChoice struct {
	// Deprecated: Marked as deprecated in pkg/proto/xatu/event_ingester.proto.
	EthV1ForkChoice *v1.ForkChoice `protobuf:"bytes,12,opt,name=eth_v1_fork_choice,json=BEACON_API_ETH_V1_DEBUG_FORK_CHOICE,proto3,oneof"`
}

type DecoratedEvent_EthV1ForkChoiceReorg struct {
	// Deprecated: Marked as deprecated in pkg/proto/xatu/event_ingester.proto.
	EthV1ForkChoiceReorg *DebugForkChoiceReorg `protobuf:"bytes,13,opt,name=eth_v1_fork_choice_reorg,json=BEACON_API_ETH_V1_DEBUG_FORK_CHOICE_REORG,proto3,oneof"`
}

type DecoratedEvent_EthV1BeaconCommittee struct {
	EthV1BeaconCommittee *v1.Committee `protobuf:"bytes,14,opt,name=eth_v1_beacon_committee,json=BEACON_API_ETH_V1_BEACON_COMMITTEE,proto3,oneof"`
}

type DecoratedEvent_EthV1ValidatorAttestationData struct {
	EthV1ValidatorAttestationData *v1.AttestationDataV2 `protobuf:"bytes,15,opt,name=eth_v1_validator_attestation_data,json=BEACON_API_ETH_V1_VALIDATOR_ATTESTATION_DATA,proto3,oneof"`
}

type DecoratedEvent_EthV1EventsAttestationV2 struct {
	EthV1EventsAttestationV2 *v1.AttestationV2 `protobuf:"bytes,16,opt,name=eth_v1_events_attestation_v2,json=BEACON_API_ETH_V1_EVENTS_ATTESTATION_V2,proto3,oneof"`
}

type DecoratedEvent_EthV1EventsBlockV2 struct {
	EthV1EventsBlockV2 *v1.EventBlockV2 `protobuf:"bytes,17,opt,name=eth_v1_events_block_v2,json=BEACON_API_ETH_V1_EVENTS_BLOCK_V2,proto3,oneof"`
}

type DecoratedEvent_EthV1EventsChainReorgV2 struct {
	EthV1EventsChainReorgV2 *v1.EventChainReorgV2 `protobuf:"bytes,18,opt,name=eth_v1_events_chain_reorg_v2,json=BEACON_API_ETH_V1_EVENTS_CHAIN_REORG_V2,proto3,oneof"`
}

type DecoratedEvent_EthV1EventsFinalizedCheckpointV2 struct {
	EthV1EventsFinalizedCheckpointV2 *v1.EventFinalizedCheckpointV2 `protobuf:"bytes,19,opt,name=eth_v1_events_finalized_checkpoint_v2,json=BEACON_API_ETH_V1_EVENTS_FINALIZED_CHECKPOINT_V2,proto3,oneof"`
}

type DecoratedEvent_EthV1EventsHeadV2 struct {
	EthV1EventsHeadV2 *v1.EventHeadV2 `protobuf:"bytes,20,opt,name=eth_v1_events_head_v2,json=BEACON_API_ETH_V1_EVENTS_HEAD_V2,proto3,oneof"`
}

type DecoratedEvent_EthV1EventsVoluntaryExitV2 struct {
	EthV1EventsVoluntaryExitV2 *v1.EventVoluntaryExitV2 `protobuf:"bytes,21,opt,name=eth_v1_events_voluntary_exit_v2,json=BEACON_API_ETH_V1_EVENTS_VOLUNTARY_EXIT_V2,proto3,oneof"`
}

type DecoratedEvent_EthV1EventsContributionAndProofV2 struct {
	EthV1EventsContributionAndProofV2 *v1.EventContributionAndProofV2 `protobuf:"bytes,22,opt,name=eth_v1_events_contribution_and_proof_v2,json=BEACON_API_ETH_V1_EVENTS_CONTRIBUTION_AND_PROOF_V2,proto3,oneof"`
}

type DecoratedEvent_MempoolTransactionV2 struct {
	MempoolTransactionV2 string `protobuf:"bytes,23,opt,name=mempool_transaction_v2,json=MEMPOOL_TRANSACTION_V2,proto3,oneof"`
}

type DecoratedEvent_EthV2BeaconBlockV2 struct {
	EthV2BeaconBlockV2 *v2.EventBlockV2 `protobuf:"bytes,24,opt,name=eth_v2_beacon_block_v2,json=BEACON_API_ETH_V2_BEACON_BLOCK_V2,proto3,oneof"`
}

type DecoratedEvent_EthV1ForkChoiceV2 struct {
	EthV1ForkChoiceV2 *v1.ForkChoiceV2 `protobuf:"bytes,25,opt,name=eth_v1_fork_choice_v2,json=BEACON_API_ETH_V1_DEBUG_FORK_CHOICE_V2,proto3,oneof"`
}

type DecoratedEvent_EthV1ForkChoiceReorgV2 struct {
	EthV1ForkChoiceReorgV2 *DebugForkChoiceReorgV2 `protobuf:"bytes,26,opt,name=eth_v1_fork_choice_reorg_v2,json=BEACON_API_ETH_V1_DEBUG_FORK_CHOICE_REORG_V2,proto3,oneof"`
}

type DecoratedEvent_EthV2BeaconBlockAttesterSlashing struct {
	EthV2BeaconBlockAttesterSlashing *v1.AttesterSlashingV2 `protobuf:"bytes,27,opt,name=eth_v2_beacon_block_attester_slashing,json=BEACON_API_ETH_V2_BEACON_BLOCK_ATTESTER_SLASHING,proto3,oneof"`
}

type DecoratedEvent_EthV2BeaconBlockProposerSlashing struct {
	EthV2BeaconBlockProposerSlashing *v1.ProposerSlashingV2 `protobuf:"bytes,28,opt,name=eth_v2_beacon_block_proposer_slashing,json=BEACON_API_ETH_V2_BEACON_BLOCK_PROPOSER_SLASHING,proto3,oneof"`
}

type DecoratedEvent_EthV2BeaconBlockVoluntaryExit struct {
	EthV2BeaconBlockVoluntaryExit *v1.SignedVoluntaryExitV2 `protobuf:"bytes,29,opt,name=eth_v2_beacon_block_voluntary_exit,json=BEACON_API_ETH_V2_BEACON_BLOCK_VOLUNTARY_EXIT,proto3,oneof"`
}

type DecoratedEvent_EthV2BeaconBlockDeposit struct {
	EthV2BeaconBlockDeposit *v1.DepositV2 `protobuf:"bytes,30,opt,name=eth_v2_beacon_block_deposit,json=BEACON_API_ETH_V2_BEACON_BLOCK_DEPOSIT,proto3,oneof"`
}

type DecoratedEvent_EthV2BeaconBlockBlsToExecutionChange struct {
	EthV2BeaconBlockBlsToExecutionChange *v2.SignedBLSToExecutionChangeV2 `protobuf:"bytes,31,opt,name=eth_v2_beacon_block_bls_to_execution_change,json=BEACON_API_ETH_V2_BEACON_BLOCK_BLS_TO_EXECUTION_CHANGE,proto3,oneof"`
}

type DecoratedEvent_EthV2BeaconBlockExecutionTransaction struct {
	EthV2BeaconBlockExecutionTransaction *v1.Transaction `protobuf:"bytes,32,opt,name=eth_v2_beacon_block_execution_transaction,json=BEACON_API_ETH_V2_BEACON_BLOCK_EXECUTION_TRANSACTION,proto3,oneof"`
}

type DecoratedEvent_EthV2BeaconBlockWithdrawal struct {
	EthV2BeaconBlockWithdrawal *v1.WithdrawalV2 `protobuf:"bytes,33,opt,name=eth_v2_beacon_block_withdrawal,json=BEACON_API_ETH_V2_BEACON_BLOCK_WITHDRAWAL,proto3,oneof"`
}

type DecoratedEvent_EthV1EventsBlobSidecar struct {
	EthV1EventsBlobSidecar *v1.EventBlobSidecar `protobuf:"bytes,34,opt,name=eth_v1_events_blob_sidecar,json=BEACON_API_ETH_V1_EVENTS_BLOB_SIDECAR,proto3,oneof"`
}

type DecoratedEvent_BlockprintBlockClassification struct {
	BlockprintBlockClassification *blockprint.BlockClassification `protobuf:"bytes,35,opt,name=blockprint_block_classification,json=BLOCKPRINT_BLOCK_CLASSIFICATION,proto3,oneof"`
}

type DecoratedEvent_EthV1BeaconBlockBlobSidecar struct {
	EthV1BeaconBlockBlobSidecar *v1.BlobSidecar `protobuf:"bytes,36,opt,name=eth_v1_beacon_block_blob_sidecar,json=BEACON_API_ETH_V1_BEACON_BLOB_SIDECAR,proto3,oneof"`
}

type DecoratedEvent_BeaconP2PAttestation struct {
	BeaconP2PAttestation *v1.AttestationV2 `protobuf:"bytes,37,opt,name=beacon_p2p_attestation,json=BEACON_P2P_ATTESTATION,proto3,oneof"`
}

type DecoratedEvent_EthV1ProposerDuty struct {
	EthV1ProposerDuty *v1.ProposerDuty `protobuf:"bytes,38,opt,name=eth_v1_proposer_duty,json=BEACON_API_ETH_V1_PROPOSER_DUTY,proto3,oneof"`
}

type DecoratedEvent_EthV2BeaconBlockElaboratedAttestation struct {
	EthV2BeaconBlockElaboratedAttestation *v1.ElaboratedAttestation `protobuf:"bytes,39,opt,name=eth_v2_beacon_block_elaborated_attestation,json=BEACON_API_ETH_V2_BEACON_BLOCK_ELABORATED_ATTESTATION,proto3,oneof"`
}

type DecoratedEvent_Libp2PTraceAddPeer struct {
	Libp2PTraceAddPeer *libp2p.AddPeer `protobuf:"bytes,40,opt,name=libp2p_trace_add_peer,json=LIBP2P_TRACE_ADD_PEER,proto3,oneof"`
}

type DecoratedEvent_Libp2PTraceRemovePeer struct {
	Libp2PTraceRemovePeer *libp2p.RemovePeer `protobuf:"bytes,41,opt,name=libp2p_trace_remove_peer,json=LIBP2P_TRACE_REMOVE_PEER,proto3,oneof"`
}

type DecoratedEvent_Libp2PTraceRecvRpc struct {
	Libp2PTraceRecvRpc *libp2p.RecvRPC `protobuf:"bytes,42,opt,name=libp2p_trace_recv_rpc,json=LIBP2P_TRACE_RECV_RPC,proto3,oneof"`
}

type DecoratedEvent_Libp2PTraceSendRpc struct {
	Libp2PTraceSendRpc *libp2p.SendRPC `protobuf:"bytes,43,opt,name=libp2p_trace_send_rpc,json=LIBP2P_TRACE_SEND_RPC,proto3,oneof"`
}

type DecoratedEvent_Libp2PTraceJoin struct {
	Libp2PTraceJoin *libp2p.Join `protobuf:"bytes,44,opt,name=libp2p_trace_join,json=LIBP2P_TRACE_JOIN,proto3,oneof"`
}

type DecoratedEvent_Libp2PTraceConnected struct {
	Libp2PTraceConnected *libp2p.Connected `protobuf:"bytes,45,opt,name=libp2p_trace_connected,json=LIBP2P_TRACE_CONNECTED,proto3,oneof"`
}

type DecoratedEvent_Libp2PTraceDisconnected struct {
	Libp2PTraceDisconnected *libp2p.Disconnected `protobuf:"bytes,46,opt,name=libp2p_trace_disconnected,json=LIBP2P_TRACE_DISCONNECTED,proto3,oneof"`
}

type DecoratedEvent_Libp2PTraceHandleMetadata struct {
	Libp2PTraceHandleMetadata *libp2p.HandleMetadata `protobuf:"bytes,47,opt,name=libp2p_trace_handle_metadata,json=LIBP2P_TRACE_HANDLE_METADATA,proto3,oneof"`
}

type DecoratedEvent_Libp2PTraceHandleStatus struct {
	Libp2PTraceHandleStatus *libp2p.HandleStatus `protobuf:"bytes,48,opt,name=libp2p_trace_handle_status,json=LIBP2P_TRACE_HANDLE_STATUS,proto3,oneof"`
}

type DecoratedEvent_Libp2PTraceGossipsubBeaconBlock struct {
	Libp2PTraceGossipsubBeaconBlock *gossipsub.BeaconBlock `protobuf:"bytes,49,opt,name=libp2p_trace_gossipsub_beacon_block,json=LIBP2P_TRACE_GOSSIPSUB_BEACON_BLOCK,proto3,oneof"`
}

type DecoratedEvent_Libp2PTraceGossipsubBeaconAttestation struct {
	Libp2PTraceGossipsubBeaconAttestation *v1.Attestation `protobuf:"bytes,50,opt,name=libp2p_trace_gossipsub_beacon_attestation,json=LIBP2P_TRACE_GOSSIPSUB_BEACON_ATTESTATION,proto3,oneof"`
}

type DecoratedEvent_Libp2PTraceGossipsubBlobSidecar struct {
	Libp2PTraceGossipsubBlobSidecar *gossipsub.BlobSidecar `protobuf:"bytes,51,opt,name=libp2p_trace_gossipsub_blob_sidecar,json=LIBP2P_TRACE_GOSSIPSUB_BLOB_SIDECAR,proto3,oneof"`
}

type DecoratedEvent_EthV1Validators struct {
	EthV1Validators *Validators `protobuf:"bytes,52,opt,name=eth_v1_validators,json=BEACON_API_ETH_V1_BEACON_VALIDATORS,proto3,oneof"`
}

func (*DecoratedEvent_EthV1EventsAttestation) isDecoratedEvent_Data() {}

func (*DecoratedEvent_EthV1EventsBlock) isDecoratedEvent_Data() {}

func (*DecoratedEvent_EthV1EventsChainReorg) isDecoratedEvent_Data() {}

func (*DecoratedEvent_EthV1EventsFinalizedCheckpoint) isDecoratedEvent_Data() {}

func (*DecoratedEvent_EthV1EventsHead) isDecoratedEvent_Data() {}

func (*DecoratedEvent_EthV1EventsVoluntaryExit) isDecoratedEvent_Data() {}

func (*DecoratedEvent_EthV1EventsContributionAndProof) isDecoratedEvent_Data() {}

func (*DecoratedEvent_MempoolTransaction) isDecoratedEvent_Data() {}

func (*DecoratedEvent_EthV2BeaconBlock) isDecoratedEvent_Data() {}

func (*DecoratedEvent_EthV1ForkChoice) isDecoratedEvent_Data() {}

func (*DecoratedEvent_EthV1ForkChoiceReorg) isDecoratedEvent_Data() {}

func (*DecoratedEvent_EthV1BeaconCommittee) isDecoratedEvent_Data() {}

func (*DecoratedEvent_EthV1ValidatorAttestationData) isDecoratedEvent_Data() {}

func (*DecoratedEvent_EthV1EventsAttestationV2) isDecoratedEvent_Data() {}

func (*DecoratedEvent_EthV1EventsBlockV2) isDecoratedEvent_Data() {}

func (*DecoratedEvent_EthV1EventsChainReorgV2) isDecoratedEvent_Data() {}

func (*DecoratedEvent_EthV1EventsFinalizedCheckpointV2) isDecoratedEvent_Data() {}

func (*DecoratedEvent_EthV1EventsHeadV2) isDecoratedEvent_Data() {}

func (*DecoratedEvent_EthV1EventsVoluntaryExitV2) isDecoratedEvent_Data() {}

func (*DecoratedEvent_EthV1EventsContributionAndProofV2) isDecoratedEvent_Data() {}

func (*DecoratedEvent_MempoolTransactionV2) isDecoratedEvent_Data() {}

func (*DecoratedEvent_EthV2BeaconBlockV2) isDecoratedEvent_Data() {}

func (*DecoratedEvent_EthV1ForkChoiceV2) isDecoratedEvent_Data() {}

func (*DecoratedEvent_EthV1ForkChoiceReorgV2) isDecoratedEvent_Data() {}

func (*DecoratedEvent_EthV2BeaconBlockAttesterSlashing) isDecoratedEvent_Data() {}

func (*DecoratedEvent_EthV2BeaconBlockProposerSlashing) isDecoratedEvent_Data() {}

func (*DecoratedEvent_EthV2BeaconBlockVoluntaryExit) isDecoratedEvent_Data() {}

func (*DecoratedEvent_EthV2BeaconBlockDeposit) isDecoratedEvent_Data() {}

func (*DecoratedEvent_EthV2BeaconBlockBlsToExecutionChange) isDecoratedEvent_Data() {}

func (*DecoratedEvent_EthV2BeaconBlockExecutionTransaction) isDecoratedEvent_Data() {}

func (*DecoratedEvent_EthV2BeaconBlockWithdrawal) isDecoratedEvent_Data() {}

func (*DecoratedEvent_EthV1EventsBlobSidecar) isDecoratedEvent_Data() {}

func (*DecoratedEvent_BlockprintBlockClassification) isDecoratedEvent_Data() {}

func (*DecoratedEvent_EthV1BeaconBlockBlobSidecar) isDecoratedEvent_Data() {}

func (*DecoratedEvent_BeaconP2PAttestation) isDecoratedEvent_Data() {}

func (*DecoratedEvent_EthV1ProposerDuty) isDecoratedEvent_Data() {}

func (*DecoratedEvent_EthV2BeaconBlockElaboratedAttestation) isDecoratedEvent_Data() {}

func (*DecoratedEvent_Libp2PTraceAddPeer) isDecoratedEvent_Data() {}

func (*DecoratedEvent_Libp2PTraceRemovePeer) isDecoratedEvent_Data() {}

func (*DecoratedEvent_Libp2PTraceRecvRpc) isDecoratedEvent_Data() {}

func (*DecoratedEvent_Libp2PTraceSendRpc) isDecoratedEvent_Data() {}

func (*DecoratedEvent_Libp2PTraceJoin) isDecoratedEvent_Data() {}

func (*DecoratedEvent_Libp2PTraceConnected) isDecoratedEvent_Data() {}

func (*DecoratedEvent_Libp2PTraceDisconnected) isDecoratedEvent_Data() {}

func (*DecoratedEvent_Libp2PTraceHandleMetadata) isDecoratedEvent_Data() {}

func (*DecoratedEvent_Libp2PTraceHandleStatus) isDecoratedEvent_Data() {}

func (*DecoratedEvent_Libp2PTraceGossipsubBeaconBlock) isDecoratedEvent_Data() {}

func (*DecoratedEvent_Libp2PTraceGossipsubBeaconAttestation) isDecoratedEvent_Data() {}

func (*DecoratedEvent_Libp2PTraceGossipsubBlobSidecar) isDecoratedEvent_Data() {}

func (*DecoratedEvent_EthV1Validators) isDecoratedEvent_Data() {}

type ClientMeta_Ethereum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Network contains information about the network.
	Network *ClientMeta_Ethereum_Network `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`
	// ExecutionClient is the name of the execution client.
	Execution *ClientMeta_Ethereum_Execution `protobuf:"bytes,2,opt,name=execution,proto3" json:"execution,omitempty"`
	// ConsensusClient is the name of the consensus client.
	Consensus *ClientMeta_Ethereum_Consensus `protobuf:"bytes,3,opt,name=consensus,proto3" json:"consensus,omitempty"`
}

func (x *ClientMeta_Ethereum) Reset() {
	*x = ClientMeta_Ethereum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientMeta_Ethereum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientMeta_Ethereum) ProtoMessage() {}

func (x *ClientMeta_Ethereum) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientMeta_Ethereum.ProtoReflect.Descriptor instead.
func (*ClientMeta_Ethereum) Descriptor() ([]byte, []int) {
	return file_pkg_proto_xatu_event_ingester_proto_rawDescGZIP(), []int{15, 0}
}

func (x *ClientMeta_Ethereum) GetNetwork() *ClientMeta_Ethereum_Network {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *ClientMeta_Ethereum) GetExecution() *ClientMeta_Ethereum_Execution {
	if x != nil {
		return x.Execution
	}
	return nil
}

func (x *ClientMeta_Ethereum) GetConsensus() *ClientMeta_Ethereum_Consensus {
	if x != nil {
		return x.Consensus
	}
	return nil
}

type ClientMeta_AdditionalEthV1AttestationSourceData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Epoch contains the epoch information for the source.
	Epoch *Epoch `protobuf:"bytes,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
}

func (x *ClientMeta_AdditionalEthV1AttestationSourceData) Reset() {
	*x = ClientMeta_AdditionalEthV1AttestationSourceData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientMeta_AdditionalEthV1AttestationSourceData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientMeta_AdditionalEthV1AttestationSourceData) ProtoMessage() {}

func (x *ClientMeta_AdditionalEthV1AttestationSourceData) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientMeta_AdditionalEthV1AttestationSourceData.ProtoReflect.Descriptor instead.
func (*ClientMeta_AdditionalEthV1AttestationSourceData) Descriptor() ([]byte, []int) {
	return file_pkg_proto_xatu_event_ingester_proto_rawDescGZIP(), []int{15, 2}
}

func (x *ClientMeta_AdditionalEthV1AttestationSourceData) GetEpoch() *Epoch {
	if x != nil {
		return x.Epoch
	}
	return nil
}

type ClientMeta_AdditionalEthV1AttestationSourceV2Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Epoch contains the epoch information for the source.
	Epoch *EpochV2 `protobuf:"bytes,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
}

func (x *ClientMeta_AdditionalEthV1AttestationSourceV2Data) Reset() {
	*x = ClientMeta_AdditionalEthV1AttestationSourceV2Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientMeta_AdditionalEthV1AttestationSourceV2Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientMeta_AdditionalEthV1AttestationSourceV2Data) ProtoMessage() {}

func (x *ClientMeta_AdditionalEthV1AttestationSourceV2Data) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientMeta_AdditionalEthV1AttestationSourceV2Data.ProtoReflect.Descriptor instead.
func (*ClientMeta_AdditionalEthV1AttestationSourceV2Data) Descriptor() ([]byte, []int) {
	return file_pkg_proto_xatu_event_ingester_proto_rawDescGZIP(), []int{15, 3}
}

func (x *ClientMeta_AdditionalEthV1AttestationSourceV2Data) GetEpoch() *EpochV2 {
	if x != nil {
		return x.Epoch
	}
	return nil
}

type ClientMeta_AdditionalEthV1AttestationTargetData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Epoch contains the epoch information for the source.
	Epoch *Epoch `protobuf:"bytes,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
}

func (x *ClientMeta_AdditionalEthV1AttestationTargetData) Reset() {
	*x = ClientMeta_AdditionalEthV1AttestationTargetData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientMeta_AdditionalEthV1AttestationTargetData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientMeta_AdditionalEthV1AttestationTargetData) ProtoMessage() {}

func (x *ClientMeta_AdditionalEthV1AttestationTargetData) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientMeta_AdditionalEthV1AttestationTargetData.ProtoReflect.Descriptor instead.
func (*ClientMeta_AdditionalEthV1AttestationTargetData) Descriptor() ([]byte, []int) {
	return file_pkg_proto_xatu_event_ingester_proto_rawDescGZIP(), []int{15, 4}
}

func (x *ClientMeta_AdditionalEthV1AttestationTargetData) GetEpoch() *Epoch {
	if x != nil {
		return x.Epoch
	}
	return nil
}

type ClientMeta_AdditionalEthV1AttestationTargetV2Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Epoch contains the epoch information for the source.
	Epoch *EpochV2 `protobuf:"bytes,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
}

func (x *ClientMeta_AdditionalEthV1AttestationTargetV2Data) Reset() {
	*x = ClientMeta_AdditionalEthV1AttestationTargetV2Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientMeta_AdditionalEthV1AttestationTargetV2Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientMeta_AdditionalEthV1AttestationTargetV2Data) ProtoMessage() {}

func (x *ClientMeta_AdditionalEthV1AttestationTargetV2Data) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientMeta_AdditionalEthV1AttestationTargetV2Data.ProtoReflect.Descriptor instead.
func (*ClientMeta_AdditionalEthV1AttestationTargetV2Data) Descriptor() ([]byte, []int) {
	return file_pkg_proto_xatu_event_ingester_proto_rawDescGZIP(), []int{15, 5}
}

func (x *ClientMeta_AdditionalEthV1AttestationTargetV2Data) GetEpoch() *EpochV2 {
	if x != nil {
		return x.Epoch
	}
	return nil
}

type ClientMeta_AdditionalEthV1EventsAttestationData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Source contains information for the best currently justified checkpoint.
	Source *ClientMeta_AdditionalEthV1AttestationSourceData `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	// Target contains information of the block at the start of the current
	// epoch.
	Target *ClientMeta_AdditionalEthV1AttestationTargetData `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
	// Slot contains the slot information for the attestation.
	Slot *Slot `protobuf:"bytes,3,opt,name=slot,proto3" json:"slot,omitempty"`
	// Epoch contains the epoch information for the attestation.
	Epoch *Epoch `protobuf:"bytes,4,opt,name=epoch,proto3" json:"epoch,omitempty"`
	// Propagation contains information about the propagation of the
	// attestation.
	Propagation *Propagation `protobuf:"bytes,5,opt,name=propagation,proto3" json:"propagation,omitempty"`
	// AttestingValidator contains data about the validator that created the
	// attestation. Note: only available for unaggregated attestations.
	AttestingValidator *AttestingValidator `protobuf:"bytes,6,opt,name=attesting_validator,proto3" json:"attesting_validator,omitempty"`
}

func (x *ClientMeta_AdditionalEthV1EventsAttestationData) Reset() {
	*x = ClientMeta_AdditionalEthV1EventsAttestationData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientMeta_AdditionalEthV1EventsAttestationData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientMeta_AdditionalEthV1EventsAttestationData) ProtoMessage() {}

func (x *ClientMeta_AdditionalEthV1EventsAttestationData) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientMeta_AdditionalEthV1EventsAttestationData.ProtoReflect.Descriptor instead.
func (*ClientMeta_AdditionalEthV1EventsAttestationData) Descriptor() ([]byte, []int) {
	return file_pkg_proto_xatu_event_ingester_proto_rawDescGZIP(), []int{15, 6}
}

func (x *ClientMeta_AdditionalEthV1EventsAttestationData) GetSource() *ClientMeta_AdditionalEthV1AttestationSourceData {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *ClientMeta_AdditionalEthV1EventsAttestationData) GetTarget() *ClientMeta_AdditionalEthV1AttestationTargetData {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *ClientMeta_AdditionalEthV1EventsAttestationData) GetSlot() *Slot {
	if x != nil {
		return x.Slot
	}
	return nil
}

func (x *ClientMeta_AdditionalEthV1EventsAttestationData) GetEpoch() *Epoch {
	if x != nil {
		return x.Epoch
	}
	return nil
}

func (x *ClientMeta_AdditionalEthV1EventsAttestationData) GetPropagation() *Propagation {
	if x != nil {
		return x.Propagation
	}
	return nil
}

func (x *ClientMeta_AdditionalEthV1EventsAttestationData) GetAttestingValidator() *AttestingValidator {
	if x != nil {
		return x.AttestingValidator
	}
	return nil
}

type ClientMeta_AdditionalEthV1EventsAttestationV2Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Source contains information for the best currently justified checkpoint.
	Source *ClientMeta_AdditionalEthV1AttestationSourceV2Data `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	// Target contains information of the block at the start of the current
	// epoch.
	Target *ClientMeta_AdditionalEthV1AttestationTargetV2Data `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
	// Slot contains the slot information for the attestation.
	Slot *SlotV2 `protobuf:"bytes,3,opt,name=slot,proto3" json:"slot,omitempty"`
	// Epoch contains the epoch information for the attestation.
	Epoch *EpochV2 `protobuf:"bytes,4,opt,name=epoch,proto3" json:"epoch,omitempty"`
	// Propagation contains information about the propagation of the
	// attestation.
	Propagation *PropagationV2 `protobuf:"bytes,5,opt,name=propagation,proto3" json:"propagation,omitempty"`
	// AttestingValidator contains data about the validator that created the
	// attestation. Note: only available for unaggregated attestations.
	AttestingValidator *AttestingValidatorV2 `protobuf:"bytes,6,opt,name=attesting_validator,proto3" json:"attesting_validator,omitempty"`
}

func (x *ClientMeta_AdditionalEthV1EventsAttestationV2Data) Reset() {
	*x = ClientMeta_AdditionalEthV1EventsAttestationV2Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientMeta_AdditionalEthV1EventsAttestationV2Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientMeta_AdditionalEthV1EventsAttestationV2Data) ProtoMessage() {}

func (x *ClientMeta_AdditionalEthV1EventsAttestationV2Data) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientMeta_AdditionalEthV1EventsAttestationV2Data.ProtoReflect.Descriptor instead.
func (*ClientMeta_AdditionalEthV1EventsAttestationV2Data) Descriptor() ([]byte, []int) {
	return file_pkg_proto_xatu_event_ingester_proto_rawDescGZIP(), []int{15, 7}
}

func (x *ClientMeta_AdditionalEthV1EventsAttestationV2Data) GetSource() *ClientMeta_AdditionalEthV1AttestationSourceV2Data {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *ClientMeta_AdditionalEthV1EventsAttestationV2Data) GetTarget() *ClientMeta_AdditionalEthV1AttestationTargetV2Data {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *ClientMeta_AdditionalEthV1EventsAttestationV2Data) GetSlot() *SlotV2 {
	if x != nil {
		return x.Slot
	}
	return nil
}

func (x *ClientMeta_AdditionalEthV1EventsAttestationV2Data) GetEpoch() *EpochV2 {
	if x != nil {
		return x.Epoch
	}
	return nil
}

func (x *ClientMeta_AdditionalEthV1EventsAttestationV2Data) GetPropagation() *PropagationV2 {
	if x != nil {
		return x.Propagation
	}
	return nil
}

func (x *ClientMeta_AdditionalEthV1EventsAttestationV2Data) GetAttestingValidator() *AttestingValidatorV2 {
	if x != nil {
		return x.AttestingValidator
	}
	return nil
}

type ClientMeta_AdditionalEthV1EventsHeadData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Epoch contains the epoch information for the head.
	Epoch *Epoch `protobuf:"bytes,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	// Slot contains the slot information for the head event.
	Slot *Slot `protobuf:"bytes,2,opt,name=slot,proto3" json:"slot,omitempty"`
	// Propagation contains information about the propagation of the head.
	Propagation *Propagation `protobuf:"bytes,3,opt,name=propagation,proto3" json:"propagation,omitempty"`
}

func (x *ClientMeta_AdditionalEthV1EventsHeadData) Reset() {
	*x = ClientMeta_AdditionalEthV1EventsHeadData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientMeta_AdditionalEthV1EventsHeadData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientMeta_AdditionalEthV1EventsHeadData) ProtoMessage() {}

func (x *ClientMeta_AdditionalEthV1EventsHeadData) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientMeta_AdditionalEthV1EventsHeadData.ProtoReflect.Descriptor instead.
func (*ClientMeta_AdditionalEthV1EventsHeadData) Descriptor() ([]byte, []int) {
	return file_pkg_proto_xatu_event_ingester_proto_rawDescGZIP(), []int{15, 8}
}

func (x *ClientMeta_AdditionalEthV1EventsHeadData) GetEpoch() *Epoch {
	if x != nil {
		return x.Epoch
	}
	return nil
}

func (x *ClientMeta_AdditionalEthV1EventsHeadData) GetSlot() *Slot {
	if x != nil {
		return x.Slot
	}
	return nil
}

func (x *ClientMeta_AdditionalEthV1EventsHeadData) GetPropagation() *Propagation {
	if x != nil {
		return x.Propagation
	}
	return nil
}

type ClientMeta_AdditionalEthV1EventsHeadV2Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Epoch contains the epoch information for the head.
	Epoch *EpochV2 `protobuf:"bytes,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	// Slot contains the slot information for the head event.
	Slot *SlotV2 `protobuf:"bytes,2,opt,name=slot,proto3" json:"slot,omitempty"`
	// Propagation contains information about the propagation of the head.
	Propagation *PropagationV2 `protobuf:"bytes,3,opt,name=propagation,proto3" json:"propagation,omitempty"`
}

func (x *ClientMeta_AdditionalEthV1EventsHeadV2Data) Reset() {
	*x = ClientMeta_AdditionalEthV1EventsHeadV2Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientMeta_AdditionalEthV1EventsHeadV2Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientMeta_AdditionalEthV1EventsHeadV2Data) ProtoMessage() {}

func (x *ClientMeta_AdditionalEthV1EventsHeadV2Data) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientMeta_AdditionalEthV1EventsHeadV2Data.ProtoReflect.Descriptor instead.
func (*ClientMeta_AdditionalEthV1EventsHeadV2Data) Descriptor() ([]byte, []int) {
	return file_pkg_proto_xatu_event_ingester_proto_rawDescGZIP(), []int{15, 9}
}

func (x *ClientMeta_AdditionalEthV1EventsHeadV2Data) GetEpoch() *EpochV2 {
	if x != nil {
		return x.Epoch
	}
	return nil
}

func (x *ClientMeta_AdditionalEthV1EventsHeadV2Data) GetSlot() *SlotV2 {
	if x != nil {
		return x.Slot
	}
	return nil
}

func (x *ClientMeta_AdditionalEthV1EventsHeadV2Data) GetPropagation() *PropagationV2 {
	if x != nil {
		return x.Propagation
	}
	return nil
}

type ClientMeta_AdditionalEthV1EventsBlockData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Epoch contains the epoch information for the block.
	Epoch *Epoch `protobuf:"bytes,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	// Slot contains the slot information for the block.
	Slot *Slot `protobuf:"bytes,2,opt,name=slot,proto3" json:"slot,omitempty"`
	// Propagation contains information about the propagation of the block.
	Propagation *Propagation `protobuf:"bytes,3,opt,name=propagation,proto3" json:"propagation,omitempty"`
}

func (x *ClientMeta_AdditionalEthV1EventsBlockData) Reset() {
	*x = ClientMeta_AdditionalEthV1EventsBlockData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientMeta_AdditionalEthV1EventsBlockData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientMeta_AdditionalEthV1EventsBlockData) ProtoMessage() {}

func (x *ClientMeta_AdditionalEthV1EventsBlockData) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientMeta_AdditionalEthV1EventsBlockData.ProtoReflect.Descriptor instead.
func (*ClientMeta_AdditionalEthV1EventsBlockData) Descriptor() ([]byte, []int) {
	return file_pkg_proto_xatu_event_ingester_proto_rawDescGZIP(), []int{15, 10}
}

func (x *ClientMeta_AdditionalEthV1EventsBlockData) GetEpoch() *Epoch {
	if x != nil {
		return x.Epoch
	}
	return nil
}

func (x *ClientMeta_AdditionalEthV1EventsBlockData) GetSlot() *Slot {
	if x != nil {
		return x.Slot
	}
	return nil
}

func (x *ClientMeta_AdditionalEthV1EventsBlockData) GetPropagation() *Propagation {
	if x != nil {
		return x.Propagation
	}
	return nil
}

type ClientMeta_AdditionalEthV1EventsBlockV2Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Epoch contains the epoch information for the block.
	Epoch *EpochV2 `protobuf:"bytes,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	// Slot contains the slot information for the block.
	Slot *SlotV2 `protobuf:"bytes,2,opt,name=slot,proto3" json:"slot,omitempty"`
	// Propagation contains information about the propagation of the block.
	Propagation *PropagationV2 `protobuf:"bytes,3,opt,name=propagation,proto3" json:"propagation,omitempty"`
}

func (x *ClientMeta_AdditionalEthV1EventsBlockV2Data) Reset() {
	*x = ClientMeta_AdditionalEthV1EventsBlockV2Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientMeta_AdditionalEthV1EventsBlockV2Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientMeta_AdditionalEthV1EventsBlockV2Data) ProtoMessage() {}

func (x *ClientMeta_AdditionalEthV1EventsBlockV2Data) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientMeta_AdditionalEthV1EventsBlockV2Data.ProtoReflect.Descriptor instead.
func (*ClientMeta_AdditionalEthV1EventsBlockV2Data) Descriptor() ([]byte, []int) {
	return file_pkg_proto_xatu_event_ingester_proto_rawDescGZIP(), []int{15, 11}
}

func (x *ClientMeta_AdditionalEthV1EventsBlockV2Data) GetEpoch() *EpochV2 {
	if x != nil {
		return x.Epoch
	}
	return nil
}

func (x *ClientMeta_AdditionalEthV1EventsBlockV2Data) GetSlot() *SlotV2 {
	if x != nil {
		return x.Slot
	}
	return nil
}

func (x *ClientMeta_AdditionalEthV1EventsBlockV2Data) GetPropagation() *PropagationV2 {
	if x != nil {
		return x.Propagation
	}
	return nil
}

type ClientMeta_AdditionalEthV1EventsVoluntaryExitData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Epoch contains the epoch information for the voluntary exit.
	Epoch *Epoch `protobuf:"bytes,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
}

func (x *ClientMeta_AdditionalEthV1EventsVoluntaryExitData) Reset() {
	*x = ClientMeta_AdditionalEthV1EventsVoluntaryExitData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientMeta_AdditionalEthV1EventsVoluntaryExitData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientMeta_AdditionalEthV1EventsVoluntaryExitData) ProtoMessage() {}

func (x *ClientMeta_AdditionalEthV1EventsVoluntaryExitData) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientMeta_AdditionalEthV1EventsVoluntaryExitData.ProtoReflect.Descriptor instead.
func (*ClientMeta_AdditionalEthV1EventsVoluntaryExitData) Descriptor() ([]byte, []int) {
	return file_pkg_proto_xatu_event_ingester_proto_rawDescGZIP(), []int{15, 12}
}

func (x *ClientMeta_AdditionalEthV1EventsVoluntaryExitData) GetEpoch() *Epoch {
	if x != nil {
		return x.Epoch
	}
	return nil
}

type ClientMeta_AdditionalEthV1EventsVoluntaryExitV2Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Epoch contains the epoch information for the voluntary exit.
	Epoch *EpochV2 `protobuf:"bytes,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
}

func (x *ClientMeta_AdditionalEthV1EventsVoluntaryExitV2Data) Reset() {
	*x = ClientMeta_AdditionalEthV1EventsVoluntaryExitV2Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientMeta_AdditionalEthV1EventsVoluntaryExitV2Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientMeta_AdditionalEthV1EventsVoluntaryExitV2Data) ProtoMessage() {}

func (x *ClientMeta_AdditionalEthV1EventsVoluntaryExitV2Data) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientMeta_AdditionalEthV1EventsVoluntaryExitV2Data.ProtoReflect.Descriptor instead.
func (*ClientMeta_AdditionalEthV1EventsVoluntaryExitV2Data) Descriptor() ([]byte, []int) {
	return file_pkg_proto_xatu_event_ingester_proto_rawDescGZIP(), []int{15, 13}
}

func (x *ClientMeta_AdditionalEthV1EventsVoluntaryExitV2Data) GetEpoch() *EpochV2 {
	if x != nil {
		return x.Epoch
	}
	return nil
}

type ClientMeta_AdditionalEthV1EventsFinalizedCheckpointData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Epoch contains the epoch information for the finalized checkpoint.
	Epoch *Epoch `protobuf:"bytes,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
}

func (x *ClientMeta_AdditionalEthV1EventsFinalizedCheckpointData) Reset() {
	*x = ClientMeta_AdditionalEthV1EventsFinalizedCheckpointData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientMeta_AdditionalEthV1EventsFinalizedCheckpointData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientMeta_AdditionalEthV1EventsFinalizedCheckpointData) ProtoMessage() {}

func (x *ClientMeta_AdditionalEthV1EventsFinalizedCheckpointData) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientMeta_AdditionalEthV1EventsFinalizedCheckpointData.ProtoReflect.Descriptor instead.
func (*ClientMeta_AdditionalEthV1EventsFinalizedCheckpointData) Descriptor() ([]byte, []int) {
	return file_pkg_proto_xatu_event_ingester_proto_rawDescGZIP(), []int{15, 14}
}

func (x *ClientMeta_AdditionalEthV1EventsFinalizedCheckpointData) GetEpoch() *Epoch {
	if x != nil {
		return x.Epoch
	}
	return nil
}

type ClientMeta_AdditionalEthV1EventsFinalizedCheckpointV2Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Epoch contains the epoch information for the finalized checkpoint.
	Epoch *EpochV2 `protobuf:"bytes,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
}

func (x *ClientMeta_AdditionalEthV1EventsFinalizedCheckpointV2Data) Reset() {
	*x = ClientMeta_AdditionalEthV1EventsFinalizedCheckpointV2Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientMeta_AdditionalEthV1EventsFinalizedCheckpointV2Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientMeta_AdditionalEthV1EventsFinalizedCheckpointV2Data) ProtoMessage() {}

func (x *ClientMeta_AdditionalEthV1EventsFinalizedCheckpointV2Data) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientMeta_AdditionalEthV1EventsFinalizedCheckpointV2Data.ProtoReflect.Descriptor instead.
func (*ClientMeta_AdditionalEthV1EventsFinalizedCheckpointV2Data) Descriptor() ([]byte, []int) {
	return file_pkg_proto_xatu_event_ingester_proto_rawDescGZIP(), []int{15, 15}
}

func (x *ClientMeta_AdditionalEthV1EventsFinalizedCheckpointV2Data) GetEpoch() *EpochV2 {
	if x != nil {
		return x.Epoch
	}
	return nil
}

type ClientMeta_AdditionalEthV1EventsChainReorgData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Epoch contains the epoch information for the chain reorg.
	Epoch *Epoch `protobuf:"bytes,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	// Slot contains the slot information for the chain reorg.
	Slot *Slot `protobuf:"bytes,2,opt,name=slot,proto3" json:"slot,omitempty"`
	// Propagation contains information about the propagation of the chain
	// reorg.
	Propagation *Propagation `protobuf:"bytes,3,opt,name=propagation,proto3" json:"propagation,omitempty"`
}

func (x *ClientMeta_AdditionalEthV1EventsChainReorgData) Reset() {
	*x = ClientMeta_AdditionalEthV1EventsChainReorgData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientMeta_AdditionalEthV1EventsChainReorgData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientMeta_AdditionalEthV1EventsChainReorgData) ProtoMessage() {}

func (x *ClientMeta_AdditionalEthV1EventsChainReorgData) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientMeta_AdditionalEthV1EventsChainReorgData.ProtoReflect.Descriptor instead.
func (*ClientMeta_AdditionalEthV1EventsChainReorgData) Descriptor() ([]byte, []int) {
	return file_pkg_proto_xatu_event_ingester_proto_rawDescGZIP(), []int{15, 16}
}

func (x *ClientMeta_AdditionalEthV1EventsChainReorgData) GetEpoch() *Epoch {
	if x != nil {
		return x.Epoch
	}
	return nil
}

func (x *ClientMeta_AdditionalEthV1EventsChainReorgData) GetSlot() *Slot {
	if x != nil {
		return x.Slot
	}
	return nil
}

func (x *ClientMeta_AdditionalEthV1EventsChainReorgData) GetPropagation() *Propagation {
	if x != nil {
		return x.Propagation
	}
	return nil
}

type ClientMeta_AdditionalEthV1EventsChainReorgV2Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Epoch contains the epoch information for the chain reorg.
	Epoch *EpochV2 `protobuf:"bytes,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	// Slot contains the slot information for the chain reorg.
	Slot *SlotV2 `protobuf:"bytes,2,opt,name=slot,proto3" json:"slot,omitempty"`
	// Propagation contains information about the propagation of the chain
	// reorg.
	Propagation *PropagationV2 `protobuf:"bytes,3,opt,name=propagation,proto3" json:"propagation,omitempty"`
}

func (x *ClientMeta_AdditionalEthV1EventsChainReorgV2Data) Reset() {
	*x = ClientMeta_AdditionalEthV1EventsChainReorgV2Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientMeta_AdditionalEthV1EventsChainReorgV2Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientMeta_AdditionalEthV1EventsChainReorgV2Data) ProtoMessage() {}

func (x *ClientMeta_AdditionalEthV1EventsChainReorgV2Data) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientMeta_AdditionalEthV1EventsChainReorgV2Data.ProtoReflect.Descriptor instead.
func (*ClientMeta_AdditionalEthV1EventsChainReorgV2Data) Descriptor() ([]byte, []int) {
	return file_pkg_proto_xatu_event_ingester_proto_rawDescGZIP(), []int{15, 17}
}

func (x *ClientMeta_AdditionalEthV1EventsChainReorgV2Data) GetEpoch() *EpochV2 {
	if x != nil {
		return x.Epoch
	}
	return nil
}

func (x *ClientMeta_AdditionalEthV1EventsChainReorgV2Data) GetSlot() *SlotV2 {
	if x != nil {
		return x.Slot
	}
	return nil
}

func (x *ClientMeta_AdditionalEthV1EventsChainReorgV2Data) GetPropagation() *PropagationV2 {
	if x != nil {
		return x.Propagation
	}
	return nil
}

type ClientMeta_AdditionalEthV1EventsContributionAndProofContributionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Epoch contains the epoch information for the contribution and proof.
	Epoch *Epoch `protobuf:"bytes,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	// Slot contains the slot information for the contribution and proof.
	Slot *Slot `protobuf:"bytes,2,opt,name=slot,proto3" json:"slot,omitempty"`
	// Propagation contains information about the propagation of the
	// contribution and proof.
	Propagation *Propagation `protobuf:"bytes,3,opt,name=propagation,proto3" json:"propagation,omitempty"`
}

func (x *ClientMeta_AdditionalEthV1EventsContributionAndProofContributionData) Reset() {
	*x = ClientMeta_AdditionalEthV1EventsContributionAndProofContributionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientMeta_AdditionalEthV1EventsContributionAndProofContributionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientMeta_AdditionalEthV1EventsContributionAndProofContributionData) ProtoMessage() {}

func (x *ClientMeta_AdditionalEthV1EventsContributionAndProofContributionData) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientMeta_AdditionalEthV1EventsContributionAndProofContributionData.ProtoReflect.Descriptor instead.
func (*ClientMeta_AdditionalEthV1EventsContributionAndProofContributionData) Descriptor() ([]byte, []int) {
	return file_pkg_proto_xatu_event_ingester_proto_rawDescGZIP(), []int{15, 18}
}

func (x *ClientMeta_AdditionalEthV1EventsContributionAndProofContributionData) GetEpoch() *Epoch {
	if x != nil {
		return x.Epoch
	}
	return nil
}

func (x *ClientMeta_AdditionalEthV1EventsContributionAndProofContributionData) GetSlot() *Slot {
	if x != nil {
		return x.Slot
	}
	return nil
}

func (x *ClientMeta_AdditionalEthV1EventsContributionAndProofContributionData) GetPropagation() *Propagation {
	if x != nil {
		return x.Propagation
	}
	return nil
}

type ClientMeta_AdditionalEthV1EventsContributionAndProofContributionV2Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Epoch contains the epoch information for the contribution and proof.
	Epoch *EpochV2 `protobuf:"bytes,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	// Slot contains the slot information for the contribution and proof.
	Slot *SlotV2 `protobuf:"bytes,2,opt,name=slot,proto3" json:"slot,omitempty"`
	// Propagation contains information about the propagation of the
	// contribution and proof.
	Propagation *PropagationV2 `protobuf:"bytes,3,opt,name=propagation,proto3" json:"propagation,omitempty"`
}

func (x *ClientMeta_AdditionalEthV1EventsContributionAndProofContributionV2Data) Reset() {
	*x = ClientMeta_AdditionalEthV1EventsContributionAndProofContributionV2Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientMeta_AdditionalEthV1EventsContributionAndProofContributionV2Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientMeta_AdditionalEthV1EventsContributionAndProofContributionV2Data) ProtoMessage() {}

func (x *ClientMeta_AdditionalEthV1EventsContributionAndProofContributionV2Data) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientMeta_AdditionalEthV1EventsContributionAndProofContributionV2Data.ProtoReflect.Descriptor instead.
func (*ClientMeta_AdditionalEthV1EventsContributionAndProofContributionV2Data) Descriptor() ([]byte, []int) {
	return file_pkg_proto_xatu_event_ingester_proto_rawDescGZIP(), []int{15, 19}
}

func (x *ClientMeta_AdditionalEthV1EventsContributionAndProofContributionV2Data) GetEpoch() *EpochV2 {
	if x != nil {
		return x.Epoch
	}
	return nil
}

func (x *ClientMeta_AdditionalEthV1EventsContributionAndProofContributionV2Data) GetSlot() *SlotV2 {
	if x != nil {
		return x.Slot
	}
	return nil
}

func (x *ClientMeta_AdditionalEthV1EventsContributionAndProofContributionV2Data) GetPropagation() *PropagationV2 {
	if x != nil {
		return x.Propagation
	}
	return nil
}

type ClientMeta_AdditionalEthV1EventsContributionAndProofData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Contribution *ClientMeta_AdditionalEthV1EventsContributionAndProofContributionData `protobuf:"bytes,1,opt,name=contribution,proto3" json:"contribution,omitempty"`
}

func (x *ClientMeta_AdditionalEthV1EventsContributionAndProofData) Reset() {
	*x = ClientMeta_AdditionalEthV1EventsContributionAndProofData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientMeta_AdditionalEthV1EventsContributionAndProofData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientMeta_AdditionalEthV1EventsContributionAndProofData) ProtoMessage() {}

func (x *ClientMeta_AdditionalEthV1EventsContributionAndProofData) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientMeta_AdditionalEthV1EventsContributionAndProofData.ProtoReflect.Descriptor instead.
func (*ClientMeta_AdditionalEthV1EventsContributionAndProofData) Descriptor() ([]byte, []int) {
	return file_pkg_proto_xatu_event_ingester_proto_rawDescGZIP(), []int{15, 20}
}

func (x *ClientMeta_AdditionalEthV1EventsContributionAndProofData) GetContribution() *ClientMeta_AdditionalEthV1EventsContributionAndProofContributionData {
	if x != nil {
		return x.Contribution
	}
	return nil
}

type ClientMeta_AdditionalEthV1EventsContributionAndProofV2Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Contribution *ClientMeta_AdditionalEthV1EventsContributionAndProofContributionV2Data `protobuf:"bytes,1,opt,name=contribution,proto3" json:"contribution,omitempty"`
}

func (x *ClientMeta_AdditionalEthV1EventsContributionAndProofV2Data) Reset() {
	*x = ClientMeta_AdditionalEthV1EventsContributionAndProofV2Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientMeta_AdditionalEthV1EventsContributionAndProofV2Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientMeta_AdditionalEthV1EventsContributionAndProofV2Data) ProtoMessage() {}

func (x *ClientMeta_AdditionalEthV1EventsContributionAndProofV2Data) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientMeta_AdditionalEthV1EventsContributionAndProofV2Data.ProtoReflect.Descriptor instead.
func (*ClientMeta_AdditionalEthV1EventsContributionAndProofV2Data) Descriptor() ([]byte, []int) {
	return file_pkg_proto_xatu_event_ingester_proto_rawDescGZIP(), []int{15, 21}
}

func (x *ClientMeta_AdditionalEthV1EventsContributionAndProofV2Data) GetContribution() *ClientMeta_AdditionalEthV1EventsContributionAndProofContributionV2Data {
	if x != nil {
		return x.Contribution
	}
	return nil
}

type ClientMeta_ForkChoiceSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// RequestEpoch contains the wall clock epoch for when the fork choice was
	// requested.
	RequestEpoch *Epoch `protobuf:"bytes,1,opt,name=request_epoch,proto3" json:"request_epoch,omitempty"`
	// RequestSlot contains the wall clock slot for when the fork choice was
	// requested.
	RequestSlot *Slot `protobuf:"bytes,2,opt,name=request_slot,proto3" json:"request_slot,omitempty"`
	// RequestedAtSlotStartDiffMs is the difference how far in to the slot the
	// sentry was when it requested the fork choice snapshot (in milliseconds).
	RequestedAtSlotStartDiffMs uint64 `protobuf:"varint,3,opt,name=requested_at_slot_start_diff_ms,proto3" json:"requested_at_slot_start_diff_ms,omitempty"`
	// RequestDurationMs is the duration of the fork choice snapshot request
	// (in milliseconds).
	RequestDurationMs uint64 `protobuf:"varint,4,opt,name=request_duration_ms,proto3" json:"request_duration_ms,omitempty"`
	// Timestamp is the timestamp of the fork choice snapshot.
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *ClientMeta_ForkChoiceSnapshot) Reset() {
	*x = ClientMeta_ForkChoiceSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientMeta_ForkChoiceSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientMeta_ForkChoiceSnapshot) ProtoMessage() {}

func (x *ClientMeta_ForkChoiceSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientMeta_ForkChoiceSnapshot.ProtoReflect.Descriptor instead.
func (*ClientMeta_ForkChoiceSnapshot) Descriptor() ([]byte, []int) {
	return file_pkg_proto_xatu_event_ingester_proto_rawDescGZIP(), []int{15, 22}
}

func (x *ClientMeta_ForkChoiceSnapshot) GetRequestEpoch() *Epoch {
	if x != nil {
		return x.RequestEpoch
	}
	return nil
}

func (x *ClientMeta_ForkChoiceSnapshot) GetRequestSlot() *Slot {
	if x != nil {
		return x.RequestSlot
	}
	return nil
}

func (x *ClientMeta_ForkChoiceSnapshot) GetRequestedAtSlotStartDiffMs() uint64 {
	if x != nil {
		return x.RequestedAtSlotStartDiffMs
	}
	return 0
}

func (x *ClientMeta_ForkChoiceSnapshot) GetRequestDurationMs() uint64 {
	if x != nil {
		return x.RequestDurationMs
	}
	return 0
}

func (x *ClientMeta_ForkChoiceSnapshot) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type ClientMeta_ForkChoiceSnapshotV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// RequestEpoch contains the wall clock epoch for when the fork choice was
	// requested.
	RequestEpoch *EpochV2 `protobuf:"bytes,1,opt,name=request_epoch,proto3" json:"request_epoch,omitempty"`
	// RequestSlot contains the wall clock slot for when the fork choice was
	// requested.
	RequestSlot *SlotV2 `protobuf:"bytes,2,opt,name=request_slot,proto3" json:"request_slot,omitempty"`
	// RequestedAtSlotStartDiffMs is the difference how far in to the slot the
	// sentry was when it requested the fork choice snapshot (in milliseconds).
	RequestedAtSlotStartDiffMs *wrapperspb.UInt64Value `protobuf:"bytes,3,opt,name=requested_at_slot_start_diff_ms,proto3" json:"requested_at_slot_start_diff_ms,omitempty"`
	// RequestDurationMs is the duration of the fork choice snapshot request
	// (in milliseconds).
	RequestDurationMs *wrapperspb.UInt64Value `protobuf:"bytes,4,opt,name=request_duration_ms,proto3" json:"request_duration_ms,omitempty"`
	// Timestamp is the timestamp of the fork choice snapshot.
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *ClientMeta_ForkChoiceSnapshotV2) Reset() {
	*x = ClientMeta_ForkChoiceSnapshotV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientMeta_ForkChoiceSnapshotV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientMeta_ForkChoiceSnapshotV2) ProtoMessage() {}

func (x *ClientMeta_ForkChoiceSnapshotV2) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientMeta_ForkChoiceSnapshotV2.ProtoReflect.Descriptor instead.
func (*ClientMeta_ForkChoiceSnapshotV2) Descriptor() ([]byte, []int) {
	return file_pkg_proto_xatu_event_ingester_proto_rawDescGZIP(), []int{15, 23}
}

func (x *ClientMeta_ForkChoiceSnapshotV2) GetRequestEpoch() *EpochV2 {
	if x != nil {
		return x.RequestEpoch
	}
	return nil
}

func (x *ClientMeta_ForkChoiceSnapshotV2) GetRequestSlot() *SlotV2 {
	if x != nil {
		return x.RequestSlot
	}
	return nil
}

func (x *ClientMeta_ForkChoiceSnapshotV2) GetRequestedAtSlotStartDiffMs() *wrapperspb.UInt64Value {
	if x != nil {
		return x.RequestedAtSlotStartDiffMs
	}
	return nil
}

func (x *ClientMeta_ForkChoiceSnapshotV2) GetRequestDurationMs() *wrapperspb.UInt64Value {
	if x != nil {
		return x.RequestDurationMs
	}
	return nil
}

func (x *ClientMeta_ForkChoiceSnapshotV2) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type ClientMeta_AdditionalEthV1DebugForkChoiceData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Snapshot *ClientMeta_ForkChoiceSnapshot `protobuf:"bytes,1,opt,name=Snapshot,json=snapshot,proto3" json:"Snapshot,omitempty"`
}

func (x *ClientMeta_AdditionalEthV1DebugForkChoiceData) Reset() {
	*x = ClientMeta_AdditionalEthV1DebugForkChoiceData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientMeta_AdditionalEthV1DebugForkChoiceData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientMeta_AdditionalEthV1DebugForkChoiceData) ProtoMessage() {}

func (x *ClientMeta_AdditionalEthV1DebugForkChoiceData) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientMeta_AdditionalEthV1DebugForkChoiceData.ProtoReflect.Descriptor instead.
func (*ClientMeta_AdditionalEthV1DebugForkChoiceData) Descriptor() ([]byte, []int) {
	return file_pkg_proto_xatu_event_ingester_proto_rawDescGZIP(), []int{15, 24}
}

func (x *ClientMeta_AdditionalEthV1DebugForkChoiceData) GetSnapshot() *ClientMeta_ForkChoiceSnapshot {
	if x != nil {
		return x.Snapshot
	}
	return nil
}

type ClientMeta_AdditionalEthV1DebugForkChoiceV2Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Snapshot *ClientMeta_ForkChoiceSnapshotV2 `protobuf:"bytes,1,opt,name=Snapshot,json=snapshot,proto3" json:"Snapshot,omitempty"`
}

func (x *ClientMeta_AdditionalEthV1DebugForkChoiceV2Data) Reset() {
	*x = ClientMeta_AdditionalEthV1DebugForkChoiceV2Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientMeta_AdditionalEthV1DebugForkChoiceV2Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientMeta_AdditionalEthV1DebugForkChoiceV2Data) ProtoMessage() {}

func (x *ClientMeta_AdditionalEthV1DebugForkChoiceV2Data) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientMeta_AdditionalEthV1DebugForkChoiceV2Data.ProtoReflect.Descriptor instead.
func (*ClientMeta_AdditionalEthV1DebugForkChoiceV2Data) Descriptor() ([]byte, []int) {
	return file_pkg_proto_xatu_event_ingester_proto_rawDescGZIP(), []int{15, 25}
}

func (x *ClientMeta_AdditionalEthV1DebugForkChoiceV2Data) GetSnapshot() *ClientMeta_ForkChoiceSnapshotV2 {
	if x != nil {
		return x.Snapshot
	}
	return nil
}

type ClientMeta_AdditionalEthV1DebugForkChoiceReOrgData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Before *ClientMeta_ForkChoiceSnapshot `protobuf:"bytes,1,opt,name=before,proto3" json:"before,omitempty"`
	After  *ClientMeta_ForkChoiceSnapshot `protobuf:"bytes,2,opt,name=after,proto3" json:"after,omitempty"`
}

func (x *ClientMeta_AdditionalEthV1DebugForkChoiceReOrgData) Reset() {
	*x = ClientMeta_AdditionalEthV1DebugForkChoiceReOrgData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientMeta_AdditionalEthV1DebugForkChoiceReOrgData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientMeta_AdditionalEthV1DebugForkChoiceReOrgData) ProtoMessage() {}

func (x *ClientMeta_AdditionalEthV1DebugForkChoiceReOrgData) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientMeta_AdditionalEthV1DebugForkChoiceReOrgData.ProtoReflect.Descriptor instead.
func (*ClientMeta_AdditionalEthV1DebugForkChoiceReOrgData) Descriptor() ([]byte, []int) {
	return file_pkg_proto_xatu_event_ingester_proto_rawDescGZIP(), []int{15, 26}
}

func (x *ClientMeta_AdditionalEthV1DebugForkChoiceReOrgData) GetBefore() *ClientMeta_ForkChoiceSnapshot {
	if x != nil {
		return x.Before
	}
	return nil
}

func (x *ClientMeta_AdditionalEthV1DebugForkChoiceReOrgData) GetAfter() *ClientMeta_ForkChoiceSnapshot {
	if x != nil {
		return x.After
	}
	return nil
}

type ClientMeta_AdditionalEthV1DebugForkChoiceReOrgV2Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Before *ClientMeta_ForkChoiceSnapshotV2 `protobuf:"bytes,1,opt,name=before,proto3" json:"before,omitempty"`
	After  *ClientMeta_ForkChoiceSnapshotV2 `protobuf:"bytes,2,opt,name=after,proto3" json:"after,omitempty"`
}

func (x *ClientMeta_AdditionalEthV1DebugForkChoiceReOrgV2Data) Reset() {
	*x = ClientMeta_AdditionalEthV1DebugForkChoiceReOrgV2Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientMeta_AdditionalEthV1DebugForkChoiceReOrgV2Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientMeta_AdditionalEthV1DebugForkChoiceReOrgV2Data) ProtoMessage() {}

func (x *ClientMeta_AdditionalEthV1DebugForkChoiceReOrgV2Data) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientMeta_AdditionalEthV1DebugForkChoiceReOrgV2Data.ProtoReflect.Descriptor instead.
func (*ClientMeta_AdditionalEthV1DebugForkChoiceReOrgV2Data) Descriptor() ([]byte, []int) {
	return file_pkg_proto_xatu_event_ingester_proto_rawDescGZIP(), []int{15, 27}
}

func (x *ClientMeta_AdditionalEthV1DebugForkChoiceReOrgV2Data) GetBefore() *ClientMeta_ForkChoiceSnapshotV2 {
	if x != nil {
		return x.Before
	}
	return nil
}

func (x *ClientMeta_AdditionalEthV1DebugForkChoiceReOrgV2Data) GetAfter() *ClientMeta_ForkChoiceSnapshotV2 {
	if x != nil {
		return x.After
	}
	return nil
}

type ClientMeta_AdditionalEthV1BeaconCommitteeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Epoch contains the epoch information for the beacon committee.
	Epoch *EpochV2 `protobuf:"bytes,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	// Slot contains the slot information for the beacon committee.
	Slot *SlotV2 `protobuf:"bytes,2,opt,name=slot,proto3" json:"slot,omitempty"`
}

func (x *ClientMeta_AdditionalEthV1BeaconCommitteeData) Reset() {
	*x = ClientMeta_AdditionalEthV1BeaconCommitteeData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientMeta_AdditionalEthV1BeaconCommitteeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientMeta_AdditionalEthV1BeaconCommitteeData) ProtoMessage() {}

func (x *ClientMeta_AdditionalEthV1BeaconCommitteeData) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientMeta_AdditionalEthV1BeaconCommitteeData.ProtoReflect.Descriptor instead.
func (*ClientMeta_AdditionalEthV1BeaconCommitteeData) Descriptor() ([]byte, []int) {
	return file_pkg_proto_xatu_event_ingester_proto_rawDescGZIP(), []int{15, 28}
}

func (x *ClientMeta_AdditionalEthV1BeaconCommitteeData) GetEpoch() *EpochV2 {
	if x != nil {
		return x.Epoch
	}
	return nil
}

func (x *ClientMeta_AdditionalEthV1BeaconCommitteeData) GetSlot() *SlotV2 {
	if x != nil {
		return x.Slot
	}
	return nil
}

type ClientMeta_AdditionalMempoolTransactionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Hash is the transaction hash.
	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	// From is the transaction sender hash.
	From string `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	// To is the transaction receiver hash.
	To string `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
	// Nonce is the transaction nonce.
	Nonce uint64 `protobuf:"varint,4,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// GasPrice is the transaction gas price.
	GasPrice string `protobuf:"bytes,5,opt,name=gas_price,proto3" json:"gas_price,omitempty"`
	// Gas is the transaction gas.
	Gas uint64 `protobuf:"varint,6,opt,name=gas,proto3" json:"gas,omitempty"`
	// Value is the transaction value.
	Value string `protobuf:"bytes,7,opt,name=value,proto3" json:"value,omitempty"`
	// Size is the transaction size in bytes.
	Size string `protobuf:"bytes,8,opt,name=size,proto3" json:"size,omitempty"`
	// CallDataSize is the call data size in bytes.
	CallDataSize string `protobuf:"bytes,9,opt,name=call_data_size,proto3" json:"call_data_size,omitempty"`
}

func (x *ClientMeta_AdditionalMempoolTransactionData) Reset() {
	*x = ClientMeta_AdditionalMempoolTransactionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientMeta_AdditionalMempoolTransactionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientMeta_AdditionalMempoolTransactionData) ProtoMessage() {}

func (x *ClientMeta_AdditionalMempoolTransactionData) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientMeta_AdditionalMempoolTransactionData.ProtoReflect.Descriptor instead.
func (*ClientMeta_AdditionalMempoolTransactionData) Descriptor() ([]byte, []int) {
	return file_pkg_proto_xatu_event_ingester_proto_rawDescGZIP(), []int{15, 29}
}

func (x *ClientMeta_AdditionalMempoolTransactionData) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *ClientMeta_AdditionalMempoolTransactionData) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *ClientMeta_AdditionalMempoolTransactionData) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *ClientMeta_AdditionalMempoolTransactionData) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *ClientMeta_AdditionalMempoolTransactionData) GetGasPrice() string {
	if x != nil {
		return x.GasPrice
	}
	return ""
}

func (x *ClientMeta_AdditionalMempoolTransactionData) GetGas() uint64 {
	if x != nil {
		return x.Gas
	}
	return 0
}

func (x *ClientMeta_AdditionalMempoolTransactionData) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *ClientMeta_AdditionalMempoolTransactionData) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

func (x *ClientMeta_AdditionalMempoolTransactionData) GetCallDataSize() string {
	if x != nil {
		return x.CallDataSize
	}
	return ""
}

type ClientMeta_AdditionalMempoolTransactionV2Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Hash is the transaction hash.
	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	// From is the transaction sender hash.
	From string `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	// To is the transaction receiver hash.
	To string `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
	// Nonce is the transaction nonce.
	Nonce *wrapperspb.UInt64Value `protobuf:"bytes,4,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// GasPrice is the transaction gas price.
	GasPrice string `protobuf:"bytes,5,opt,name=gas_price,proto3" json:"gas_price,omitempty"`
	// Gas is the transaction gas.
	Gas *wrapperspb.UInt64Value `protobuf:"bytes,6,opt,name=gas,proto3" json:"gas,omitempty"`
	// Value is the transaction value.
	Value string `protobuf:"bytes,7,opt,name=value,proto3" json:"value,omitempty"`
	// Size is the transaction size in bytes.
	Size string `protobuf:"bytes,8,opt,name=size,proto3" json:"size,omitempty"`
	// CallDataSize is the call data size in bytes.
	CallDataSize string `protobuf:"bytes,9,opt,name=call_data_size,proto3" json:"call_data_size,omitempty"`
	// Type is the transaction type.
	Type *wrapperspb.UInt32Value `protobuf:"bytes,10,opt,name=type,proto3" json:"type,omitempty"`
	// GasTipCap is the transaction gas tip cap.
	GasTipCap string `protobuf:"bytes,11,opt,name=gas_tip_cap,proto3" json:"gas_tip_cap,omitempty"`
	// GasFeeCap is the transaction gas fee cap.
	GasFeeCap string `protobuf:"bytes,12,opt,name=gas_fee_cap,proto3" json:"gas_fee_cap,omitempty"`
	// BlobGas is the transaction gas.
	BlobGas *wrapperspb.UInt64Value `protobuf:"bytes,13,opt,name=blob_gas,proto3" json:"blob_gas,omitempty"`
	// BlobGasFeeCap is the transaction gas fee cap.
	BlobGasFeeCap string `protobuf:"bytes,14,opt,name=blob_gas_fee_cap,proto3" json:"blob_gas_fee_cap,omitempty"`
	// BlobHashes is the transaction blob hashes.
	BlobHashes []string `protobuf:"bytes,15,rep,name=blob_hashes,proto3" json:"blob_hashes,omitempty"`
	// BlobSidecarsSize is the size of the blob sidecars in bytes.
	BlobSidecarsSize string `protobuf:"bytes,16,opt,name=blob_sidecars_size,proto3" json:"blob_sidecars_size,omitempty"`
	// BlobSidecarsEmptySize is the empty size of the blob sidecars in bytes.
	BlobSidecarsEmptySize string `protobuf:"bytes,17,opt,name=blob_sidecars_empty_size,proto3" json:"blob_sidecars_empty_size,omitempty"`
}

func (x *ClientMeta_AdditionalMempoolTransactionV2Data) Reset() {
	*x = ClientMeta_AdditionalMempoolTransactionV2Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientMeta_AdditionalMempoolTransactionV2Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientMeta_AdditionalMempoolTransactionV2Data) ProtoMessage() {}

func (x *ClientMeta_AdditionalMempoolTransactionV2Data) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientMeta_AdditionalMempoolTransactionV2Data.ProtoReflect.Descriptor instead.
func (*ClientMeta_AdditionalMempoolTransactionV2Data) Descriptor() ([]byte, []int) {
	return file_pkg_proto_xatu_event_ingester_proto_rawDescGZIP(), []int{15, 30}
}

func (x *ClientMeta_AdditionalMempoolTransactionV2Data) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *ClientMeta_AdditionalMempoolTransactionV2Data) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *ClientMeta_AdditionalMempoolTransactionV2Data) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *ClientMeta_AdditionalMempoolTransactionV2Data) GetNonce() *wrapperspb.UInt64Value {
	if x != nil {
		return x.Nonce
	}
	return nil
}

func (x *ClientMeta_AdditionalMempoolTransactionV2Data) GetGasPrice() string {
	if x != nil {
		return x.GasPrice
	}
	return ""
}

func (x *ClientMeta_AdditionalMempoolTransactionV2Data) GetGas() *wrapperspb.UInt64Value {
	if x != nil {
		return x.Gas
	}
	return nil
}

func (x *ClientMeta_AdditionalMempoolTransactionV2Data) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *ClientMeta_AdditionalMempoolTransactionV2Data) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

func (x *ClientMeta_AdditionalMempoolTransactionV2Data) GetCallDataSize() string {
	if x != nil {
		return x.CallDataSize
	}
	return ""
}

func (x *ClientMeta_AdditionalMempoolTransactionV2Data) GetType() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *ClientMeta_AdditionalMempoolTransactionV2Data) GetGasTipCap() string {
	if x != nil {
		return x.GasTipCap
	}
	return ""
}

func (x *ClientMeta_AdditionalMempoolTransactionV2Data) GetGasFeeCap() string {
	if x != nil {
		return x.GasFeeCap
	}
	return ""
}

func (x *ClientMeta_AdditionalMempoolTransactionV2Data) GetBlobGas() *wrapperspb.UInt64Value {
	if x != nil {
		return x.BlobGas
	}
	return nil
}

func (x *ClientMeta_AdditionalMempoolTransactionV2Data) GetBlobGasFeeCap() string {
	if x != nil {
		return x.BlobGasFeeCap
	}
	return ""
}

func (x *ClientMeta_AdditionalMempoolTransactionV2Data) GetBlobHashes() []string {
	if x != nil {
		return x.BlobHashes
	}
	return nil
}

func (x *ClientMeta_AdditionalMempoolTransactionV2Data) GetBlobSidecarsSize() string {
	if x != nil {
		return x.BlobSidecarsSize
	}
	return ""
}

func (x *ClientMeta_AdditionalMempoolTransactionV2Data) GetBlobSidecarsEmptySize() string {
	if x != nil {
		return x.BlobSidecarsEmptySize
	}
	return ""
}

type ClientMeta_AdditionalEthV2BeaconBlockData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Epoch contains the epoch information for the block.
	Epoch *Epoch `protobuf:"bytes,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	// Slot contains the slot information for the block.
	Slot *Slot `protobuf:"bytes,2,opt,name=slot,proto3" json:"slot,omitempty"`
	// Version contains information about the version of the block.
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	// BlockRoot contains the block root of the beacon block.
	BlockRoot string `protobuf:"bytes,4,opt,name=block_root,proto3" json:"block_root,omitempty"`
	// TransactionsCount contains the number of transactions in the block
	TransactionsCount uint64 `protobuf:"varint,5,opt,name=transactions_count,proto3" json:"transactions_count,omitempty"`
	// TransactionsTotalBytes contains the total bytes size of transactions
	TransactionsTotalBytes uint64 `protobuf:"varint,6,opt,name=transactions_total_bytes,proto3" json:"transactions_total_bytes,omitempty"`
}

func (x *ClientMeta_AdditionalEthV2BeaconBlockData) Reset() {
	*x = ClientMeta_AdditionalEthV2BeaconBlockData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientMeta_AdditionalEthV2BeaconBlockData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientMeta_AdditionalEthV2BeaconBlockData) ProtoMessage() {}

func (x *ClientMeta_AdditionalEthV2BeaconBlockData) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientMeta_AdditionalEthV2BeaconBlockData.ProtoReflect.Descriptor instead.
func (*ClientMeta_AdditionalEthV2BeaconBlockData) Descriptor() ([]byte, []int) {
	return file_pkg_proto_xatu_event_ingester_proto_rawDescGZIP(), []int{15, 31}
}

func (x *ClientMeta_AdditionalEthV2BeaconBlockData) GetEpoch() *Epoch {
	if x != nil {
		return x.Epoch
	}
	return nil
}

func (x *ClientMeta_AdditionalEthV2BeaconBlockData) GetSlot() *Slot {
	if x != nil {
		return x.Slot
	}
	return nil
}

func (x *ClientMeta_AdditionalEthV2BeaconBlockData) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ClientMeta_AdditionalEthV2BeaconBlockData) GetBlockRoot() string {
	if x != nil {
		return x.BlockRoot
	}
	return ""
}

func (x *ClientMeta_AdditionalEthV2BeaconBlockData) GetTransactionsCount() uint64 {
	if x != nil {
		return x.TransactionsCount
	}
	return 0
}

func (x *ClientMeta_AdditionalEthV2BeaconBlockData) GetTransactionsTotalBytes() uint64 {
	if x != nil {
		return x.TransactionsTotalBytes
	}
	return 0
}

type ClientMeta_AdditionalEthV2BeaconBlockV2Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Epoch contains the epoch information for the block.
	Epoch *EpochV2 `protobuf:"bytes,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	// Slot contains the slot information for the block.
	Slot *SlotV2 `protobuf:"bytes,2,opt,name=slot,proto3" json:"slot,omitempty"`
	// Version contains information about the version of the block.
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	// BlockRoot contains the block root of the beacon block.
	BlockRoot string `protobuf:"bytes,4,opt,name=block_root,proto3" json:"block_root,omitempty"`
	// TransactionsCount contains the number of transactions in the block
	TransactionsCount *wrapperspb.UInt64Value `protobuf:"bytes,5,opt,name=transactions_count,proto3" json:"transactions_count,omitempty"`
	// TransactionsTotalBytes contains the total bytes size of transactions
	TransactionsTotalBytes *wrapperspb.UInt64Value `protobuf:"bytes,6,opt,name=transactions_total_bytes,proto3" json:"transactions_total_bytes,omitempty"`
	// CompressedTotalBytesCompressed contains the total bytes size of
	// transactions with snappy compression
	TransactionsTotalBytesCompressed *wrapperspb.UInt64Value `protobuf:"bytes,7,opt,name=transactions_total_bytes_compressed,proto3" json:"transactions_total_bytes_compressed,omitempty"`
	// TotalBytes contains the total bytes size of block
	TotalBytes *wrapperspb.UInt64Value `protobuf:"bytes,8,opt,name=total_bytes,proto3" json:"total_bytes,omitempty"`
	// TotalBytesCompressed contains the total bytes size of block with snappy
	// compression
	TotalBytesCompressed *wrapperspb.UInt64Value `protobuf:"bytes,9,opt,name=total_bytes_compressed,proto3" json:"total_bytes_compressed,omitempty"`
	// FinalizedWhenRequested is if the block was finalized when requested
	FinalizedWhenRequested bool `protobuf:"varint,10,opt,name=finalized_when_requested,proto3" json:"finalized_when_requested,omitempty"`
}

func (x *ClientMeta_AdditionalEthV2BeaconBlockV2Data) Reset() {
	*x = ClientMeta_AdditionalEthV2BeaconBlockV2Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientMeta_AdditionalEthV2BeaconBlockV2Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientMeta_AdditionalEthV2BeaconBlockV2Data) ProtoMessage() {}

func (x *ClientMeta_AdditionalEthV2BeaconBlockV2Data) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientMeta_AdditionalEthV2BeaconBlockV2Data.ProtoReflect.Descriptor instead.
func (*ClientMeta_AdditionalEthV2BeaconBlockV2Data) Descriptor() ([]byte, []int) {
	return file_pkg_proto_xatu_event_ingester_proto_rawDescGZIP(), []int{15, 32}
}

func (x *ClientMeta_AdditionalEthV2BeaconBlockV2Data) GetEpoch() *EpochV2 {
	if x != nil {
		return x.Epoch
	}
	return nil
}

func (x *ClientMeta_AdditionalEthV2BeaconBlockV2Data) GetSlot() *SlotV2 {
	if x != nil {
		return x.Slot
	}
	return nil
}

func (x *ClientMeta_AdditionalEthV2BeaconBlockV2Data) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ClientMeta_AdditionalEthV2BeaconBlockV2Data) GetBlockRoot() string {
	if x != nil {
		return x.BlockRoot
	}
	return ""
}

func (x *ClientMeta_AdditionalEthV2BeaconBlockV2Data) GetTransactionsCount() *wrapperspb.UInt64Value {
	if x != nil {
		return x.TransactionsCount
	}
	return nil
}

func (x *ClientMeta_AdditionalEthV2BeaconBlockV2Data) GetTransactionsTotalBytes() *wrapperspb.UInt64Value {
	if x != nil {
		return x.TransactionsTotalBytes
	}
	return nil
}

func (x *ClientMeta_AdditionalEthV2BeaconBlockV2Data) GetTransactionsTotalBytesCompressed() *wrapperspb.UInt64Value {
	if x != nil {
		return x.TransactionsTotalBytesCompressed
	}
	return nil
}

func (x *ClientMeta_AdditionalEthV2BeaconBlockV2Data) GetTotalBytes() *wrapperspb.UInt64Value {
	if x != nil {
		return x.TotalBytes
	}
	return nil
}

func (x *ClientMeta_AdditionalEthV2BeaconBlockV2Data) GetTotalBytesCompressed() *wrapperspb.UInt64Value {
	if x != nil {
		return x.TotalBytesCompressed
	}
	return nil
}

func (x *ClientMeta_AdditionalEthV2BeaconBlockV2Data) GetFinalizedWhenRequested() bool {
	if x != nil {
		return x.FinalizedWhenRequested
	}
	return false
}

type ClientMeta_AdditionalEthV2BeaconBlockAttesterSlashingData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Block contains the information about the block that we are deriving the
	// attester slashing from.
	Block *BlockIdentifier `protobuf:"bytes,1,opt,name=block,proto3" json:"block,omitempty"`
}

func (x *ClientMeta_AdditionalEthV2BeaconBlockAttesterSlashingData) Reset() {
	*x = ClientMeta_AdditionalEthV2BeaconBlockAttesterSlashingData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientMeta_AdditionalEthV2BeaconBlockAttesterSlashingData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientMeta_AdditionalEthV2BeaconBlockAttesterSlashingData) ProtoMessage() {}

func (x *ClientMeta_AdditionalEthV2BeaconBlockAttesterSlashingData) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientMeta_AdditionalEthV2BeaconBlockAttesterSlashingData.ProtoReflect.Descriptor instead.
func (*ClientMeta_AdditionalEthV2BeaconBlockAttesterSlashingData) Descriptor() ([]byte, []int) {
	return file_pkg_proto_xatu_event_ingester_proto_rawDescGZIP(), []int{15, 33}
}

func (x *ClientMeta_AdditionalEthV2BeaconBlockAttesterSlashingData) GetBlock() *BlockIdentifier {
	if x != nil {
		return x.Block
	}
	return nil
}

type ClientMeta_AdditionalEthV2BeaconBlockProposerSlashingData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Block contains the information about the block that we are deriving the
	// proposer slashing from.
	Block *BlockIdentifier `protobuf:"bytes,1,opt,name=block,proto3" json:"block,omitempty"`
}

func (x *ClientMeta_AdditionalEthV2BeaconBlockProposerSlashingData) Reset() {
	*x = ClientMeta_AdditionalEthV2BeaconBlockProposerSlashingData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientMeta_AdditionalEthV2BeaconBlockProposerSlashingData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientMeta_AdditionalEthV2BeaconBlockProposerSlashingData) ProtoMessage() {}

func (x *ClientMeta_AdditionalEthV2BeaconBlockProposerSlashingData) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientMeta_AdditionalEthV2BeaconBlockProposerSlashingData.ProtoReflect.Descriptor instead.
func (*ClientMeta_AdditionalEthV2BeaconBlockProposerSlashingData) Descriptor() ([]byte, []int) {
	return file_pkg_proto_xatu_event_ingester_proto_rawDescGZIP(), []int{15, 34}
}

func (x *ClientMeta_AdditionalEthV2BeaconBlockProposerSlashingData) GetBlock() *BlockIdentifier {
	if x != nil {
		return x.Block
	}
	return nil
}

type ClientMeta_AdditionalEthV2BeaconBlockVoluntaryExitData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Block contains the information about the block that we are deriving the
	// voluntary exit from.
	Block *BlockIdentifier `protobuf:"bytes,1,opt,name=block,proto3" json:"block,omitempty"`
}

func (x *ClientMeta_AdditionalEthV2BeaconBlockVoluntaryExitData) Reset() {
	*x = ClientMeta_AdditionalEthV2BeaconBlockVoluntaryExitData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientMeta_AdditionalEthV2BeaconBlockVoluntaryExitData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientMeta_AdditionalEthV2BeaconBlockVoluntaryExitData) ProtoMessage() {}

func (x *ClientMeta_AdditionalEthV2BeaconBlockVoluntaryExitData) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientMeta_AdditionalEthV2BeaconBlockVoluntaryExitData.ProtoReflect.Descriptor instead.
func (*ClientMeta_AdditionalEthV2BeaconBlockVoluntaryExitData) Descriptor() ([]byte, []int) {
	return file_pkg_proto_xatu_event_ingester_proto_rawDescGZIP(), []int{15, 35}
}

func (x *ClientMeta_AdditionalEthV2BeaconBlockVoluntaryExitData) GetBlock() *BlockIdentifier {
	if x != nil {
		return x.Block
	}
	return nil
}

type ClientMeta_AdditionalEthV2BeaconBlockDepositData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Block contains the information about the block that we are deriving the
	// deposit from.
	Block *BlockIdentifier `protobuf:"bytes,1,opt,name=block,proto3" json:"block,omitempty"`
}

func (x *ClientMeta_AdditionalEthV2BeaconBlockDepositData) Reset() {
	*x = ClientMeta_AdditionalEthV2BeaconBlockDepositData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientMeta_AdditionalEthV2BeaconBlockDepositData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientMeta_AdditionalEthV2BeaconBlockDepositData) ProtoMessage() {}

func (x *ClientMeta_AdditionalEthV2BeaconBlockDepositData) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientMeta_AdditionalEthV2BeaconBlockDepositData.ProtoReflect.Descriptor instead.
func (*ClientMeta_AdditionalEthV2BeaconBlockDepositData) Descriptor() ([]byte, []int) {
	return file_pkg_proto_xatu_event_ingester_proto_rawDescGZIP(), []int{15, 36}
}

func (x *ClientMeta_AdditionalEthV2BeaconBlockDepositData) GetBlock() *BlockIdentifier {
	if x != nil {
		return x.Block
	}
	return nil
}

type ClientMeta_AdditionalEthV2BeaconBlockBLSToExecutionChangeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Block contains the information about the block that we are deriving the
	// bls to execution change from.
	Block *BlockIdentifier `protobuf:"bytes,1,opt,name=block,proto3" json:"block,omitempty"`
}

func (x *ClientMeta_AdditionalEthV2BeaconBlockBLSToExecutionChangeData) Reset() {
	*x = ClientMeta_AdditionalEthV2BeaconBlockBLSToExecutionChangeData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientMeta_AdditionalEthV2BeaconBlockBLSToExecutionChangeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientMeta_AdditionalEthV2BeaconBlockBLSToExecutionChangeData) ProtoMessage() {}

func (x *ClientMeta_AdditionalEthV2BeaconBlockBLSToExecutionChangeData) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientMeta_AdditionalEthV2BeaconBlockBLSToExecutionChangeData.ProtoReflect.Descriptor instead.
func (*ClientMeta_AdditionalEthV2BeaconBlockBLSToExecutionChangeData) Descriptor() ([]byte, []int) {
	return file_pkg_proto_xatu_event_ingester_proto_rawDescGZIP(), []int{15, 37}
}

func (x *ClientMeta_AdditionalEthV2BeaconBlockBLSToExecutionChangeData) GetBlock() *BlockIdentifier {
	if x != nil {
		return x.Block
	}
	return nil
}

type ClientMeta_AdditionalEthV2BeaconBlockExecutionTransactionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Block contains the information about the block that we are deriving the
	// execution transaction from.
	Block *BlockIdentifier `protobuf:"bytes,1,opt,name=block,proto3" json:"block,omitempty"`
	// PositionInBlock is the position of the transaction in the block.
	PositionInBlock *wrapperspb.UInt64Value `protobuf:"bytes,2,opt,name=position_in_block,proto3" json:"position_in_block,omitempty"`
	// Size is the transaction size in bytes.
	Size string `protobuf:"bytes,3,opt,name=size,proto3" json:"size,omitempty"`
	// CallDataSize is the call data size in bytes.
	CallDataSize string `protobuf:"bytes,4,opt,name=call_data_size,proto3" json:"call_data_size,omitempty"`
	// BlobSidecarsSize is the size of the blob sidecars in bytes.
	BlobSidecarsSize string `protobuf:"bytes,5,opt,name=blob_sidecars_size,proto3" json:"blob_sidecars_size,omitempty"`
	// BlobSidecarsEmptySize is the amount of empty bytes of the blob sidecars.
	BlobSidecarsEmptySize string `protobuf:"bytes,6,opt,name=blob_sidecars_empty_size,proto3" json:"blob_sidecars_empty_size,omitempty"`
}

func (x *ClientMeta_AdditionalEthV2BeaconBlockExecutionTransactionData) Reset() {
	*x = ClientMeta_AdditionalEthV2BeaconBlockExecutionTransactionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientMeta_AdditionalEthV2BeaconBlockExecutionTransactionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientMeta_AdditionalEthV2BeaconBlockExecutionTransactionData) ProtoMessage() {}

func (x *ClientMeta_AdditionalEthV2BeaconBlockExecutionTransactionData) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientMeta_AdditionalEthV2BeaconBlockExecutionTransactionData.ProtoReflect.Descriptor instead.
func (*ClientMeta_AdditionalEthV2BeaconBlockExecutionTransactionData) Descriptor() ([]byte, []int) {
	return file_pkg_proto_xatu_event_ingester_proto_rawDescGZIP(), []int{15, 38}
}

func (x *ClientMeta_AdditionalEthV2BeaconBlockExecutionTransactionData) GetBlock() *BlockIdentifier {
	if x != nil {
		return x.Block
	}
	return nil
}

func (x *ClientMeta_AdditionalEthV2BeaconBlockExecutionTransactionData) GetPositionInBlock() *wrapperspb.UInt64Value {
	if x != nil {
		return x.PositionInBlock
	}
	return nil
}

func (x *ClientMeta_AdditionalEthV2BeaconBlockExecutionTransactionData) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

func (x *ClientMeta_AdditionalEthV2BeaconBlockExecutionTransactionData) GetCallDataSize() string {
	if x != nil {
		return x.CallDataSize
	}
	return ""
}

func (x *ClientMeta_AdditionalEthV2BeaconBlockExecutionTransactionData) GetBlobSidecarsSize() string {
	if x != nil {
		return x.BlobSidecarsSize
	}
	return ""
}

func (x *ClientMeta_AdditionalEthV2BeaconBlockExecutionTransactionData) GetBlobSidecarsEmptySize() string {
	if x != nil {
		return x.BlobSidecarsEmptySize
	}
	return ""
}

type ClientMeta_AdditionalEthV2BeaconBlockWithdrawalData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Block contains the information about the block that we are deriving the
	// withdrawal from.
	Block *BlockIdentifier `protobuf:"bytes,1,opt,name=block,proto3" json:"block,omitempty"`
}

func (x *ClientMeta_AdditionalEthV2BeaconBlockWithdrawalData) Reset() {
	*x = ClientMeta_AdditionalEthV2BeaconBlockWithdrawalData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientMeta_AdditionalEthV2BeaconBlockWithdrawalData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientMeta_AdditionalEthV2BeaconBlockWithdrawalData) ProtoMessage() {}

func (x *ClientMeta_AdditionalEthV2BeaconBlockWithdrawalData) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientMeta_AdditionalEthV2BeaconBlockWithdrawalData.ProtoReflect.Descriptor instead.
func (*ClientMeta_AdditionalEthV2BeaconBlockWithdrawalData) Descriptor() ([]byte, []int) {
	return file_pkg_proto_xatu_event_ingester_proto_rawDescGZIP(), []int{15, 39}
}

func (x *ClientMeta_AdditionalEthV2BeaconBlockWithdrawalData) GetBlock() *BlockIdentifier {
	if x != nil {
		return x.Block
	}
	return nil
}

type ClientMeta_AdditionalBlockprintBlockClassificationData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Epoch contains the epoch information for the block classification.
	Epoch *EpochV2 `protobuf:"bytes,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	// Slot contains the slot information for the block classification.
	Slot *SlotV2 `protobuf:"bytes,2,opt,name=slot,proto3" json:"slot,omitempty"`
}

func (x *ClientMeta_AdditionalBlockprintBlockClassificationData) Reset() {
	*x = ClientMeta_AdditionalBlockprintBlockClassificationData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientMeta_AdditionalBlockprintBlockClassificationData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientMeta_AdditionalBlockprintBlockClassificationData) ProtoMessage() {}

func (x *ClientMeta_AdditionalBlockprintBlockClassificationData) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientMeta_AdditionalBlockprintBlockClassificationData.ProtoReflect.Descriptor instead.
func (*ClientMeta_AdditionalBlockprintBlockClassificationData) Descriptor() ([]byte, []int) {
	return file_pkg_proto_xatu_event_ingester_proto_rawDescGZIP(), []int{15, 40}
}

func (x *ClientMeta_AdditionalBlockprintBlockClassificationData) GetEpoch() *EpochV2 {
	if x != nil {
		return x.Epoch
	}
	return nil
}

func (x *ClientMeta_AdditionalBlockprintBlockClassificationData) GetSlot() *SlotV2 {
	if x != nil {
		return x.Slot
	}
	return nil
}

type ClientMeta_AttestationDataSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// RequestedAtSlotStartDiffMs is the difference how far in to the slot the
	// sentry was when it requested the attestation data snapshot (in
	// milliseconds).
	RequestedAtSlotStartDiffMs *wrapperspb.UInt64Value `protobuf:"bytes,1,opt,name=requested_at_slot_start_diff_ms,proto3" json:"requested_at_slot_start_diff_ms,omitempty"`
	// RequestDurationMs is the duration of the attestation data snapshot
	// request (in milliseconds).
	RequestDurationMs *wrapperspb.UInt64Value `protobuf:"bytes,2,opt,name=request_duration_ms,proto3" json:"request_duration_ms,omitempty"`
	// Timestamp is the timestamp of the attestation data snapshot.
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *ClientMeta_AttestationDataSnapshot) Reset() {
	*x = ClientMeta_AttestationDataSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientMeta_AttestationDataSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientMeta_AttestationDataSnapshot) ProtoMessage() {}

func (x *ClientMeta_AttestationDataSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientMeta_AttestationDataSnapshot.ProtoReflect.Descriptor instead.
func (*ClientMeta_AttestationDataSnapshot) Descriptor() ([]byte, []int) {
	return file_pkg_proto_xatu_event_ingester_proto_rawDescGZIP(), []int{15, 41}
}

func (x *ClientMeta_AttestationDataSnapshot) GetRequestedAtSlotStartDiffMs() *wrapperspb.UInt64Value {
	if x != nil {
		return x.RequestedAtSlotStartDiffMs
	}
	return nil
}

func (x *ClientMeta_AttestationDataSnapshot) GetRequestDurationMs() *wrapperspb.UInt64Value {
	if x != nil {
		return x.RequestDurationMs
	}
	return nil
}

func (x *ClientMeta_AttestationDataSnapshot) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type ClientMeta_AdditionalEthV1ValidatorAttestationDataData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Source contains information for the best currently justified checkpoint.
	Source *ClientMeta_AdditionalEthV1AttestationSourceV2Data `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	// Target contains information of the block at the start of the current
	// epoch.
	Target *ClientMeta_AdditionalEthV1AttestationTargetV2Data `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
	// Epoch contains the epoch information for the beacon committee.
	Epoch *EpochV2 `protobuf:"bytes,3,opt,name=epoch,proto3" json:"epoch,omitempty"`
	// Slot contains the slot information for the beacon committee.
	Slot *SlotV2 `protobuf:"bytes,4,opt,name=slot,proto3" json:"slot,omitempty"`
	// AttestationDataSnapshot is the snapshot of the attestation data
	Snapshot *ClientMeta_AttestationDataSnapshot `protobuf:"bytes,5,opt,name=Snapshot,json=snapshot,proto3" json:"Snapshot,omitempty"`
}

func (x *ClientMeta_AdditionalEthV1ValidatorAttestationDataData) Reset() {
	*x = ClientMeta_AdditionalEthV1ValidatorAttestationDataData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientMeta_AdditionalEthV1ValidatorAttestationDataData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientMeta_AdditionalEthV1ValidatorAttestationDataData) ProtoMessage() {}

func (x *ClientMeta_AdditionalEthV1ValidatorAttestationDataData) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientMeta_AdditionalEthV1ValidatorAttestationDataData.ProtoReflect.Descriptor instead.
func (*ClientMeta_AdditionalEthV1ValidatorAttestationDataData) Descriptor() ([]byte, []int) {
	return file_pkg_proto_xatu_event_ingester_proto_rawDescGZIP(), []int{15, 42}
}

func (x *ClientMeta_AdditionalEthV1ValidatorAttestationDataData) GetSource() *ClientMeta_AdditionalEthV1AttestationSourceV2Data {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *ClientMeta_AdditionalEthV1ValidatorAttestationDataData) GetTarget() *ClientMeta_AdditionalEthV1AttestationTargetV2Data {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *ClientMeta_AdditionalEthV1ValidatorAttestationDataData) GetEpoch() *EpochV2 {
	if x != nil {
		return x.Epoch
	}
	return nil
}

func (x *ClientMeta_AdditionalEthV1ValidatorAttestationDataData) GetSlot() *SlotV2 {
	if x != nil {
		return x.Slot
	}
	return nil
}

func (x *ClientMeta_AdditionalEthV1ValidatorAttestationDataData) GetSnapshot() *ClientMeta_AttestationDataSnapshot {
	if x != nil {
		return x.Snapshot
	}
	return nil
}

type ClientMeta_AdditionalEthV1EventsBlobSidecarData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Epoch contains the epoch information for the blob sidecar.
	Epoch *EpochV2 `protobuf:"bytes,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	// Slot contains the slot information for the blob sidecar.
	Slot *SlotV2 `protobuf:"bytes,2,opt,name=slot,proto3" json:"slot,omitempty"`
	// Propagation contains information about the propagation of the blob
	// sidecar.
	Propagation *PropagationV2 `protobuf:"bytes,3,opt,name=propagation,proto3" json:"propagation,omitempty"`
}

func (x *ClientMeta_AdditionalEthV1EventsBlobSidecarData) Reset() {
	*x = ClientMeta_AdditionalEthV1EventsBlobSidecarData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientMeta_AdditionalEthV1EventsBlobSidecarData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientMeta_AdditionalEthV1EventsBlobSidecarData) ProtoMessage() {}

func (x *ClientMeta_AdditionalEthV1EventsBlobSidecarData) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientMeta_AdditionalEthV1EventsBlobSidecarData.ProtoReflect.Descriptor instead.
func (*ClientMeta_AdditionalEthV1EventsBlobSidecarData) Descriptor() ([]byte, []int) {
	return file_pkg_proto_xatu_event_ingester_proto_rawDescGZIP(), []int{15, 43}
}

func (x *ClientMeta_AdditionalEthV1EventsBlobSidecarData) GetEpoch() *EpochV2 {
	if x != nil {
		return x.Epoch
	}
	return nil
}

func (x *ClientMeta_AdditionalEthV1EventsBlobSidecarData) GetSlot() *SlotV2 {
	if x != nil {
		return x.Slot
	}
	return nil
}

func (x *ClientMeta_AdditionalEthV1EventsBlobSidecarData) GetPropagation() *PropagationV2 {
	if x != nil {
		return x.Propagation
	}
	return nil
}

type ClientMeta_AdditionalEthV1BeaconBlobSidecarData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Epoch contains the epoch information for the blob sidecar.
	Epoch *EpochV2 `protobuf:"bytes,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	// Slot contains the slot information for the blob sidecar.
	Slot *SlotV2 `protobuf:"bytes,2,opt,name=slot,proto3" json:"slot,omitempty"`
	// DataSize contains the size of the blob sidecar in bytes.
	DataSize *wrapperspb.UInt64Value `protobuf:"bytes,3,opt,name=data_size,proto3" json:"data_size,omitempty"`
	// VersionedHash is the versioned hash for the blob sidecar.
	VersionedHash string `protobuf:"bytes,4,opt,name=versioned_hash,proto3" json:"versioned_hash,omitempty"`
	// DataEmptySize contains the amount of empty bytes of the blob sidecar.
	DataEmptySize *wrapperspb.UInt64Value `protobuf:"bytes,5,opt,name=data_empty_size,proto3" json:"data_empty_size,omitempty"`
}

func (x *ClientMeta_AdditionalEthV1BeaconBlobSidecarData) Reset() {
	*x = ClientMeta_AdditionalEthV1BeaconBlobSidecarData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientMeta_AdditionalEthV1BeaconBlobSidecarData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientMeta_AdditionalEthV1BeaconBlobSidecarData) ProtoMessage() {}

func (x *ClientMeta_AdditionalEthV1BeaconBlobSidecarData) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientMeta_AdditionalEthV1BeaconBlobSidecarData.ProtoReflect.Descriptor instead.
func (*ClientMeta_AdditionalEthV1BeaconBlobSidecarData) Descriptor() ([]byte, []int) {
	return file_pkg_proto_xatu_event_ingester_proto_rawDescGZIP(), []int{15, 44}
}

func (x *ClientMeta_AdditionalEthV1BeaconBlobSidecarData) GetEpoch() *EpochV2 {
	if x != nil {
		return x.Epoch
	}
	return nil
}

func (x *ClientMeta_AdditionalEthV1BeaconBlobSidecarData) GetSlot() *SlotV2 {
	if x != nil {
		return x.Slot
	}
	return nil
}

func (x *ClientMeta_AdditionalEthV1BeaconBlobSidecarData) GetDataSize() *wrapperspb.UInt64Value {
	if x != nil {
		return x.DataSize
	}
	return nil
}

func (x *ClientMeta_AdditionalEthV1BeaconBlobSidecarData) GetVersionedHash() string {
	if x != nil {
		return x.VersionedHash
	}
	return ""
}

func (x *ClientMeta_AdditionalEthV1BeaconBlobSidecarData) GetDataEmptySize() *wrapperspb.UInt64Value {
	if x != nil {
		return x.DataEmptySize
	}
	return nil
}

type ClientMeta_AdditionalBeaconP2PAttestationData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Source contains information for the best currently justified checkpoint.
	Source *ClientMeta_AdditionalEthV1AttestationSourceV2Data `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	// Target contains information of the block at the start of the current
	// epoch.
	Target *ClientMeta_AdditionalEthV1AttestationTargetV2Data `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
	// Slot contains the slot information for the attestation.
	Slot *SlotV2 `protobuf:"bytes,3,opt,name=slot,proto3" json:"slot,omitempty"`
	// Epoch contains the epoch information for the attestation.
	Epoch *EpochV2 `protobuf:"bytes,4,opt,name=epoch,proto3" json:"epoch,omitempty"`
	// Propagation contains information about the propagation of the
	// attestation.
	Propagation *PropagationV2 `protobuf:"bytes,5,opt,name=propagation,proto3" json:"propagation,omitempty"`
	// AttestingValidator contains data about the validator that created the
	// attestation. Note: only available for unaggregated attestations.
	AttestingValidator *AttestingValidatorV2 `protobuf:"bytes,6,opt,name=attesting_validator,proto3" json:"attesting_validator,omitempty"`
	// Peer contains information on the peer that sent us the attestation.
	Peer *libp2p.Peer `protobuf:"bytes,7,opt,name=peer,proto3" json:"peer,omitempty"`
	// Subnet is the subnet that the attestation was sent on.
	Subnet *wrapperspb.UInt32Value `protobuf:"bytes,8,opt,name=subnet,proto3" json:"subnet,omitempty"`
	// Validated is if the attestation was validated.
	Validated *wrapperspb.BoolValue `protobuf:"bytes,9,opt,name=validated,proto3" json:"validated,omitempty"`
}

func (x *ClientMeta_AdditionalBeaconP2PAttestationData) Reset() {
	*x = ClientMeta_AdditionalBeaconP2PAttestationData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientMeta_AdditionalBeaconP2PAttestationData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientMeta_AdditionalBeaconP2PAttestationData) ProtoMessage() {}

func (x *ClientMeta_AdditionalBeaconP2PAttestationData) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientMeta_AdditionalBeaconP2PAttestationData.ProtoReflect.Descriptor instead.
func (*ClientMeta_AdditionalBeaconP2PAttestationData) Descriptor() ([]byte, []int) {
	return file_pkg_proto_xatu_event_ingester_proto_rawDescGZIP(), []int{15, 45}
}

func (x *ClientMeta_AdditionalBeaconP2PAttestationData) GetSource() *ClientMeta_AdditionalEthV1AttestationSourceV2Data {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *ClientMeta_AdditionalBeaconP2PAttestationData) GetTarget() *ClientMeta_AdditionalEthV1AttestationTargetV2Data {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *ClientMeta_AdditionalBeaconP2PAttestationData) GetSlot() *SlotV2 {
	if x != nil {
		return x.Slot
	}
	return nil
}

func (x *ClientMeta_AdditionalBeaconP2PAttestationData) GetEpoch() *EpochV2 {
	if x != nil {
		return x.Epoch
	}
	return nil
}

func (x *ClientMeta_AdditionalBeaconP2PAttestationData) GetPropagation() *PropagationV2 {
	if x != nil {
		return x.Propagation
	}
	return nil
}

func (x *ClientMeta_AdditionalBeaconP2PAttestationData) GetAttestingValidator() *AttestingValidatorV2 {
	if x != nil {
		return x.AttestingValidator
	}
	return nil
}

func (x *ClientMeta_AdditionalBeaconP2PAttestationData) GetPeer() *libp2p.Peer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *ClientMeta_AdditionalBeaconP2PAttestationData) GetSubnet() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Subnet
	}
	return nil
}

func (x *ClientMeta_AdditionalBeaconP2PAttestationData) GetValidated() *wrapperspb.BoolValue {
	if x != nil {
		return x.Validated
	}
	return nil
}

type ClientMeta_AdditionalEthV1ProposerDutyData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Epoch contains the epoch information for the proposer duty.
	Epoch *EpochV2 `protobuf:"bytes,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	// Slot contains the slot information for the proposer duty.
	Slot *SlotV2 `protobuf:"bytes,2,opt,name=slot,proto3" json:"slot,omitempty"`
	// StateID is the state ID when the proposer duty was requested.
	// This can be used to determine if the proposer duty was canonical
	// by checking if the state_id is 'finalized'.
	StateId string `protobuf:"bytes,3,opt,name=state_id,proto3" json:"state_id,omitempty"`
}

func (x *ClientMeta_AdditionalEthV1ProposerDutyData) Reset() {
	*x = ClientMeta_AdditionalEthV1ProposerDutyData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientMeta_AdditionalEthV1ProposerDutyData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientMeta_AdditionalEthV1ProposerDutyData) ProtoMessage() {}

func (x *ClientMeta_AdditionalEthV1ProposerDutyData) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientMeta_AdditionalEthV1ProposerDutyData.ProtoReflect.Descriptor instead.
func (*ClientMeta_AdditionalEthV1ProposerDutyData) Descriptor() ([]byte, []int) {
	return file_pkg_proto_xatu_event_ingester_proto_rawDescGZIP(), []int{15, 46}
}

func (x *ClientMeta_AdditionalEthV1ProposerDutyData) GetEpoch() *EpochV2 {
	if x != nil {
		return x.Epoch
	}
	return nil
}

func (x *ClientMeta_AdditionalEthV1ProposerDutyData) GetSlot() *SlotV2 {
	if x != nil {
		return x.Slot
	}
	return nil
}

func (x *ClientMeta_AdditionalEthV1ProposerDutyData) GetStateId() string {
	if x != nil {
		return x.StateId
	}
	return ""
}

type ClientMeta_AdditionalEthV2BeaconBlockElaboratedAttestationData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Block contains the information about the block that we are deriving the
	// elaborated attestation from.
	Block *BlockIdentifier `protobuf:"bytes,1,opt,name=block,proto3" json:"block,omitempty"`
	// PositionInBlock is the position of the attestation in the block.
	PositionInBlock *wrapperspb.UInt64Value `protobuf:"bytes,2,opt,name=position_in_block,proto3" json:"position_in_block,omitempty"`
	// Epoch contains the epoch information for the slot of the attestation.
	Epoch *EpochV2 `protobuf:"bytes,3,opt,name=epoch,proto3" json:"epoch,omitempty"`
	// Slot contains the slot information for the slot of the attestation.
	Slot *SlotV2 `protobuf:"bytes,4,opt,name=slot,proto3" json:"slot,omitempty"`
	// Source contains information for source of the attestation.
	Source *ClientMeta_AdditionalEthV1AttestationSourceV2Data `protobuf:"bytes,5,opt,name=source,proto3" json:"source,omitempty"`
	// Target contains information of the block at the start of the current
	// epoch.
	Target *ClientMeta_AdditionalEthV1AttestationTargetV2Data `protobuf:"bytes,6,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *ClientMeta_AdditionalEthV2BeaconBlockElaboratedAttestationData) Reset() {
	*x = ClientMeta_AdditionalEthV2BeaconBlockElaboratedAttestationData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientMeta_AdditionalEthV2BeaconBlockElaboratedAttestationData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientMeta_AdditionalEthV2BeaconBlockElaboratedAttestationData) ProtoMessage() {}

func (x *ClientMeta_AdditionalEthV2BeaconBlockElaboratedAttestationData) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientMeta_AdditionalEthV2BeaconBlockElaboratedAttestationData.ProtoReflect.Descriptor instead.
func (*ClientMeta_AdditionalEthV2BeaconBlockElaboratedAttestationData) Descriptor() ([]byte, []int) {
	return file_pkg_proto_xatu_event_ingester_proto_rawDescGZIP(), []int{15, 47}
}

func (x *ClientMeta_AdditionalEthV2BeaconBlockElaboratedAttestationData) GetBlock() *BlockIdentifier {
	if x != nil {
		return x.Block
	}
	return nil
}

func (x *ClientMeta_AdditionalEthV2BeaconBlockElaboratedAttestationData) GetPositionInBlock() *wrapperspb.UInt64Value {
	if x != nil {
		return x.PositionInBlock
	}
	return nil
}

func (x *ClientMeta_AdditionalEthV2BeaconBlockElaboratedAttestationData) GetEpoch() *EpochV2 {
	if x != nil {
		return x.Epoch
	}
	return nil
}

func (x *ClientMeta_AdditionalEthV2BeaconBlockElaboratedAttestationData) GetSlot() *SlotV2 {
	if x != nil {
		return x.Slot
	}
	return nil
}

func (x *ClientMeta_AdditionalEthV2BeaconBlockElaboratedAttestationData) GetSource() *ClientMeta_AdditionalEthV1AttestationSourceV2Data {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *ClientMeta_AdditionalEthV2BeaconBlockElaboratedAttestationData) GetTarget() *ClientMeta_AdditionalEthV1AttestationTargetV2Data {
	if x != nil {
		return x.Target
	}
	return nil
}

// AdditionalLibP2PTraceAddPeerData: Holds additional data for an add peer event in LibP2P tracing.
type ClientMeta_AdditionalLibP2PTraceAddPeerData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *libp2p.TraceEventMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *ClientMeta_AdditionalLibP2PTraceAddPeerData) Reset() {
	*x = ClientMeta_AdditionalLibP2PTraceAddPeerData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientMeta_AdditionalLibP2PTraceAddPeerData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientMeta_AdditionalLibP2PTraceAddPeerData) ProtoMessage() {}

func (x *ClientMeta_AdditionalLibP2PTraceAddPeerData) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientMeta_AdditionalLibP2PTraceAddPeerData.ProtoReflect.Descriptor instead.
func (*ClientMeta_AdditionalLibP2PTraceAddPeerData) Descriptor() ([]byte, []int) {
	return file_pkg_proto_xatu_event_ingester_proto_rawDescGZIP(), []int{15, 48}
}

func (x *ClientMeta_AdditionalLibP2PTraceAddPeerData) GetMetadata() *libp2p.TraceEventMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// AdditionalLibP2PTraceRemovePeerData: Holds additional data for a remove peer event in LibP2P tracing.
type ClientMeta_AdditionalLibP2PTraceRemovePeerData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *libp2p.TraceEventMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *ClientMeta_AdditionalLibP2PTraceRemovePeerData) Reset() {
	*x = ClientMeta_AdditionalLibP2PTraceRemovePeerData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientMeta_AdditionalLibP2PTraceRemovePeerData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientMeta_AdditionalLibP2PTraceRemovePeerData) ProtoMessage() {}

func (x *ClientMeta_AdditionalLibP2PTraceRemovePeerData) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientMeta_AdditionalLibP2PTraceRemovePeerData.ProtoReflect.Descriptor instead.
func (*ClientMeta_AdditionalLibP2PTraceRemovePeerData) Descriptor() ([]byte, []int) {
	return file_pkg_proto_xatu_event_ingester_proto_rawDescGZIP(), []int{15, 49}
}

func (x *ClientMeta_AdditionalLibP2PTraceRemovePeerData) GetMetadata() *libp2p.TraceEventMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// AdditionalLibP2PTraceRecvRPCData: Holds additional data for a receive RPC event in LibP2P tracing.
type ClientMeta_AdditionalLibP2PTraceRecvRPCData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *libp2p.TraceEventMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *ClientMeta_AdditionalLibP2PTraceRecvRPCData) Reset() {
	*x = ClientMeta_AdditionalLibP2PTraceRecvRPCData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientMeta_AdditionalLibP2PTraceRecvRPCData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientMeta_AdditionalLibP2PTraceRecvRPCData) ProtoMessage() {}

func (x *ClientMeta_AdditionalLibP2PTraceRecvRPCData) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientMeta_AdditionalLibP2PTraceRecvRPCData.ProtoReflect.Descriptor instead.
func (*ClientMeta_AdditionalLibP2PTraceRecvRPCData) Descriptor() ([]byte, []int) {
	return file_pkg_proto_xatu_event_ingester_proto_rawDescGZIP(), []int{15, 50}
}

func (x *ClientMeta_AdditionalLibP2PTraceRecvRPCData) GetMetadata() *libp2p.TraceEventMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// AdditionalLibP2PTraceSendRPCData: Holds additional data for a send RPC event in LibP2P tracing.
type ClientMeta_AdditionalLibP2PTraceSendRPCData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *libp2p.TraceEventMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *ClientMeta_AdditionalLibP2PTraceSendRPCData) Reset() {
	*x = ClientMeta_AdditionalLibP2PTraceSendRPCData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientMeta_AdditionalLibP2PTraceSendRPCData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientMeta_AdditionalLibP2PTraceSendRPCData) ProtoMessage() {}

func (x *ClientMeta_AdditionalLibP2PTraceSendRPCData) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientMeta_AdditionalLibP2PTraceSendRPCData.ProtoReflect.Descriptor instead.
func (*ClientMeta_AdditionalLibP2PTraceSendRPCData) Descriptor() ([]byte, []int) {
	return file_pkg_proto_xatu_event_ingester_proto_rawDescGZIP(), []int{15, 51}
}

func (x *ClientMeta_AdditionalLibP2PTraceSendRPCData) GetMetadata() *libp2p.TraceEventMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// AdditionalLibP2PTraceJoinData: Holds additional data for a join event in LibP2P tracing.
type ClientMeta_AdditionalLibP2PTraceJoinData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *libp2p.TraceEventMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *ClientMeta_AdditionalLibP2PTraceJoinData) Reset() {
	*x = ClientMeta_AdditionalLibP2PTraceJoinData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientMeta_AdditionalLibP2PTraceJoinData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientMeta_AdditionalLibP2PTraceJoinData) ProtoMessage() {}

func (x *ClientMeta_AdditionalLibP2PTraceJoinData) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientMeta_AdditionalLibP2PTraceJoinData.ProtoReflect.Descriptor instead.
func (*ClientMeta_AdditionalLibP2PTraceJoinData) Descriptor() ([]byte, []int) {
	return file_pkg_proto_xatu_event_ingester_proto_rawDescGZIP(), []int{15, 52}
}

func (x *ClientMeta_AdditionalLibP2PTraceJoinData) GetMetadata() *libp2p.TraceEventMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// AdditionalLibP2PTraceConnectedData: Holds additional data for a connected event in LibP2P tracing.
type ClientMeta_AdditionalLibP2PTraceConnectedData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *libp2p.TraceEventMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *ClientMeta_AdditionalLibP2PTraceConnectedData) Reset() {
	*x = ClientMeta_AdditionalLibP2PTraceConnectedData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientMeta_AdditionalLibP2PTraceConnectedData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientMeta_AdditionalLibP2PTraceConnectedData) ProtoMessage() {}

func (x *ClientMeta_AdditionalLibP2PTraceConnectedData) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientMeta_AdditionalLibP2PTraceConnectedData.ProtoReflect.Descriptor instead.
func (*ClientMeta_AdditionalLibP2PTraceConnectedData) Descriptor() ([]byte, []int) {
	return file_pkg_proto_xatu_event_ingester_proto_rawDescGZIP(), []int{15, 53}
}

func (x *ClientMeta_AdditionalLibP2PTraceConnectedData) GetMetadata() *libp2p.TraceEventMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// AdditionalLibP2PTraceDisconnectedData: Holds additional data for a disconnected event in LibP2P tracing.
type ClientMeta_AdditionalLibP2PTraceDisconnectedData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *libp2p.TraceEventMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *ClientMeta_AdditionalLibP2PTraceDisconnectedData) Reset() {
	*x = ClientMeta_AdditionalLibP2PTraceDisconnectedData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientMeta_AdditionalLibP2PTraceDisconnectedData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientMeta_AdditionalLibP2PTraceDisconnectedData) ProtoMessage() {}

func (x *ClientMeta_AdditionalLibP2PTraceDisconnectedData) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientMeta_AdditionalLibP2PTraceDisconnectedData.ProtoReflect.Descriptor instead.
func (*ClientMeta_AdditionalLibP2PTraceDisconnectedData) Descriptor() ([]byte, []int) {
	return file_pkg_proto_xatu_event_ingester_proto_rawDescGZIP(), []int{15, 54}
}

func (x *ClientMeta_AdditionalLibP2PTraceDisconnectedData) GetMetadata() *libp2p.TraceEventMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// AdditionalLibP2PTraceHandleMetadataData: Holds additional data for a handle metadata event in LibP2P tracing.
type ClientMeta_AdditionalLibP2PTraceHandleMetadataData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *libp2p.TraceEventMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *ClientMeta_AdditionalLibP2PTraceHandleMetadataData) Reset() {
	*x = ClientMeta_AdditionalLibP2PTraceHandleMetadataData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientMeta_AdditionalLibP2PTraceHandleMetadataData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientMeta_AdditionalLibP2PTraceHandleMetadataData) ProtoMessage() {}

func (x *ClientMeta_AdditionalLibP2PTraceHandleMetadataData) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientMeta_AdditionalLibP2PTraceHandleMetadataData.ProtoReflect.Descriptor instead.
func (*ClientMeta_AdditionalLibP2PTraceHandleMetadataData) Descriptor() ([]byte, []int) {
	return file_pkg_proto_xatu_event_ingester_proto_rawDescGZIP(), []int{15, 55}
}

func (x *ClientMeta_AdditionalLibP2PTraceHandleMetadataData) GetMetadata() *libp2p.TraceEventMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// AdditionalLibP2PTraceHandleStatusData: Holds additional data for a handle status event in LibP2P tracing.
type ClientMeta_AdditionalLibP2PTraceHandleStatusData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *libp2p.TraceEventMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *ClientMeta_AdditionalLibP2PTraceHandleStatusData) Reset() {
	*x = ClientMeta_AdditionalLibP2PTraceHandleStatusData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientMeta_AdditionalLibP2PTraceHandleStatusData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientMeta_AdditionalLibP2PTraceHandleStatusData) ProtoMessage() {}

func (x *ClientMeta_AdditionalLibP2PTraceHandleStatusData) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientMeta_AdditionalLibP2PTraceHandleStatusData.ProtoReflect.Descriptor instead.
func (*ClientMeta_AdditionalLibP2PTraceHandleStatusData) Descriptor() ([]byte, []int) {
	return file_pkg_proto_xatu_event_ingester_proto_rawDescGZIP(), []int{15, 56}
}

func (x *ClientMeta_AdditionalLibP2PTraceHandleStatusData) GetMetadata() *libp2p.TraceEventMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// AdditionalLibP2PTraceHandleStreamData: Holds additional data for a the gossip sub handle stream event in LibP2P tracing.
type ClientMeta_AdditionalLibP2PTraceGossipSubBeaconBlockData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Epoch contains the epoch information for the beacon block.
	Epoch *EpochV2 `protobuf:"bytes,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	// Slot contains the slot information for the beacon block.
	Slot *SlotV2 `protobuf:"bytes,2,opt,name=slot,proto3" json:"slot,omitempty"`
	// WallclockEpoch contains the epoch information for the beacon block in the wall clock time.
	WallclockEpoch *EpochV2 `protobuf:"bytes,3,opt,name=wallclock_epoch,proto3" json:"wallclock_epoch,omitempty"`
	// WallclockSlot contains the slot information for the beacon block in the wall clock time.
	WallclockSlot *SlotV2 `protobuf:"bytes,4,opt,name=wallclock_slot,proto3" json:"wallclock_slot,omitempty"`
	// Propagation contains information about the propagation of the beacon block.
	Propagation *PropagationV2 `protobuf:"bytes,5,opt,name=propagation,proto3" json:"propagation,omitempty"`
	// Metadata contains additional trace event metadata.
	Metadata *libp2p.TraceEventMetadata `protobuf:"bytes,6,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Topic is the gossip sub topic the beacon block was received on.
	Topic *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=topic,proto3" json:"topic,omitempty"`
	// MessageSize is the size of the beacon block message in bytes.
	MessageSize *wrapperspb.UInt32Value `protobuf:"bytes,8,opt,name=message_size,proto3" json:"message_size,omitempty"`
	// MessageID is a unique identifier for the beacon block message.
	MessageId *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=message_id,proto3" json:"message_id,omitempty"`
}

func (x *ClientMeta_AdditionalLibP2PTraceGossipSubBeaconBlockData) Reset() {
	*x = ClientMeta_AdditionalLibP2PTraceGossipSubBeaconBlockData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientMeta_AdditionalLibP2PTraceGossipSubBeaconBlockData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientMeta_AdditionalLibP2PTraceGossipSubBeaconBlockData) ProtoMessage() {}

func (x *ClientMeta_AdditionalLibP2PTraceGossipSubBeaconBlockData) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientMeta_AdditionalLibP2PTraceGossipSubBeaconBlockData.ProtoReflect.Descriptor instead.
func (*ClientMeta_AdditionalLibP2PTraceGossipSubBeaconBlockData) Descriptor() ([]byte, []int) {
	return file_pkg_proto_xatu_event_ingester_proto_rawDescGZIP(), []int{15, 57}
}

func (x *ClientMeta_AdditionalLibP2PTraceGossipSubBeaconBlockData) GetEpoch() *EpochV2 {
	if x != nil {
		return x.Epoch
	}
	return nil
}

func (x *ClientMeta_AdditionalLibP2PTraceGossipSubBeaconBlockData) GetSlot() *SlotV2 {
	if x != nil {
		return x.Slot
	}
	return nil
}

func (x *ClientMeta_AdditionalLibP2PTraceGossipSubBeaconBlockData) GetWallclockEpoch() *EpochV2 {
	if x != nil {
		return x.WallclockEpoch
	}
	return nil
}

func (x *ClientMeta_AdditionalLibP2PTraceGossipSubBeaconBlockData) GetWallclockSlot() *SlotV2 {
	if x != nil {
		return x.WallclockSlot
	}
	return nil
}

func (x *ClientMeta_AdditionalLibP2PTraceGossipSubBeaconBlockData) GetPropagation() *PropagationV2 {
	if x != nil {
		return x.Propagation
	}
	return nil
}

func (x *ClientMeta_AdditionalLibP2PTraceGossipSubBeaconBlockData) GetMetadata() *libp2p.TraceEventMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ClientMeta_AdditionalLibP2PTraceGossipSubBeaconBlockData) GetTopic() *wrapperspb.StringValue {
	if x != nil {
		return x.Topic
	}
	return nil
}

func (x *ClientMeta_AdditionalLibP2PTraceGossipSubBeaconBlockData) GetMessageSize() *wrapperspb.UInt32Value {
	if x != nil {
		return x.MessageSize
	}
	return nil
}

func (x *ClientMeta_AdditionalLibP2PTraceGossipSubBeaconBlockData) GetMessageId() *wrapperspb.StringValue {
	if x != nil {
		return x.MessageId
	}
	return nil
}

type ClientMeta_AdditionalLibP2PTraceGossipSubBeaconAttestationSourceData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Epoch contains the epoch information for the source.
	Epoch *EpochV2 `protobuf:"bytes,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
}

func (x *ClientMeta_AdditionalLibP2PTraceGossipSubBeaconAttestationSourceData) Reset() {
	*x = ClientMeta_AdditionalLibP2PTraceGossipSubBeaconAttestationSourceData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientMeta_AdditionalLibP2PTraceGossipSubBeaconAttestationSourceData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientMeta_AdditionalLibP2PTraceGossipSubBeaconAttestationSourceData) ProtoMessage() {}

func (x *ClientMeta_AdditionalLibP2PTraceGossipSubBeaconAttestationSourceData) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientMeta_AdditionalLibP2PTraceGossipSubBeaconAttestationSourceData.ProtoReflect.Descriptor instead.
func (*ClientMeta_AdditionalLibP2PTraceGossipSubBeaconAttestationSourceData) Descriptor() ([]byte, []int) {
	return file_pkg_proto_xatu_event_ingester_proto_rawDescGZIP(), []int{15, 58}
}

func (x *ClientMeta_AdditionalLibP2PTraceGossipSubBeaconAttestationSourceData) GetEpoch() *EpochV2 {
	if x != nil {
		return x.Epoch
	}
	return nil
}

type ClientMeta_AdditionalLibP2PTraceGossipSubBeaconAttestationTargetData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Epoch contains the epoch information for the target.
	Epoch *EpochV2 `protobuf:"bytes,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
}

func (x *ClientMeta_AdditionalLibP2PTraceGossipSubBeaconAttestationTargetData) Reset() {
	*x = ClientMeta_AdditionalLibP2PTraceGossipSubBeaconAttestationTargetData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientMeta_AdditionalLibP2PTraceGossipSubBeaconAttestationTargetData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientMeta_AdditionalLibP2PTraceGossipSubBeaconAttestationTargetData) ProtoMessage() {}

func (x *ClientMeta_AdditionalLibP2PTraceGossipSubBeaconAttestationTargetData) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientMeta_AdditionalLibP2PTraceGossipSubBeaconAttestationTargetData.ProtoReflect.Descriptor instead.
func (*ClientMeta_AdditionalLibP2PTraceGossipSubBeaconAttestationTargetData) Descriptor() ([]byte, []int) {
	return file_pkg_proto_xatu_event_ingester_proto_rawDescGZIP(), []int{15, 59}
}

func (x *ClientMeta_AdditionalLibP2PTraceGossipSubBeaconAttestationTargetData) GetEpoch() *EpochV2 {
	if x != nil {
		return x.Epoch
	}
	return nil
}

type ClientMeta_AdditionalLibP2PTraceGossipSubBeaconAttestationData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Source contains information for the best currently justified checkpoint.
	Source *ClientMeta_AdditionalLibP2PTraceGossipSubBeaconAttestationSourceData `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	// Target contains information of the block at the start of the current
	// epoch.
	Target *ClientMeta_AdditionalLibP2PTraceGossipSubBeaconAttestationTargetData `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
	// Slot contains the slot information for the attestation.
	Slot *SlotV2 `protobuf:"bytes,3,opt,name=slot,proto3" json:"slot,omitempty"`
	// Epoch contains the epoch information for the attestation.
	Epoch *EpochV2 `protobuf:"bytes,4,opt,name=epoch,proto3" json:"epoch,omitempty"`
	// Propagation contains information about the propagation of the
	// attestation.
	Propagation *PropagationV2 `protobuf:"bytes,5,opt,name=propagation,proto3" json:"propagation,omitempty"`
	// AttestingValidator contains data about the validator that created the
	// attestation. Note: only available for unaggregated attestations.
	AttestingValidator *AttestingValidatorV2 `protobuf:"bytes,6,opt,name=attesting_validator,proto3" json:"attesting_validator,omitempty"`
	// WallclockEpoch contains the epoch information for the attestation on the wall clock when the attestation was received.
	WallclockEpoch *EpochV2 `protobuf:"bytes,7,opt,name=wallclock_epoch,proto3" json:"wallclock_epoch,omitempty"`
	// WallclockSlot contains the slot information for the attestation on the wall clock when the attestation was received.
	WallclockSlot *SlotV2 `protobuf:"bytes,8,opt,name=wallclock_slot,proto3" json:"wallclock_slot,omitempty"`
	// Metadata contains additional trace event metadata.
	Metadata *libp2p.TraceEventMetadata `protobuf:"bytes,9,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Topic is the gossip sub topic the beacon block was received on.
	Topic *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=topic,proto3" json:"topic,omitempty"`
	// MessageSize is the size of the beacon block message in bytes.
	MessageSize *wrapperspb.UInt32Value `protobuf:"bytes,11,opt,name=message_size,proto3" json:"message_size,omitempty"`
	// MessageID is a unique identifier for the beacon block message.
	MessageId *wrapperspb.StringValue `protobuf:"bytes,12,opt,name=message_id,proto3" json:"message_id,omitempty"`
}

func (x *ClientMeta_AdditionalLibP2PTraceGossipSubBeaconAttestationData) Reset() {
	*x = ClientMeta_AdditionalLibP2PTraceGossipSubBeaconAttestationData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientMeta_AdditionalLibP2PTraceGossipSubBeaconAttestationData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientMeta_AdditionalLibP2PTraceGossipSubBeaconAttestationData) ProtoMessage() {}

func (x *ClientMeta_AdditionalLibP2PTraceGossipSubBeaconAttestationData) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientMeta_AdditionalLibP2PTraceGossipSubBeaconAttestationData.ProtoReflect.Descriptor instead.
func (*ClientMeta_AdditionalLibP2PTraceGossipSubBeaconAttestationData) Descriptor() ([]byte, []int) {
	return file_pkg_proto_xatu_event_ingester_proto_rawDescGZIP(), []int{15, 60}
}

func (x *ClientMeta_AdditionalLibP2PTraceGossipSubBeaconAttestationData) GetSource() *ClientMeta_AdditionalLibP2PTraceGossipSubBeaconAttestationSourceData {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *ClientMeta_AdditionalLibP2PTraceGossipSubBeaconAttestationData) GetTarget() *ClientMeta_AdditionalLibP2PTraceGossipSubBeaconAttestationTargetData {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *ClientMeta_AdditionalLibP2PTraceGossipSubBeaconAttestationData) GetSlot() *SlotV2 {
	if x != nil {
		return x.Slot
	}
	return nil
}

func (x *ClientMeta_AdditionalLibP2PTraceGossipSubBeaconAttestationData) GetEpoch() *EpochV2 {
	if x != nil {
		return x.Epoch
	}
	return nil
}

func (x *ClientMeta_AdditionalLibP2PTraceGossipSubBeaconAttestationData) GetPropagation() *PropagationV2 {
	if x != nil {
		return x.Propagation
	}
	return nil
}

func (x *ClientMeta_AdditionalLibP2PTraceGossipSubBeaconAttestationData) GetAttestingValidator() *AttestingValidatorV2 {
	if x != nil {
		return x.AttestingValidator
	}
	return nil
}

func (x *ClientMeta_AdditionalLibP2PTraceGossipSubBeaconAttestationData) GetWallclockEpoch() *EpochV2 {
	if x != nil {
		return x.WallclockEpoch
	}
	return nil
}

func (x *ClientMeta_AdditionalLibP2PTraceGossipSubBeaconAttestationData) GetWallclockSlot() *SlotV2 {
	if x != nil {
		return x.WallclockSlot
	}
	return nil
}

func (x *ClientMeta_AdditionalLibP2PTraceGossipSubBeaconAttestationData) GetMetadata() *libp2p.TraceEventMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ClientMeta_AdditionalLibP2PTraceGossipSubBeaconAttestationData) GetTopic() *wrapperspb.StringValue {
	if x != nil {
		return x.Topic
	}
	return nil
}

func (x *ClientMeta_AdditionalLibP2PTraceGossipSubBeaconAttestationData) GetMessageSize() *wrapperspb.UInt32Value {
	if x != nil {
		return x.MessageSize
	}
	return nil
}

func (x *ClientMeta_AdditionalLibP2PTraceGossipSubBeaconAttestationData) GetMessageId() *wrapperspb.StringValue {
	if x != nil {
		return x.MessageId
	}
	return nil
}

type ClientMeta_AdditionalLibP2PTraceGossipSubBlobSidecarData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Epoch contains the epoch information for the blob sidecar.
	Epoch *EpochV2 `protobuf:"bytes,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	// Slot contains the slot information for the blob sidecar.
	Slot *SlotV2 `protobuf:"bytes,2,opt,name=slot,proto3" json:"slot,omitempty"`
	// WallclockEpoch contains the epoch information for the blob sidecar in the wall clock time.
	WallclockEpoch *EpochV2 `protobuf:"bytes,3,opt,name=wallclock_epoch,proto3" json:"wallclock_epoch,omitempty"`
	// WallclockSlot contains the slot information for the blob sidecar in the wall clock time.
	WallclockSlot *SlotV2 `protobuf:"bytes,4,opt,name=wallclock_slot,proto3" json:"wallclock_slot,omitempty"`
	// Propagation contains information about the propagation of the blob sidecar.
	Propagation *PropagationV2 `protobuf:"bytes,5,opt,name=propagation,proto3" json:"propagation,omitempty"`
	// Metadata contains additional trace event metadata.
	Metadata *libp2p.TraceEventMetadata `protobuf:"bytes,6,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Topic is the gossip sub topic the blob sidecar was received on.
	Topic *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=topic,proto3" json:"topic,omitempty"`
	// MessageSize is the size of the blob sidecar message in bytes.
	MessageSize *wrapperspb.UInt32Value `protobuf:"bytes,8,opt,name=message_size,proto3" json:"message_size,omitempty"`
	// MessageID is a unique identifier for the blob sidecar message.
	MessageId *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=message_id,proto3" json:"message_id,omitempty"`
}

func (x *ClientMeta_AdditionalLibP2PTraceGossipSubBlobSidecarData) Reset() {
	*x = ClientMeta_AdditionalLibP2PTraceGossipSubBlobSidecarData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientMeta_AdditionalLibP2PTraceGossipSubBlobSidecarData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientMeta_AdditionalLibP2PTraceGossipSubBlobSidecarData) ProtoMessage() {}

func (x *ClientMeta_AdditionalLibP2PTraceGossipSubBlobSidecarData) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientMeta_AdditionalLibP2PTraceGossipSubBlobSidecarData.ProtoReflect.Descriptor instead.
func (*ClientMeta_AdditionalLibP2PTraceGossipSubBlobSidecarData) Descriptor() ([]byte, []int) {
	return file_pkg_proto_xatu_event_ingester_proto_rawDescGZIP(), []int{15, 61}
}

func (x *ClientMeta_AdditionalLibP2PTraceGossipSubBlobSidecarData) GetEpoch() *EpochV2 {
	if x != nil {
		return x.Epoch
	}
	return nil
}

func (x *ClientMeta_AdditionalLibP2PTraceGossipSubBlobSidecarData) GetSlot() *SlotV2 {
	if x != nil {
		return x.Slot
	}
	return nil
}

func (x *ClientMeta_AdditionalLibP2PTraceGossipSubBlobSidecarData) GetWallclockEpoch() *EpochV2 {
	if x != nil {
		return x.WallclockEpoch
	}
	return nil
}

func (x *ClientMeta_AdditionalLibP2PTraceGossipSubBlobSidecarData) GetWallclockSlot() *SlotV2 {
	if x != nil {
		return x.WallclockSlot
	}
	return nil
}

func (x *ClientMeta_AdditionalLibP2PTraceGossipSubBlobSidecarData) GetPropagation() *PropagationV2 {
	if x != nil {
		return x.Propagation
	}
	return nil
}

func (x *ClientMeta_AdditionalLibP2PTraceGossipSubBlobSidecarData) GetMetadata() *libp2p.TraceEventMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ClientMeta_AdditionalLibP2PTraceGossipSubBlobSidecarData) GetTopic() *wrapperspb.StringValue {
	if x != nil {
		return x.Topic
	}
	return nil
}

func (x *ClientMeta_AdditionalLibP2PTraceGossipSubBlobSidecarData) GetMessageSize() *wrapperspb.UInt32Value {
	if x != nil {
		return x.MessageSize
	}
	return nil
}

func (x *ClientMeta_AdditionalLibP2PTraceGossipSubBlobSidecarData) GetMessageId() *wrapperspb.StringValue {
	if x != nil {
		return x.MessageId
	}
	return nil
}

// AdditionalEthV1ValidatorsData contains additional data about the eth v1 validators.
type ClientMeta_AdditionalEthV1ValidatorsData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epoch *EpochV2 `protobuf:"bytes,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
}

func (x *ClientMeta_AdditionalEthV1ValidatorsData) Reset() {
	*x = ClientMeta_AdditionalEthV1ValidatorsData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientMeta_AdditionalEthV1ValidatorsData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientMeta_AdditionalEthV1ValidatorsData) ProtoMessage() {}

func (x *ClientMeta_AdditionalEthV1ValidatorsData) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientMeta_AdditionalEthV1ValidatorsData.ProtoReflect.Descriptor instead.
func (*ClientMeta_AdditionalEthV1ValidatorsData) Descriptor() ([]byte, []int) {
	return file_pkg_proto_xatu_event_ingester_proto_rawDescGZIP(), []int{15, 62}
}

func (x *ClientMeta_AdditionalEthV1ValidatorsData) GetEpoch() *EpochV2 {
	if x != nil {
		return x.Epoch
	}
	return nil
}

type ClientMeta_Ethereum_Network struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name is the name of the network.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// ID is the network ID of the network.
	Id uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ClientMeta_Ethereum_Network) Reset() {
	*x = ClientMeta_Ethereum_Network{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientMeta_Ethereum_Network) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientMeta_Ethereum_Network) ProtoMessage() {}

func (x *ClientMeta_Ethereum_Network) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientMeta_Ethereum_Network.ProtoReflect.Descriptor instead.
func (*ClientMeta_Ethereum_Network) Descriptor() ([]byte, []int) {
	return file_pkg_proto_xatu_event_ingester_proto_rawDescGZIP(), []int{15, 0, 0}
}

func (x *ClientMeta_Ethereum_Network) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClientMeta_Ethereum_Network) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ClientMeta_Ethereum_Execution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ForkID is the fork ID of the execution client.
	ForkId *ForkID `protobuf:"bytes,1,opt,name=fork_id,proto3" json:"fork_id,omitempty"`
}

func (x *ClientMeta_Ethereum_Execution) Reset() {
	*x = ClientMeta_Ethereum_Execution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientMeta_Ethereum_Execution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientMeta_Ethereum_Execution) ProtoMessage() {}

func (x *ClientMeta_Ethereum_Execution) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientMeta_Ethereum_Execution.ProtoReflect.Descriptor instead.
func (*ClientMeta_Ethereum_Execution) Descriptor() ([]byte, []int) {
	return file_pkg_proto_xatu_event_ingester_proto_rawDescGZIP(), []int{15, 0, 1}
}

func (x *ClientMeta_Ethereum_Execution) GetForkId() *ForkID {
	if x != nil {
		return x.ForkId
	}
	return nil
}

type ClientMeta_Ethereum_Consensus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Implementation is the name of the consensus client.
	Implementation string `protobuf:"bytes,1,opt,name=implementation,proto3" json:"implementation,omitempty"`
	// Version is the version of the consensus client.
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *ClientMeta_Ethereum_Consensus) Reset() {
	*x = ClientMeta_Ethereum_Consensus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientMeta_Ethereum_Consensus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientMeta_Ethereum_Consensus) ProtoMessage() {}

func (x *ClientMeta_Ethereum_Consensus) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientMeta_Ethereum_Consensus.ProtoReflect.Descriptor instead.
func (*ClientMeta_Ethereum_Consensus) Descriptor() ([]byte, []int) {
	return file_pkg_proto_xatu_event_ingester_proto_rawDescGZIP(), []int{15, 0, 2}
}

func (x *ClientMeta_Ethereum_Consensus) GetImplementation() string {
	if x != nil {
		return x.Implementation
	}
	return ""
}

func (x *ClientMeta_Ethereum_Consensus) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type ServerMeta_Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// / DateTime is the date and time of the event as seen by the server.
	ReceivedDateTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=received_date_time,proto3" json:"received_date_time,omitempty"`
}

func (x *ServerMeta_Event) Reset() {
	*x = ServerMeta_Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerMeta_Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerMeta_Event) ProtoMessage() {}

func (x *ServerMeta_Event) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerMeta_Event.ProtoReflect.Descriptor instead.
func (*ServerMeta_Event) Descriptor() ([]byte, []int) {
	return file_pkg_proto_xatu_event_ingester_proto_rawDescGZIP(), []int{16, 0}
}

func (x *ServerMeta_Event) GetReceivedDateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ReceivedDateTime
	}
	return nil
}

type ServerMeta_Geo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// City is the city of the client as far as the server is concerned.
	City string `protobuf:"bytes,1,opt,name=City,json=city,proto3" json:"City,omitempty"`
	// Country is the country of the client as far as the server is concerned.
	Country string `protobuf:"bytes,2,opt,name=Country,json=country,proto3" json:"Country,omitempty"`
	// CountryCode is the country code of the client as far as the server is
	// concerned.
	CountryCode string `protobuf:"bytes,3,opt,name=CountryCode,json=country_code,proto3" json:"CountryCode,omitempty"`
	// ContinentCode is the continent code of the client as far as the server
	// is concerned.
	ContinentCode string `protobuf:"bytes,4,opt,name=ContinentCode,json=continent_code,proto3" json:"ContinentCode,omitempty"`
	// Latitude is the latitude of the client as far as the server is
	// concerned.
	Latitude float64 `protobuf:"fixed64,5,opt,name=Latitude,json=latitude,proto3" json:"Latitude,omitempty"`
	// Longitude is the longitude of the client as far as the server is
	// concerned.
	Longitude float64 `protobuf:"fixed64,6,opt,name=Longitude,json=longitude,proto3" json:"Longitude,omitempty"`
	// AutonomousSystemNumber is the autonomous system number of the client as
	// far as the server is concerned.
	AutonomousSystemNumber uint32 `protobuf:"varint,7,opt,name=AutonomousSystemNumber,json=autonomous_system_number,proto3" json:"AutonomousSystemNumber,omitempty"`
	// AutonomousSystemOrganization is the autonomous system organization of
	// the client as far as the server is concerned.
	AutonomousSystemOrganization string `protobuf:"bytes,8,opt,name=AutonomousSystemOrganization,json=autonomous_system_organization,proto3" json:"AutonomousSystemOrganization,omitempty"`
}

func (x *ServerMeta_Geo) Reset() {
	*x = ServerMeta_Geo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerMeta_Geo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerMeta_Geo) ProtoMessage() {}

func (x *ServerMeta_Geo) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerMeta_Geo.ProtoReflect.Descriptor instead.
func (*ServerMeta_Geo) Descriptor() ([]byte, []int) {
	return file_pkg_proto_xatu_event_ingester_proto_rawDescGZIP(), []int{16, 1}
}

func (x *ServerMeta_Geo) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *ServerMeta_Geo) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *ServerMeta_Geo) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *ServerMeta_Geo) GetContinentCode() string {
	if x != nil {
		return x.ContinentCode
	}
	return ""
}

func (x *ServerMeta_Geo) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *ServerMeta_Geo) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *ServerMeta_Geo) GetAutonomousSystemNumber() uint32 {
	if x != nil {
		return x.AutonomousSystemNumber
	}
	return 0
}

func (x *ServerMeta_Geo) GetAutonomousSystemOrganization() string {
	if x != nil {
		return x.AutonomousSystemOrganization
	}
	return ""
}

type ServerMeta_Client struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IP is the ip of the client as far as the server is concerned.
	IP string `protobuf:"bytes,1,opt,name=IP,json=ip,proto3" json:"IP,omitempty"`
	// Geo contains geo information about the client as far as the server is
	// concerned.
	Geo *ServerMeta_Geo `protobuf:"bytes,2,opt,name=geo,proto3" json:"geo,omitempty"`
}

func (x *ServerMeta_Client) Reset() {
	*x = ServerMeta_Client{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerMeta_Client) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerMeta_Client) ProtoMessage() {}

func (x *ServerMeta_Client) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerMeta_Client.ProtoReflect.Descriptor instead.
func (*ServerMeta_Client) Descriptor() ([]byte, []int) {
	return file_pkg_proto_xatu_event_ingester_proto_rawDescGZIP(), []int{16, 2}
}

func (x *ServerMeta_Client) GetIP() string {
	if x != nil {
		return x.IP
	}
	return ""
}

func (x *ServerMeta_Client) GetGeo() *ServerMeta_Geo {
	if x != nil {
		return x.Geo
	}
	return nil
}

type ServerMeta_Peer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Geo contains geo information about the peer
	Geo *ServerMeta_Geo `protobuf:"bytes,1,opt,name=geo,proto3" json:"geo,omitempty"`
}

func (x *ServerMeta_Peer) Reset() {
	*x = ServerMeta_Peer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerMeta_Peer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerMeta_Peer) ProtoMessage() {}

func (x *ServerMeta_Peer) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerMeta_Peer.ProtoReflect.Descriptor instead.
func (*ServerMeta_Peer) Descriptor() ([]byte, []int) {
	return file_pkg_proto_xatu_event_ingester_proto_rawDescGZIP(), []int{16, 3}
}

func (x *ServerMeta_Peer) GetGeo() *ServerMeta_Geo {
	if x != nil {
		return x.Geo
	}
	return nil
}

type ServerMeta_AdditionalBeaconP2PAttestationData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Peer *ServerMeta_Peer `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
}

func (x *ServerMeta_AdditionalBeaconP2PAttestationData) Reset() {
	*x = ServerMeta_AdditionalBeaconP2PAttestationData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerMeta_AdditionalBeaconP2PAttestationData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerMeta_AdditionalBeaconP2PAttestationData) ProtoMessage() {}

func (x *ServerMeta_AdditionalBeaconP2PAttestationData) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerMeta_AdditionalBeaconP2PAttestationData.ProtoReflect.Descriptor instead.
func (*ServerMeta_AdditionalBeaconP2PAttestationData) Descriptor() ([]byte, []int) {
	return file_pkg_proto_xatu_event_ingester_proto_rawDescGZIP(), []int{16, 4}
}

func (x *ServerMeta_AdditionalBeaconP2PAttestationData) GetPeer() *ServerMeta_Peer {
	if x != nil {
		return x.Peer
	}
	return nil
}

type ServerMeta_AdditionalLibp2PTraceConnectedData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Peer *ServerMeta_Peer `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
}

func (x *ServerMeta_AdditionalLibp2PTraceConnectedData) Reset() {
	*x = ServerMeta_AdditionalLibp2PTraceConnectedData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerMeta_AdditionalLibp2PTraceConnectedData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerMeta_AdditionalLibp2PTraceConnectedData) ProtoMessage() {}

func (x *ServerMeta_AdditionalLibp2PTraceConnectedData) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerMeta_AdditionalLibp2PTraceConnectedData.ProtoReflect.Descriptor instead.
func (*ServerMeta_AdditionalLibp2PTraceConnectedData) Descriptor() ([]byte, []int) {
	return file_pkg_proto_xatu_event_ingester_proto_rawDescGZIP(), []int{16, 5}
}

func (x *ServerMeta_AdditionalLibp2PTraceConnectedData) GetPeer() *ServerMeta_Peer {
	if x != nil {
		return x.Peer
	}
	return nil
}

type ServerMeta_AdditionalLibp2PTraceDisconnectedData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Peer *ServerMeta_Peer `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
}

func (x *ServerMeta_AdditionalLibp2PTraceDisconnectedData) Reset() {
	*x = ServerMeta_AdditionalLibp2PTraceDisconnectedData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerMeta_AdditionalLibp2PTraceDisconnectedData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerMeta_AdditionalLibp2PTraceDisconnectedData) ProtoMessage() {}

func (x *ServerMeta_AdditionalLibp2PTraceDisconnectedData) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_xatu_event_ingester_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerMeta_AdditionalLibp2PTraceDisconnectedData.ProtoReflect.Descriptor instead.
func (*ServerMeta_AdditionalLibp2PTraceDisconnectedData) Descriptor() ([]byte, []int) {
	return file_pkg_proto_xatu_event_ingester_proto_rawDescGZIP(), []int{16, 6}
}

func (x *ServerMeta_AdditionalLibp2PTraceDisconnectedData) GetPeer() *ServerMeta_Peer {
	if x != nil {
		return x.Peer
	}
	return nil
}

var File_pkg_proto_xatu_event_ingester_proto protoreflect.FileDescriptor

var file_pkg_proto_xatu_event_ingester_proto_rawDesc = []byte{
	0x0a, 0x23, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x78, 0x61, 0x74, 0x75,
	0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x78, 0x61, 0x74, 0x75, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x70, 0x6b,
	0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x65, 0x74, 0x68, 0x2f, 0x76, 0x31, 0x2f, 0x61,
	0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1b, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x65, 0x74, 0x68, 0x2f,
	0x76, 0x31, 0x2f, 0x62, 0x6c, 0x6f, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x70,
	0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x65, 0x74, 0x68, 0x2f, 0x76, 0x31, 0x2f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x70, 0x6b,
	0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x65, 0x74, 0x68, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d,
	0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x65, 0x74, 0x68, 0x2f, 0x76, 0x31,
	0x2f, 0x64, 0x75, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x70,
	0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x65, 0x74, 0x68, 0x2f, 0x76, 0x32, 0x2f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x70, 0x6b,
	0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x65, 0x74, 0x68, 0x2f, 0x76, 0x32, 0x2f, 0x77,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x22, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x65, 0x74, 0x68, 0x2f,
	0x76, 0x31, 0x2f, 0x66, 0x6f, 0x72, 0x6b, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x65, 0x74, 0x68, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x70, 0x6b, 0x67, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x65, 0x74, 0x68, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x20, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x65, 0x74,
	0x68, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x6c, 0x69, 0x62, 0x70, 0x32, 0x70, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1c, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6c, 0x69,
	0x62, 0x70, 0x32, 0x70, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x24, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6c, 0x69, 0x62, 0x70,
	0x32, 0x70, 0x2f, 0x67, 0x6f, 0x73, 0x73, 0x69, 0x70, 0x73, 0x75, 0x62, 0x2f, 0x65, 0x74, 0x68,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x43, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a,
	0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x78, 0x61, 0x74, 0x75, 0x2e, 0x44, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x64, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x16, 0x0a, 0x14, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x65, 0x0a, 0x05, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x16, 0x0a, 0x06,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x07, 0x45,
	0x70, 0x6f, 0x63, 0x68, 0x56, 0x32, 0x12, 0x34, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x0f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x22, 0x64, 0x0a, 0x04, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x44, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x84, 0x01, 0x0a, 0x06, 0x53, 0x6c, 0x6f,
	0x74, 0x56, 0x32, 0x12, 0x34, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x0f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x22,
	0x30, 0x0a, 0x06, 0x46, 0x6f, 0x72, 0x6b, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x65, 0x78,
	0x74, 0x22, 0x37, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x28, 0x0a, 0x0f, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64,
	0x69, 0x66, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x73, 0x6c, 0x6f, 0x74, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x22, 0x57, 0x0a, 0x0d, 0x50, 0x72,
	0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x32, 0x12, 0x46, 0x0a, 0x0f, 0x73,
	0x6c, 0x6f, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0f, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64,
	0x69, 0x66, 0x66, 0x22, 0x54, 0x0a, 0x12, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x92, 0x01, 0x0a, 0x14, 0x41, 0x74,
	0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x56, 0x32, 0x12, 0x46, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x74, 0x65, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x32, 0x0a, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xaa,
	0x01, 0x0a, 0x14, 0x44, 0x65, 0x62, 0x75, 0x67, 0x46, 0x6f, 0x72, 0x6b, 0x43, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x6f, 0x72, 0x67, 0x12, 0x2f, 0x0a, 0x06, 0x62, 0x65, 0x66, 0x6f, 0x72,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x65,
	0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6f, 0x72, 0x6b, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x52, 0x06, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x61, 0x66, 0x74, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x65,
	0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6f, 0x72, 0x6b, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x52, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x65, 0x74,
	0x68, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52,
	0x65, 0x6f, 0x72, 0x67, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0xb2, 0x01, 0x0a, 0x16,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x46, 0x6f, 0x72, 0x6b, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x6f, 0x72, 0x67, 0x56, 0x32, 0x12, 0x31, 0x0a, 0x06, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x65, 0x74,
	0x68, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6f, 0x72, 0x6b, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x56,
	0x32, 0x52, 0x06, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x61, 0x66, 0x74,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e,
	0x65, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6f, 0x72, 0x6b, 0x43, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x56, 0x32, 0x52, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x05, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x78, 0x61, 0x74, 0x75,
	0x2e, 0x65, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x52, 0x65, 0x6f, 0x72, 0x67, 0x56, 0x32, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x22, 0x44, 0x0a, 0x0a, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x36,
	0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x65, 0x74, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x22, 0x86, 0x01, 0x0a, 0x0f, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x05, 0x65, 0x70,
	0x6f, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x78, 0x61, 0x74, 0x75,
	0x2e, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x56, 0x32, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12,
	0x20, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x78, 0x61, 0x74, 0x75, 0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x56, 0x32, 0x52, 0x04, 0x73, 0x6c, 0x6f,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x72,
	0x6f, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x22,
	0xff, 0x9b, 0x01, 0x0a, 0x0a, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x26, 0x0a,
	0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x6f, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x64,
	0x72, 0x69, 0x66, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x64, 0x72, 0x69, 0x66, 0x74, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x74, 0x68, 0x65, 0x72,
	0x65, 0x75, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x78, 0x61, 0x74, 0x75,
	0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x45, 0x74, 0x68, 0x65,
	0x72, 0x65, 0x75, 0x6d, 0x52, 0x08, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x12, 0x34,
	0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61,
	0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x12, 0x80, 0x01, 0x0a, 0x19, 0x65, 0x74, 0x68, 0x5f, 0x76, 0x31, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x74, 0x68, 0x56, 0x31, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x48,
	0x00, 0x52, 0x24, 0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x45, 0x54,
	0x48, 0x5f, 0x56, 0x31, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x41, 0x54, 0x54, 0x45,
	0x53, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x12, 0x6b, 0x0a, 0x12, 0x65, 0x74, 0x68, 0x5f, 0x76,
	0x31, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x45, 0x74, 0x68, 0x56, 0x31, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x48, 0x65, 0x61, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x1d, 0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x41, 0x50,
	0x49, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x56, 0x31, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x53, 0x5f,
	0x48, 0x45, 0x41, 0x44, 0x12, 0x6e, 0x0a, 0x13, 0x65, 0x74, 0x68, 0x5f, 0x76, 0x31, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d,
	0x65, 0x74, 0x61, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x74,
	0x68, 0x56, 0x31, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x61,
	0x74, 0x61, 0x48, 0x00, 0x52, 0x1e, 0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x49,
	0x5f, 0x45, 0x54, 0x48, 0x5f, 0x56, 0x31, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x42,
	0x4c, 0x4f, 0x43, 0x4b, 0x12, 0x88, 0x01, 0x0a, 0x1c, 0x65, 0x74, 0x68, 0x5f, 0x76, 0x31, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6e, 0x74, 0x61, 0x72, 0x79,
	0x5f, 0x65, 0x78, 0x69, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x78, 0x61,
	0x74, 0x75, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x41, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x74, 0x68, 0x56, 0x31, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x56, 0x6f, 0x6c, 0x75, 0x6e, 0x74, 0x61, 0x72, 0x79, 0x45, 0x78, 0x69, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x27, 0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x41,
	0x50, 0x49, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x56, 0x31, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x53,
	0x5f, 0x56, 0x4f, 0x4c, 0x55, 0x4e, 0x54, 0x41, 0x52, 0x59, 0x5f, 0x45, 0x58, 0x49, 0x54, 0x12,
	0x9a, 0x01, 0x0a, 0x22, 0x65, 0x74, 0x68, 0x5f, 0x76, 0x31, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x78,
	0x61, 0x74, 0x75, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x41,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x74, 0x68, 0x56, 0x31, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x2d, 0x42,
	0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x56, 0x31,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x46, 0x49, 0x4e, 0x41, 0x4c, 0x49, 0x5a, 0x45,
	0x44, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x12, 0x7f, 0x0a, 0x19,
	0x65, 0x74, 0x68, 0x5f, 0x76, 0x31, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x6f, 0x72, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x34, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74,
	0x61, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x74, 0x68, 0x56,
	0x31, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x6f, 0x72,
	0x67, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x24, 0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f,
	0x41, 0x50, 0x49, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x56, 0x31, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x53, 0x5f, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x4f, 0x52, 0x47, 0x12, 0x9f, 0x01,
	0x0a, 0x24, 0x65, 0x74, 0x68, 0x5f, 0x76, 0x31, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6e, 0x64,
	0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x78,
	0x61, 0x74, 0x75, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x41,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x74, 0x68, 0x56, 0x31, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x2f,
	0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x56,
	0x31, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x49, 0x42,
	0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x4f, 0x46, 0x12,
	0x65, 0x0a, 0x13, 0x6d, 0x65, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x78,
	0x61, 0x74, 0x75, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x41,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x6d, 0x70, 0x6f, 0x6f, 0x6c,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x48,
	0x00, 0x52, 0x13, 0x4d, 0x45, 0x4d, 0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x12, 0x6e, 0x0a, 0x13, 0x65, 0x74, 0x68, 0x5f, 0x76, 0x32,
	0x5f, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x45, 0x74, 0x68, 0x56, 0x32, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x1e, 0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x41,
	0x50, 0x49, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x56, 0x32, 0x5f, 0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e,
	0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x12, 0x7c, 0x0a, 0x18, 0x65, 0x74, 0x68, 0x5f, 0x76, 0x31,
	0x5f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x66, 0x6f, 0x72, 0x6b, 0x5f, 0x63, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x74, 0x68, 0x56, 0x31, 0x44, 0x65, 0x62, 0x75, 0x67, 0x46,
	0x6f, 0x72, 0x6b, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52,
	0x23, 0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x45, 0x54, 0x48, 0x5f,
	0x56, 0x31, 0x5f, 0x44, 0x45, 0x42, 0x55, 0x47, 0x5f, 0x46, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x48,
	0x4f, 0x49, 0x43, 0x45, 0x12, 0x8d, 0x01, 0x0a, 0x1e, 0x65, 0x74, 0x68, 0x5f, 0x76, 0x31, 0x5f,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x66, 0x6f, 0x72, 0x6b, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x5f, 0x72, 0x65, 0x6f, 0x72, 0x67, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e,
	0x78, 0x61, 0x74, 0x75, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x2e,
	0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x74, 0x68, 0x56, 0x31, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x46, 0x6f, 0x72, 0x6b, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x4f, 0x72, 0x67, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x29, 0x42, 0x45, 0x41, 0x43, 0x4f,
	0x4e, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x56, 0x31, 0x5f, 0x44, 0x45, 0x42,
	0x55, 0x47, 0x5f, 0x46, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x48, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x52,
	0x45, 0x4f, 0x52, 0x47, 0x12, 0x7a, 0x0a, 0x17, 0x65, 0x74, 0x68, 0x5f, 0x76, 0x31, 0x5f, 0x62,
	0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x45, 0x74, 0x68, 0x56, 0x31, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x22, 0x42, 0x45,
	0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x56, 0x31, 0x5f,
	0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x54, 0x45, 0x45,
	0x12, 0x97, 0x01, 0x0a, 0x21, 0x65, 0x74, 0x68, 0x5f, 0x76, 0x31, 0x5f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x78,
	0x61, 0x74, 0x75, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x41,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x74, 0x68, 0x56, 0x31, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x2c, 0x42, 0x45,
	0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x56, 0x31, 0x5f,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x41, 0x54, 0x54, 0x45, 0x53, 0x54,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x12, 0x88, 0x01, 0x0a, 0x1c, 0x65,
	0x74, 0x68, 0x5f, 0x76, 0x31, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x61, 0x74, 0x74,
	0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x32, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x37, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d,
	0x65, 0x74, 0x61, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x74,
	0x68, 0x56, 0x31, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x56, 0x32, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x27, 0x42, 0x45,
	0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x56, 0x31, 0x5f,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x41, 0x54, 0x54, 0x45, 0x53, 0x54, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x56, 0x32, 0x12, 0x73, 0x0a, 0x15, 0x65, 0x74, 0x68, 0x5f, 0x76, 0x31, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x76, 0x32, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x45, 0x74, 0x68, 0x56, 0x31, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x48, 0x65, 0x61, 0x64,
	0x56, 0x32, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x20, 0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e,
	0x5f, 0x41, 0x50, 0x49, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x56, 0x31, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x53, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x5f, 0x56, 0x32, 0x12, 0x76, 0x0a, 0x16, 0x65, 0x74,
	0x68, 0x5f, 0x76, 0x31, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x76, 0x32, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x78, 0x61, 0x74,
	0x75, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x41, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x74, 0x68, 0x56, 0x31, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x56, 0x32, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52,
	0x21, 0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x45, 0x54, 0x48, 0x5f,
	0x56, 0x31, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f,
	0x56, 0x32, 0x12, 0x90, 0x01, 0x0a, 0x1f, 0x65, 0x74, 0x68, 0x5f, 0x76, 0x31, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6e, 0x74, 0x61, 0x72, 0x79, 0x5f, 0x65,
	0x78, 0x69, 0x74, 0x5f, 0x76, 0x32, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x78,
	0x61, 0x74, 0x75, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x41,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x74, 0x68, 0x56, 0x31, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x56, 0x6f, 0x6c, 0x75, 0x6e, 0x74, 0x61, 0x72, 0x79, 0x45, 0x78, 0x69,
	0x74, 0x56, 0x32, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x2a, 0x42, 0x45, 0x41, 0x43, 0x4f,
	0x4e, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x56, 0x31, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x53, 0x5f, 0x56, 0x4f, 0x4c, 0x55, 0x4e, 0x54, 0x41, 0x52, 0x59, 0x5f, 0x45, 0x58,
	0x49, 0x54, 0x5f, 0x56, 0x32, 0x12, 0xa2, 0x01, 0x0a, 0x25, 0x65, 0x74, 0x68, 0x5f, 0x76, 0x31,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x76, 0x32, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x45, 0x74, 0x68, 0x56, 0x31, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x46, 0x69, 0x6e,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x56, 0x32, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x30, 0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e,
	0x5f, 0x41, 0x50, 0x49, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x56, 0x31, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x53, 0x5f, 0x46, 0x49, 0x4e, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x5f, 0x43, 0x48, 0x45,
	0x43, 0x4b, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x56, 0x32, 0x12, 0x87, 0x01, 0x0a, 0x1c, 0x65,
	0x74, 0x68, 0x5f, 0x76, 0x31, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x5f, 0x72, 0x65, 0x6f, 0x72, 0x67, 0x5f, 0x76, 0x32, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x36, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d,
	0x65, 0x74, 0x61, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x74,
	0x68, 0x56, 0x31, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x65,
	0x6f, 0x72, 0x67, 0x56, 0x32, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x27, 0x42, 0x45, 0x41,
	0x43, 0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x56, 0x31, 0x5f, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x4f, 0x52,
	0x47, 0x5f, 0x56, 0x32, 0x12, 0xa7, 0x01, 0x0a, 0x27, 0x65, 0x74, 0x68, 0x5f, 0x76, 0x31, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x76, 0x32,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x45, 0x74, 0x68, 0x56, 0x31, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x64, 0x50, 0x72, 0x6f,
	0x6f, 0x66, 0x56, 0x32, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x32, 0x42, 0x45, 0x41, 0x43,
	0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x56, 0x31, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x4f, 0x46, 0x5f, 0x56, 0x32, 0x12, 0x6d,
	0x0a, 0x16, 0x6d, 0x65, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x32, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33,
	0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61,
	0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x6d, 0x70, 0x6f,
	0x6f, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x32, 0x44,
	0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x16, 0x4d, 0x45, 0x4d, 0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x56, 0x32, 0x12, 0x76, 0x0a,
	0x16, 0x65, 0x74, 0x68, 0x5f, 0x76, 0x32, 0x5f, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x76, 0x32, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x78, 0x61, 0x74, 0x75, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x2e,
	0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x74, 0x68, 0x56, 0x32, 0x42,
	0x65, 0x61, 0x63, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x56, 0x32, 0x44, 0x61, 0x74, 0x61,
	0x48, 0x00, 0x52, 0x21, 0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x45,
	0x54, 0x48, 0x5f, 0x56, 0x32, 0x5f, 0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x42, 0x4c, 0x4f,
	0x43, 0x4b, 0x5f, 0x56, 0x32, 0x12, 0x84, 0x01, 0x0a, 0x1b, 0x65, 0x74, 0x68, 0x5f, 0x76, 0x31,
	0x5f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x66, 0x6f, 0x72, 0x6b, 0x5f, 0x63, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x5f, 0x76, 0x32, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x78, 0x61,
	0x74, 0x75, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x41, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x74, 0x68, 0x56, 0x31, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x46, 0x6f, 0x72, 0x6b, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x56, 0x32, 0x44, 0x61,
	0x74, 0x61, 0x48, 0x00, 0x52, 0x26, 0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x49,
	0x5f, 0x45, 0x54, 0x48, 0x5f, 0x56, 0x31, 0x5f, 0x44, 0x45, 0x42, 0x55, 0x47, 0x5f, 0x46, 0x4f,
	0x52, 0x4b, 0x5f, 0x43, 0x48, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x56, 0x32, 0x12, 0x95, 0x01, 0x0a,
	0x21, 0x65, 0x74, 0x68, 0x5f, 0x76, 0x31, 0x5f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x66, 0x6f,
	0x72, 0x6b, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x6f, 0x72, 0x67, 0x5f,
	0x76, 0x32, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x74, 0x68, 0x56, 0x31, 0x44, 0x65, 0x62, 0x75, 0x67, 0x46,
	0x6f, 0x72, 0x6b, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x4f, 0x72, 0x67, 0x56, 0x32,
	0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x2c, 0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x41,
	0x50, 0x49, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x56, 0x31, 0x5f, 0x44, 0x45, 0x42, 0x55, 0x47, 0x5f,
	0x46, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x48, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x4f, 0x52,
	0x47, 0x5f, 0x56, 0x32, 0x12, 0xa2, 0x01, 0x0a, 0x25, 0x65, 0x74, 0x68, 0x5f, 0x76, 0x32, 0x5f,
	0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x61, 0x74, 0x74,
	0x65, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x18, 0x23,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x45, 0x74, 0x68, 0x56, 0x32, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x72, 0x53, 0x6c, 0x61, 0x73, 0x68, 0x69, 0x6e,
	0x67, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x30, 0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f,
	0x41, 0x50, 0x49, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x56, 0x32, 0x5f, 0x42, 0x45, 0x41, 0x43, 0x4f,
	0x4e, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x41, 0x54, 0x54, 0x45, 0x53, 0x54, 0x45, 0x52,
	0x5f, 0x53, 0x4c, 0x41, 0x53, 0x48, 0x49, 0x4e, 0x47, 0x12, 0xa2, 0x01, 0x0a, 0x25, 0x65, 0x74,
	0x68, 0x5f, 0x76, 0x32, 0x5f, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x6c, 0x61, 0x73, 0x68,
	0x69, 0x6e, 0x67, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x78, 0x61, 0x74, 0x75,
	0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x41, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x74, 0x68, 0x56, 0x32, 0x42, 0x65, 0x61, 0x63, 0x6f,
	0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x53, 0x6c,
	0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x30, 0x42, 0x45,
	0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x56, 0x32, 0x5f,
	0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x50, 0x52, 0x4f,
	0x50, 0x4f, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x4c, 0x41, 0x53, 0x48, 0x49, 0x4e, 0x47, 0x12, 0x99,
	0x01, 0x0a, 0x22, 0x65, 0x74, 0x68, 0x5f, 0x76, 0x32, 0x5f, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e,
	0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6e, 0x74, 0x61, 0x72, 0x79,
	0x5f, 0x65, 0x78, 0x69, 0x74, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x78, 0x61,
	0x74, 0x75, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x41, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x74, 0x68, 0x56, 0x32, 0x42, 0x65, 0x61,
	0x63, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6e, 0x74, 0x61, 0x72,
	0x79, 0x45, 0x78, 0x69, 0x74, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x2d, 0x42, 0x45, 0x41,
	0x43, 0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x56, 0x32, 0x5f, 0x42,
	0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x56, 0x4f, 0x4c, 0x55,
	0x4e, 0x54, 0x41, 0x52, 0x59, 0x5f, 0x45, 0x58, 0x49, 0x54, 0x12, 0x85, 0x01, 0x0a, 0x1b, 0x65,
	0x74, 0x68, 0x5f, 0x76, 0x32, 0x5f, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x36, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x74, 0x61, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x74, 0x68,
	0x56, 0x32, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x26, 0x42, 0x45, 0x41, 0x43,
	0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x56, 0x32, 0x5f, 0x42, 0x45,
	0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x44, 0x45, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x12, 0xb2, 0x01, 0x0a, 0x2b, 0x65, 0x74, 0x68, 0x5f, 0x76, 0x32, 0x5f, 0x62, 0x65,
	0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x62, 0x6c, 0x73, 0x5f, 0x74,
	0x6f, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x74, 0x68, 0x56, 0x32, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x4c, 0x53, 0x54, 0x6f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52,
	0x36, 0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x45, 0x54, 0x48, 0x5f,
	0x56, 0x32, 0x5f, 0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f,
	0x42, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x12, 0xae, 0x01, 0x0a, 0x29, 0x65, 0x74, 0x68, 0x5f,
	0x76, 0x32, 0x5f, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x78, 0x61,
	0x74, 0x75, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x41, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x74, 0x68, 0x56, 0x32, 0x42, 0x65, 0x61,
	0x63, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61,
	0x48, 0x00, 0x52, 0x34, 0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x45,
	0x54, 0x48, 0x5f, 0x56, 0x32, 0x5f, 0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x42, 0x4c, 0x4f,
	0x43, 0x4b, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x12, 0x8e, 0x01, 0x0a, 0x1e, 0x65, 0x74, 0x68,
	0x5f, 0x76, 0x32, 0x5f, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x18, 0x29, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x39, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d,
	0x65, 0x74, 0x61, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x74,
	0x68, 0x56, 0x32, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x29,
	0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x56,
	0x32, 0x5f, 0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x57,
	0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x41, 0x4c, 0x12, 0x82, 0x01, 0x0a, 0x1a, 0x65, 0x74,
	0x68, 0x5f, 0x76, 0x31, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x62, 0x6c, 0x6f, 0x62,
	0x5f, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35,
	0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61,
	0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x74, 0x68, 0x56, 0x31,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x6c, 0x6f, 0x62, 0x53, 0x69, 0x64, 0x65, 0x63, 0x61,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x25, 0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f,
	0x41, 0x50, 0x49, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x56, 0x31, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x53, 0x5f, 0x42, 0x4c, 0x4f, 0x42, 0x5f, 0x53, 0x49, 0x44, 0x45, 0x43, 0x41, 0x52, 0x12, 0x88,
	0x01, 0x0a, 0x1f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x1f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x50,
	0x52, 0x49, 0x4e, 0x54, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53,
	0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x12, 0x82, 0x01, 0x0a, 0x1a, 0x65, 0x74,
	0x68, 0x5f, 0x76, 0x31, 0x5f, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x62,
	0x5f, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35,
	0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61,
	0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x74, 0x68, 0x56, 0x31,
	0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x62, 0x53, 0x69, 0x64, 0x65, 0x63, 0x61,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x25, 0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f,
	0x41, 0x50, 0x49, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x56, 0x31, 0x5f, 0x42, 0x45, 0x41, 0x43, 0x4f,
	0x4e, 0x5f, 0x42, 0x4c, 0x4f, 0x42, 0x5f, 0x53, 0x49, 0x44, 0x45, 0x43, 0x41, 0x52, 0x12, 0x6d,
	0x0a, 0x16, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x70, 0x32, 0x70, 0x5f, 0x61, 0x74, 0x74,
	0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33,
	0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61,
	0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x65, 0x61, 0x63, 0x6f,
	0x6e, 0x50, 0x32, 0x50, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x16, 0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x50, 0x32,
	0x50, 0x5f, 0x41, 0x54, 0x54, 0x45, 0x53, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x12, 0x71, 0x0a,
	0x14, 0x65, 0x74, 0x68, 0x5f, 0x76, 0x31, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72,
	0x5f, 0x64, 0x75, 0x74, 0x79, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x78, 0x61,
	0x74, 0x75, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x41, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x74, 0x68, 0x56, 0x31, 0x50, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x65, 0x72, 0x44, 0x75, 0x74, 0x79, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52,
	0x1f, 0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x45, 0x54, 0x48, 0x5f,
	0x56, 0x31, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x45, 0x52, 0x5f, 0x44, 0x55, 0x54, 0x59,
	0x12, 0xb1, 0x01, 0x0a, 0x2a, 0x65, 0x74, 0x68, 0x5f, 0x76, 0x32, 0x5f, 0x62, 0x65, 0x61, 0x63,
	0x6f, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x65, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x45, 0x74, 0x68, 0x56, 0x32, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x45, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x74, 0x65,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x35, 0x42,
	0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x56, 0x32,
	0x5f, 0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x45, 0x4c,
	0x41, 0x42, 0x4f, 0x52, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x41, 0x54, 0x54, 0x45, 0x53, 0x54, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x12, 0x69, 0x0a, 0x15, 0x6c, 0x69, 0x62, 0x70, 0x32, 0x70, 0x5f, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x18, 0x30, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x4c, 0x69, 0x62, 0x50, 0x32, 0x50, 0x54, 0x72, 0x61, 0x63, 0x65, 0x41, 0x64, 0x64, 0x50, 0x65,
	0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x15, 0x4c, 0x49, 0x42, 0x50, 0x32, 0x50,
	0x5f, 0x54, 0x52, 0x41, 0x43, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x12,
	0x72, 0x0a, 0x18, 0x6c, 0x69, 0x62, 0x70, 0x32, 0x70, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f,
	0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x18, 0x31, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x34, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d,
	0x65, 0x74, 0x61, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4c, 0x69,
	0x62, 0x50, 0x32, 0x50, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50,
	0x65, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x18, 0x4c, 0x49, 0x42, 0x50, 0x32,
	0x50, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x50,
	0x45, 0x45, 0x52, 0x12, 0x69, 0x0a, 0x15, 0x6c, 0x69, 0x62, 0x70, 0x32, 0x70, 0x5f, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x76, 0x5f, 0x72, 0x70, 0x63, 0x18, 0x32, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4c,
	0x69, 0x62, 0x50, 0x32, 0x50, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x65, 0x63, 0x76, 0x52, 0x50,
	0x43, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x15, 0x4c, 0x49, 0x42, 0x50, 0x32, 0x50, 0x5f,
	0x54, 0x52, 0x41, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x56, 0x5f, 0x52, 0x50, 0x43, 0x12, 0x69,
	0x0a, 0x15, 0x6c, 0x69, 0x62, 0x70, 0x32, 0x70, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x73,
	0x65, 0x6e, 0x64, 0x5f, 0x72, 0x70, 0x63, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x78, 0x61, 0x74, 0x75, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x2e,
	0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x62, 0x50, 0x32, 0x50,
	0x54, 0x72, 0x61, 0x63, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x50, 0x43, 0x44, 0x61, 0x74, 0x61,
	0x48, 0x00, 0x52, 0x15, 0x4c, 0x49, 0x42, 0x50, 0x32, 0x50, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x45,
	0x5f, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x52, 0x50, 0x43, 0x12, 0x5e, 0x0a, 0x11, 0x6c, 0x69, 0x62,
	0x70, 0x32, 0x70, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x18, 0x34,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x4c, 0x69, 0x62, 0x50, 0x32, 0x50, 0x54, 0x72, 0x61, 0x63, 0x65, 0x4a, 0x6f, 0x69, 0x6e,
	0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x11, 0x4c, 0x49, 0x42, 0x50, 0x32, 0x50, 0x5f, 0x54,
	0x52, 0x41, 0x43, 0x45, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x12, 0x6d, 0x0a, 0x16, 0x6c, 0x69, 0x62,
	0x70, 0x32, 0x70, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x78, 0x61, 0x74, 0x75,
	0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x41, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x62, 0x50, 0x32, 0x50, 0x54, 0x72, 0x61, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00,
	0x52, 0x16, 0x4c, 0x49, 0x42, 0x50, 0x32, 0x50, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x45, 0x5f, 0x43,
	0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x12, 0x77, 0x0a, 0x19, 0x6c, 0x69, 0x62, 0x70,
	0x32, 0x70, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x78, 0x61,
	0x74, 0x75, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x41, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x62, 0x50, 0x32, 0x50, 0x54, 0x72,
	0x61, 0x63, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x1a, 0x4c, 0x49, 0x42, 0x50, 0x32, 0x50, 0x5f, 0x54, 0x52,
	0x41, 0x43, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45,
	0x44, 0x12, 0x7e, 0x0a, 0x1c, 0x6c, 0x69, 0x62, 0x70, 0x32, 0x70, 0x5f, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x62, 0x50, 0x32, 0x50, 0x54, 0x72, 0x61, 0x63, 0x65, 0x48,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x44, 0x61, 0x74,
	0x61, 0x48, 0x00, 0x52, 0x1c, 0x4c, 0x49, 0x42, 0x50, 0x32, 0x50, 0x5f, 0x54, 0x52, 0x41, 0x43,
	0x45, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x44, 0x41, 0x54,
	0x41, 0x12, 0x78, 0x0a, 0x1a, 0x6c, 0x69, 0x62, 0x70, 0x32, 0x70, 0x5f, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x4c, 0x69, 0x62, 0x50, 0x32, 0x50, 0x54, 0x72, 0x61, 0x63, 0x65, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52,
	0x1a, 0x4c, 0x49, 0x42, 0x50, 0x32, 0x50, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x45, 0x5f, 0x48, 0x41,
	0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x12, 0x92, 0x01, 0x0a, 0x23,
	0x6c, 0x69, 0x62, 0x70, 0x32, 0x70, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x67, 0x6f, 0x73,
	0x73, 0x69, 0x70, 0x73, 0x75, 0x62, 0x5f, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x18, 0x39, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x78, 0x61, 0x74, 0x75,
	0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x41, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x62, 0x50, 0x32, 0x50, 0x54, 0x72, 0x61, 0x63,
	0x65, 0x47, 0x6f, 0x73, 0x73, 0x69, 0x70, 0x53, 0x75, 0x62, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x23, 0x4c, 0x49, 0x42,
	0x50, 0x32, 0x50, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x45, 0x5f, 0x47, 0x4f, 0x53, 0x53, 0x49, 0x50,
	0x53, 0x55, 0x42, 0x5f, 0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b,
	0x12, 0xa4, 0x01, 0x0a, 0x29, 0x6c, 0x69, 0x62, 0x70, 0x32, 0x70, 0x5f, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x5f, 0x67, 0x6f, 0x73, 0x73, 0x69, 0x70, 0x73, 0x75, 0x62, 0x5f, 0x62, 0x65, 0x61, 0x63,
	0x6f, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x3a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x4c, 0x69, 0x62, 0x50, 0x32, 0x50, 0x54, 0x72, 0x61, 0x63, 0x65, 0x47, 0x6f, 0x73, 0x73,
	0x69, 0x70, 0x53, 0x75, 0x62, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x65, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x29, 0x4c, 0x49,
	0x42, 0x50, 0x32, 0x50, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x45, 0x5f, 0x47, 0x4f, 0x53, 0x53, 0x49,
	0x50, 0x53, 0x55, 0x42, 0x5f, 0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x41, 0x54, 0x54, 0x45,
	0x53, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x12, 0x92, 0x01, 0x0a, 0x23, 0x6c, 0x69, 0x62, 0x70,
	0x32, 0x70, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x67, 0x6f, 0x73, 0x73, 0x69, 0x70, 0x73,
	0x75, 0x62, 0x5f, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x18,
	0x3b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x4c, 0x69, 0x62, 0x50, 0x32, 0x50, 0x54, 0x72, 0x61, 0x63, 0x65, 0x47, 0x6f, 0x73,
	0x73, 0x69, 0x70, 0x53, 0x75, 0x62, 0x42, 0x6c, 0x6f, 0x62, 0x53, 0x69, 0x64, 0x65, 0x63, 0x61,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x23, 0x4c, 0x49, 0x42, 0x50, 0x32, 0x50, 0x5f,
	0x54, 0x52, 0x41, 0x43, 0x45, 0x5f, 0x47, 0x4f, 0x53, 0x53, 0x49, 0x50, 0x53, 0x55, 0x42, 0x5f,
	0x42, 0x4c, 0x4f, 0x42, 0x5f, 0x53, 0x49, 0x44, 0x45, 0x43, 0x41, 0x52, 0x12, 0x70, 0x0a, 0x11,
	0x65, 0x74, 0x68, 0x5f, 0x76, 0x31, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x73, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x74, 0x68, 0x56, 0x31, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x73, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x23, 0x42, 0x45, 0x41, 0x43, 0x4f,
	0x4e, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x56, 0x31, 0x5f, 0x42, 0x45, 0x41,
	0x43, 0x4f, 0x4e, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x4f, 0x52, 0x53, 0x1a, 0x80,
	0x03, 0x0a, 0x08, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x12, 0x3b, 0x0a, 0x07, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x78,
	0x61, 0x74, 0x75, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x45,
	0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52,
	0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x41, 0x0a, 0x09, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x78, 0x61,
	0x74, 0x75, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x45, 0x74,
	0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x09, 0x63,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61,
	0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x73, 0x75, 0x73, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x1a, 0x2d,
	0x0a, 0x07, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x1a, 0x33, 0x0a,
	0x09, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x07, 0x66, 0x6f,
	0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x78, 0x61,
	0x74, 0x75, 0x2e, 0x46, 0x6f, 0x72, 0x6b, 0x49, 0x44, 0x52, 0x07, 0x66, 0x6f, 0x72, 0x6b, 0x5f,
	0x69, 0x64, 0x1a, 0x4d, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x12,
	0x26, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x49, 0x0a, 0x24,
	0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x74, 0x68, 0x56, 0x31, 0x41,
	0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x45, 0x70, 0x6f, 0x63, 0x68,
	0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x1a, 0x4d, 0x0a, 0x26, 0x41, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x74, 0x68, 0x56, 0x31, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x32, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x23, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x56, 0x32, 0x52,
	0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x1a, 0x49, 0x0a, 0x24, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x74, 0x68, 0x56, 0x31, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x21,
	0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x78, 0x61, 0x74, 0x75, 0x2e, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63,
	0x68, 0x1a, 0x4d, 0x0a, 0x26, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45,
	0x74, 0x68, 0x56, 0x31, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x56, 0x32, 0x44, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x05, 0x65,
	0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x78, 0x61, 0x74,
	0x75, 0x2e, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x56, 0x32, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68,
	0x1a, 0x88, 0x03, 0x0a, 0x24, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45,
	0x74, 0x68, 0x56, 0x31, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4d, 0x0a, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x78, 0x61, 0x74, 0x75,
	0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x41, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x74, 0x68, 0x56, 0x31, 0x41, 0x74, 0x74, 0x65, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x4d, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x74, 0x68, 0x56, 0x31, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x53, 0x6c, 0x6f,
	0x74, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x21, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x45, 0x70,
	0x6f, 0x63, 0x68, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x33, 0x0a, 0x0b, 0x70, 0x72,
	0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x4a, 0x0a, 0x13, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x78,
	0x61, 0x74, 0x75, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x13, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x1a, 0x96, 0x03, 0x0a, 0x26,
	0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x74, 0x68, 0x56, 0x31, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x56, 0x32, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4f, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x45, 0x74, 0x68, 0x56, 0x31, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x32, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x4f, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x74, 0x68, 0x56, 0x31, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x56, 0x32, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x20, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x53, 0x6c,
	0x6f, 0x74, 0x56, 0x32, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x23, 0x0a, 0x05, 0x65, 0x70,
	0x6f, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x78, 0x61, 0x74, 0x75,
	0x2e, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x56, 0x32, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12,
	0x35, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x50, 0x72, 0x6f, 0x70,
	0x61, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x32, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x70, 0x61,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x13, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x56, 0x32, 0x52,
	0x13, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x1a, 0x97, 0x01, 0x0a, 0x1d, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x45, 0x74, 0x68, 0x56, 0x31, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x48, 0x65,
	0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x45, 0x70, 0x6f,
	0x63, 0x68, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x1e, 0x0a, 0x04, 0x73, 0x6c, 0x6f,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x53,
	0x6c, 0x6f, 0x74, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x33, 0x0a, 0x0b, 0x70, 0x72, 0x6f,
	0x70, 0x61, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x9f,
	0x01, 0x0a, 0x1f, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x74, 0x68,
	0x56, 0x31, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x48, 0x65, 0x61, 0x64, 0x56, 0x32, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x23, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x56, 0x32,
	0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x20, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x53, 0x6c, 0x6f,
	0x74, 0x56, 0x32, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x35, 0x0a, 0x0b, 0x70, 0x72, 0x6f,
	0x70, 0x61, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x56, 0x32, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x1a, 0x98, 0x01, 0x0a, 0x1e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45,
	0x74, 0x68, 0x56, 0x31, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x52,
	0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x1e, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x53, 0x6c, 0x6f, 0x74,
	0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x33, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x78, 0x61,
	0x74, 0x75, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xa0, 0x01, 0x0a, 0x20,
	0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x74, 0x68, 0x56, 0x31, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x56, 0x32, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x23, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x56, 0x32, 0x52, 0x05,
	0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x20, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x56,
	0x32, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x35, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x70, 0x61,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x78,
	0x61, 0x74, 0x75, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56,
	0x32, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x4b,
	0x0a, 0x26, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x74, 0x68, 0x56,
	0x31, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x56, 0x6f, 0x6c, 0x75, 0x6e, 0x74, 0x61, 0x72, 0x79,
	0x45, 0x78, 0x69, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x45,
	0x70, 0x6f, 0x63, 0x68, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x1a, 0x4f, 0x0a, 0x28, 0x41,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x74, 0x68, 0x56, 0x31, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x56, 0x6f, 0x6c, 0x75, 0x6e, 0x74, 0x61, 0x72, 0x79, 0x45, 0x78, 0x69,
	0x74, 0x56, 0x32, 0x44, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x45, 0x70,
	0x6f, 0x63, 0x68, 0x56, 0x32, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x1a, 0x51, 0x0a, 0x2c,
	0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x74, 0x68, 0x56, 0x31, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x05,
	0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x78, 0x61,
	0x74, 0x75, 0x2e, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x1a,
	0x55, 0x0a, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x74, 0x68,
	0x56, 0x31, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x56, 0x32, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x23, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x56, 0x32, 0x52,
	0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x1a, 0x9d, 0x01, 0x0a, 0x23, 0x41, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x74, 0x68, 0x56, 0x31, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x6f, 0x72, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x21,
	0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x78, 0x61, 0x74, 0x75, 0x2e, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63,
	0x68, 0x12, 0x1e, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x04, 0x73, 0x6c, 0x6f,
	0x74, 0x12, 0x33, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x50, 0x72,
	0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x70, 0x61,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xa5, 0x01, 0x0a, 0x25, 0x41, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x74, 0x68, 0x56, 0x31, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x6f, 0x72, 0x67, 0x56, 0x32, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x23, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x56, 0x32, 0x52, 0x05,
	0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x20, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x56,
	0x32, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x35, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x70, 0x61,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x78,
	0x61, 0x74, 0x75, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56,
	0x32, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xb3,
	0x01, 0x0a, 0x39, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x74, 0x68,
	0x56, 0x31, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x05,
	0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x78, 0x61,
	0x74, 0x75, 0x2e, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12,
	0x1e, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x78, 0x61, 0x74, 0x75, 0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12,
	0x33, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x50, 0x72, 0x6f, 0x70,
	0x61, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xbb, 0x01, 0x0a, 0x3b, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x45, 0x74, 0x68, 0x56, 0x31, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x64, 0x50, 0x72, 0x6f,
	0x6f, 0x66, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x32,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x45, 0x70, 0x6f, 0x63, 0x68,
	0x56, 0x32, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x20, 0x0a, 0x04, 0x73, 0x6c, 0x6f,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x53,
	0x6c, 0x6f, 0x74, 0x56, 0x32, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x35, 0x0a, 0x0b, 0x70,
	0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x56, 0x32, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0x9f, 0x01, 0x0a, 0x2d, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x45, 0x74, 0x68, 0x56, 0x31, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x6f, 0x66,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x6e, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x78, 0x61, 0x74,
	0x75, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x41, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x74, 0x68, 0x56, 0x31, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e,
	0x64, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xa3, 0x01, 0x0a, 0x2f, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x45, 0x74, 0x68, 0x56, 0x31, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x64, 0x50, 0x72, 0x6f,
	0x6f, 0x66, 0x56, 0x32, 0x44, 0x61, 0x74, 0x61, 0x12, 0x70, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c,
	0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61,
	0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x74, 0x68, 0x56, 0x31,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x32, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xad, 0x02, 0x0a, 0x12, 0x46,
	0x6f, 0x72, 0x6b, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x12, 0x31, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x65, 0x70, 0x6f,
	0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e,
	0x45, 0x70, 0x6f, 0x63, 0x68, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x65,
	0x70, 0x6f, 0x63, 0x68, 0x12, 0x2e, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x73, 0x6c, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x78, 0x61, 0x74,
	0x75, 0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x73, 0x6c, 0x6f, 0x74, 0x12, 0x48, 0x0a, 0x1f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x64, 0x69, 0x66, 0x66, 0x5f, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x73, 0x6c, 0x6f, 0x74,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x5f, 0x6d, 0x73, 0x12, 0x30,
	0x0a, 0x13, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x73,
	0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x1a, 0xef, 0x02, 0x0a, 0x14, 0x46,
	0x6f, 0x72, 0x6b, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x56, 0x32, 0x12, 0x33, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x65,
	0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x78, 0x61, 0x74,
	0x75, 0x2e, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x56, 0x32, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x30, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x56, 0x32, 0x52, 0x0c, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x66, 0x0a, 0x1f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x5f, 0x6d, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x1f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f,
	0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x5f,
	0x6d, 0x73, 0x12, 0x4e, 0x0a, 0x13, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6d, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x1a, 0x65, 0x0a, 0x22,
	0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x74, 0x68, 0x56, 0x31, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x46, 0x6f, 0x72, 0x6b, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x3f, 0x0a, 0x08, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x46, 0x6f, 0x72, 0x6b, 0x43, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x1a, 0x69, 0x0a, 0x24, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x45, 0x74, 0x68, 0x56, 0x31, 0x44, 0x65, 0x62, 0x75, 0x67, 0x46, 0x6f, 0x72, 0x6b, 0x43,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x56, 0x32, 0x44, 0x61, 0x74, 0x61, 0x12, 0x41, 0x0a, 0x08, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x78, 0x61, 0x74, 0x75, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x2e,
	0x46, 0x6f, 0x72, 0x6b, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x56, 0x32, 0x52, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x1a, 0xa1,
	0x01, 0x0a, 0x27, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x74, 0x68,
	0x56, 0x31, 0x44, 0x65, 0x62, 0x75, 0x67, 0x46, 0x6f, 0x72, 0x6b, 0x43, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x4f, 0x72, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3b, 0x0a, 0x06, 0x62, 0x65,
	0x66, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x78, 0x61, 0x74,
	0x75, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x46, 0x6f, 0x72,
	0x6b, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52,
	0x06, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x39, 0x0a, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x46, 0x6f, 0x72, 0x6b, 0x43, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x05, 0x61, 0x66, 0x74,
	0x65, 0x72, 0x1a, 0xa7, 0x01, 0x0a, 0x29, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x45, 0x74, 0x68, 0x56, 0x31, 0x44, 0x65, 0x62, 0x75, 0x67, 0x46, 0x6f, 0x72, 0x6b, 0x43,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x4f, 0x72, 0x67, 0x56, 0x32, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x3d, 0x0a, 0x06, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x74, 0x61, 0x2e, 0x46, 0x6f, 0x72, 0x6b, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x56, 0x32, 0x52, 0x06, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12,
	0x3b, 0x0a, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61,
	0x2e, 0x46, 0x6f, 0x72, 0x6b, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x56, 0x32, 0x52, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x1a, 0x6b, 0x0a, 0x22,
	0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x74, 0x68, 0x56, 0x31, 0x42,
	0x65, 0x61, 0x63, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x23, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x56, 0x32,
	0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x20, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x53, 0x6c, 0x6f,
	0x74, 0x56, 0x32, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x1a, 0xf2, 0x01, 0x0a, 0x20, 0x41, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12,
	0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61,
	0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x67, 0x61, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x67, 0x61, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x61,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x67, 0x61, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x1a, 0x9a,
	0x05, 0x0a, 0x22, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x6d,
	0x70, 0x6f, 0x6f, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56,
	0x32, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a,
	0x02, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x32, 0x0a,
	0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x61, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x61, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x2e, 0x0a, 0x03, 0x67, 0x61, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x67, 0x61, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x61, 0x6c,
	0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x67, 0x61, 0x73, 0x5f, 0x74, 0x69, 0x70, 0x5f, 0x63,
	0x61, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x61, 0x73, 0x5f, 0x74, 0x69,
	0x70, 0x5f, 0x63, 0x61, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x67, 0x61, 0x73, 0x5f, 0x66, 0x65, 0x65,
	0x5f, 0x63, 0x61, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x61, 0x73, 0x5f,
	0x66, 0x65, 0x65, 0x5f, 0x63, 0x61, 0x70, 0x12, 0x38, 0x0a, 0x08, 0x62, 0x6c, 0x6f, 0x62, 0x5f,
	0x67, 0x61, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x67, 0x61,
	0x73, 0x12, 0x2a, 0x0a, 0x10, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x67, 0x61, 0x73, 0x5f, 0x66, 0x65,
	0x65, 0x5f, 0x63, 0x61, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x62, 0x6c, 0x6f,
	0x62, 0x5f, 0x67, 0x61, 0x73, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x63, 0x61, 0x70, 0x12, 0x20, 0x0a,
	0x0b, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73, 0x12,
	0x2e, 0x0a, 0x12, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x73,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x62, 0x6c, 0x6f,
	0x62, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x73, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x12,
	0x3a, 0x0a, 0x18, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x73,
	0x5f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x18, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x73,
	0x5f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x1a, 0x89, 0x02, 0x0a, 0x1e,
	0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x74, 0x68, 0x56, 0x32, 0x42,
	0x65, 0x61, 0x63, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x21,
	0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x78, 0x61, 0x74, 0x75, 0x2e, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63,
	0x68, 0x12, 0x1e, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x04, 0x73, 0x6c, 0x6f,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x18, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x1a, 0x8d, 0x05, 0x0a, 0x20, 0x41, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x74, 0x68, 0x56, 0x32, 0x42, 0x65, 0x61, 0x63, 0x6f,
	0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x56, 0x32, 0x44, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x05,
	0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x78, 0x61,
	0x74, 0x75, 0x2e, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x56, 0x32, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63,
	0x68, 0x12, 0x20, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x56, 0x32, 0x52, 0x04, 0x73,
	0x6c, 0x6f, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a,
	0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x12, 0x4c, 0x0a,
	0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x58, 0x0a, 0x18, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x18, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x6e, 0x0a, 0x23, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x23, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x3e, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x54, 0x0a, 0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x18, 0x66,
	0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x77, 0x68, 0x65, 0x6e, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x66,
	0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x77, 0x68, 0x65, 0x6e, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x1a, 0x5d, 0x0a, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x74, 0x68, 0x56, 0x32, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x72, 0x53, 0x6c, 0x61,
	0x73, 0x68, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x05, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52,
	0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x1a, 0x5d, 0x0a, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x74, 0x68, 0x56, 0x32, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x53, 0x6c, 0x61, 0x73,
	0x68, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x05,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x1a, 0x5a, 0x0a, 0x2b, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x45, 0x74, 0x68, 0x56, 0x32, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6e, 0x74, 0x61, 0x72, 0x79, 0x45, 0x78, 0x69, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x1a, 0x54, 0x0a, 0x25, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45,
	0x74, 0x68, 0x56, 0x32, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x05, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x61, 0x74, 0x75,
	0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x1a, 0x61, 0x0a, 0x32, 0x41, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x74, 0x68, 0x56, 0x32, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x4c, 0x53, 0x54, 0x6f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a,
	0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78,
	0x61, 0x74, 0x75, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x1a, 0xd5, 0x02, 0x0a, 0x32, 0x41,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x74, 0x68, 0x56, 0x32, 0x42, 0x65,
	0x61, 0x63, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x2b, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x4a,
	0x0a, 0x11, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x5f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x26,
	0x0a, 0x0e, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x73,
	0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x73, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72,
	0x73, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x3a, 0x0a, 0x18, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x73,
	0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x73, 0x5f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x73,
	0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x73, 0x5f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x1a, 0x57, 0x0a, 0x28, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x45, 0x74, 0x68, 0x56, 0x32, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2b,
	0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x78, 0x61, 0x74, 0x75, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x1a, 0x74, 0x0a, 0x2b, 0x41,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x70, 0x72,
	0x69, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x05, 0x65, 0x70,
	0x6f, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x78, 0x61, 0x74, 0x75,
	0x2e, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x56, 0x32, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12,
	0x20, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x78, 0x61, 0x74, 0x75, 0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x56, 0x32, 0x52, 0x04, 0x73, 0x6c, 0x6f,
	0x74, 0x1a, 0x8b, 0x02, 0x0a, 0x17, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x66, 0x0a,
	0x1f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x73, 0x6c,
	0x6f, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x5f, 0x6d, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x1f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x69,
	0x66, 0x66, 0x5f, 0x6d, 0x73, 0x12, 0x4e, 0x0a, 0x13, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x13, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6d, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x1a,
	0xdc, 0x02, 0x0a, 0x2b, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x74,
	0x68, 0x56, 0x31, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x74, 0x74, 0x65,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x4f, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x37, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74,
	0x61, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x74, 0x68, 0x56,
	0x31, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x56, 0x32, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x4f, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x37, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x74, 0x61, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x74, 0x68,
	0x56, 0x31, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x56, 0x32, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x12, 0x23, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x56, 0x32, 0x52,
	0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x20, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x53, 0x6c, 0x6f, 0x74,
	0x56, 0x32, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x44, 0x0a, 0x08, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x78, 0x61, 0x74,
	0x75, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x41, 0x74, 0x74,
	0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x52, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x1a, 0xa4,
	0x01, 0x0a, 0x24, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x74, 0x68,
	0x56, 0x31, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x6c, 0x6f, 0x62, 0x53, 0x69, 0x64, 0x65,
	0x63, 0x61, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x45, 0x70,
	0x6f, 0x63, 0x68, 0x56, 0x32, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x20, 0x0a, 0x04,
	0x73, 0x6c, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x78, 0x61, 0x74,
	0x75, 0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x56, 0x32, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x35,
	0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x61,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x32, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x99, 0x02, 0x0a, 0x24, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x74, 0x68, 0x56, 0x31, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x42,
	0x6c, 0x6f, 0x62, 0x53, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x23,
	0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x78, 0x61, 0x74, 0x75, 0x2e, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x56, 0x32, 0x52, 0x05, 0x65, 0x70,
	0x6f, 0x63, 0x68, 0x12, 0x20, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x56, 0x32, 0x52,
	0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x3a, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x12, 0x26, 0x0a, 0x0e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x65, 0x64, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x12, 0x46, 0x0a, 0x0f, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x1a, 0xa9, 0x04, 0x0a, 0x22, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x50, 0x32, 0x50, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4f, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x74, 0x68, 0x56, 0x31, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x32, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x4f, 0x0a, 0x06, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x78, 0x61, 0x74, 0x75,
	0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x41, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x74, 0x68, 0x56, 0x31, 0x41, 0x74, 0x74, 0x65, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x56, 0x32, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x20, 0x0a, 0x04, 0x73, 0x6c,
	0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e,
	0x53, 0x6c, 0x6f, 0x74, 0x56, 0x32, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x23, 0x0a, 0x05,
	0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x78, 0x61,
	0x74, 0x75, 0x2e, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x56, 0x32, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63,
	0x68, 0x12, 0x35, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x50, 0x72,
	0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x32, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x70, 0x61, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x13, 0x61, 0x74, 0x74, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x41, 0x74, 0x74,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x56,
	0x32, 0x52, 0x13, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x25, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x6c, 0x69, 0x62, 0x70,
	0x32, 0x70, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x34, 0x0a,
	0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x73, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x1a, 0x84, 0x01,
	0x0a, 0x1f, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x74, 0x68, 0x56,
	0x31, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x44, 0x75, 0x74, 0x79, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x23, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x56, 0x32, 0x52,
	0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x20, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x53, 0x6c, 0x6f, 0x74,
	0x56, 0x32, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x69, 0x64, 0x1a, 0x97, 0x03, 0x0a, 0x33, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x45, 0x74, 0x68, 0x56, 0x32, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x45, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x74,
	0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x05,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x61,
	0x74, 0x75, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x4a, 0x0a, 0x11, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x11, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x5f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x23, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x45, 0x70, 0x6f, 0x63,
	0x68, 0x56, 0x32, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x20, 0x0a, 0x04, 0x73, 0x6c,
	0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e,
	0x53, 0x6c, 0x6f, 0x74, 0x56, 0x32, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x4f, 0x0a, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x78,
	0x61, 0x74, 0x75, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x41,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x74, 0x68, 0x56, 0x31, 0x41, 0x74,
	0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56,
	0x32, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x4f, 0x0a,
	0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e,
	0x78, 0x61, 0x74, 0x75, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x2e,
	0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x74, 0x68, 0x56, 0x31, 0x41,
	0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x56, 0x32, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x1a, 0x5f,
	0x0a, 0x20, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x62, 0x50,
	0x32, 0x50, 0x54, 0x72, 0x61, 0x63, 0x65, 0x41, 0x64, 0x64, 0x50, 0x65, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x3b, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x6c, 0x69, 0x62, 0x70,
	0x32, 0x70, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a,
	0x62, 0x0a, 0x23, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x62,
	0x50, 0x32, 0x50, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x65,
	0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3b, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e,
	0x6c, 0x69, 0x62, 0x70, 0x32, 0x70, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x1a, 0x5f, 0x0a, 0x20, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x4c, 0x69, 0x62, 0x50, 0x32, 0x50, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x65, 0x63, 0x76,
	0x52, 0x50, 0x43, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3b, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x78, 0x61, 0x74, 0x75,
	0x2e, 0x6c, 0x69, 0x62, 0x70, 0x32, 0x70, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x1a, 0x5f, 0x0a, 0x20, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x4c, 0x69, 0x62, 0x50, 0x32, 0x50, 0x54, 0x72, 0x61, 0x63, 0x65, 0x53, 0x65, 0x6e,
	0x64, 0x52, 0x50, 0x43, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3b, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x78, 0x61, 0x74,
	0x75, 0x2e, 0x6c, 0x69, 0x62, 0x70, 0x32, 0x70, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x5c, 0x0a, 0x1d, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x62, 0x50, 0x32, 0x50, 0x54, 0x72, 0x61, 0x63, 0x65, 0x4a, 0x6f,
	0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3b, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e,
	0x6c, 0x69, 0x62, 0x70, 0x32, 0x70, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x1a, 0x61, 0x0a, 0x22, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x4c, 0x69, 0x62, 0x50, 0x32, 0x50, 0x54, 0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3b, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x78, 0x61,
	0x74, 0x75, 0x2e, 0x6c, 0x69, 0x62, 0x70, 0x32, 0x70, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x64, 0x0a, 0x25, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x62, 0x50, 0x32, 0x50, 0x54, 0x72, 0x61, 0x63, 0x65, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x3b, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x6c, 0x69, 0x62, 0x70, 0x32, 0x70, 0x2e,
	0x54, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x66, 0x0a, 0x27,
	0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x62, 0x50, 0x32, 0x50,
	0x54, 0x72, 0x61, 0x63, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3b, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x78, 0x61, 0x74, 0x75,
	0x2e, 0x6c, 0x69, 0x62, 0x70, 0x32, 0x70, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x1a, 0x64, 0x0a, 0x25, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x4c, 0x69, 0x62, 0x50, 0x32, 0x50, 0x54, 0x72, 0x61, 0x63, 0x65, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3b, 0x0a,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x6c, 0x69, 0x62, 0x70, 0x32, 0x70, 0x2e, 0x54, 0x72,
	0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x8d, 0x04, 0x0a, 0x2d, 0x41,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x62, 0x50, 0x32, 0x50, 0x54,
	0x72, 0x61, 0x63, 0x65, 0x47, 0x6f, 0x73, 0x73, 0x69, 0x70, 0x53, 0x75, 0x62, 0x42, 0x65, 0x61,
	0x63, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x05,
	0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x78, 0x61,
	0x74, 0x75, 0x2e, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x56, 0x32, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63,
	0x68, 0x12, 0x20, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x56, 0x32, 0x52, 0x04, 0x73,
	0x6c, 0x6f, 0x74, 0x12, 0x37, 0x0a, 0x0f, 0x77, 0x61, 0x6c, 0x6c, 0x63, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x78,
	0x61, 0x74, 0x75, 0x2e, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x56, 0x32, 0x52, 0x0f, 0x77, 0x61, 0x6c,
	0x6c, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x34, 0x0a, 0x0e,
	0x77, 0x61, 0x6c, 0x6c, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x53, 0x6c, 0x6f, 0x74,
	0x56, 0x32, 0x52, 0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x6c,
	0x6f, 0x74, 0x12, 0x35, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x50,
	0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x32, 0x52, 0x0b, 0x70, 0x72,
	0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x78, 0x61,
	0x74, 0x75, 0x2e, 0x6c, 0x69, 0x62, 0x70, 0x32, 0x70, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x32, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x40, 0x0a, 0x0c, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x3c, 0x0a, 0x0a,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x1a, 0x60, 0x0a, 0x39, 0x41, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x62, 0x50, 0x32, 0x50, 0x54, 0x72,
	0x61, 0x63, 0x65, 0x47, 0x6f, 0x73, 0x73, 0x69, 0x70, 0x53, 0x75, 0x62, 0x42, 0x65, 0x61, 0x63,
	0x6f, 0x6e, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x45, 0x70,
	0x6f, 0x63, 0x68, 0x56, 0x32, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x1a, 0x60, 0x0a, 0x39,
	0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x62, 0x50, 0x32, 0x50,
	0x54, 0x72, 0x61, 0x63, 0x65, 0x47, 0x6f, 0x73, 0x73, 0x69, 0x70, 0x53, 0x75, 0x62, 0x42, 0x65,
	0x61, 0x63, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x05, 0x65, 0x70, 0x6f,
	0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e,
	0x45, 0x70, 0x6f, 0x63, 0x68, 0x56, 0x32, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x1a, 0xa9,
	0x06, 0x0a, 0x33, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x62,
	0x50, 0x32, 0x50, 0x54, 0x72, 0x61, 0x63, 0x65, 0x47, 0x6f, 0x73, 0x73, 0x69, 0x70, 0x53, 0x75,
	0x62, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x62, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x62, 0x50, 0x32, 0x50, 0x54, 0x72, 0x61, 0x63, 0x65, 0x47, 0x6f,
	0x73, 0x73, 0x69, 0x70, 0x53, 0x75, 0x62, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x41, 0x74, 0x74,
	0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x62, 0x0a, 0x06, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x78, 0x61, 0x74,
	0x75, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x41, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x62, 0x50, 0x32, 0x50, 0x54, 0x72, 0x61,
	0x63, 0x65, 0x47, 0x6f, 0x73, 0x73, 0x69, 0x70, 0x53, 0x75, 0x62, 0x42, 0x65, 0x61, 0x63, 0x6f,
	0x6e, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x20,
	0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x78,
	0x61, 0x74, 0x75, 0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x56, 0x32, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74,
	0x12, 0x23, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x56, 0x32, 0x52, 0x05,
	0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x35, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x78, 0x61, 0x74,
	0x75, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x32, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x13,
	0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x61, 0x74, 0x75,
	0x2e, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x56, 0x32, 0x52, 0x13, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x37, 0x0a, 0x0f, 0x77, 0x61,
	0x6c, 0x6c, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x45, 0x70, 0x6f, 0x63, 0x68,
	0x56, 0x32, 0x52, 0x0f, 0x77, 0x61, 0x6c, 0x6c, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x65, 0x70,
	0x6f, 0x63, 0x68, 0x12, 0x34, 0x0a, 0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x63, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x78, 0x61,
	0x74, 0x75, 0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x56, 0x32, 0x52, 0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x63,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x3b, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x78, 0x61,
	0x74, 0x75, 0x2e, 0x6c, 0x69, 0x62, 0x70, 0x32, 0x70, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x32, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x40, 0x0a, 0x0c, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x3c, 0x0a, 0x0a,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x1a, 0x8d, 0x04, 0x0a, 0x2d, 0x41,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x62, 0x50, 0x32, 0x50, 0x54,
	0x72, 0x61, 0x63, 0x65, 0x47, 0x6f, 0x73, 0x73, 0x69, 0x70, 0x53, 0x75, 0x62, 0x42, 0x6c, 0x6f,
	0x62, 0x53, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x05,
	0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x78, 0x61,
	0x74, 0x75, 0x2e, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x56, 0x32, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63,
	0x68, 0x12, 0x20, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x56, 0x32, 0x52, 0x04, 0x73,
	0x6c, 0x6f, 0x74, 0x12, 0x37, 0x0a, 0x0f, 0x77, 0x61, 0x6c, 0x6c, 0x63, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x78,
	0x61, 0x74, 0x75, 0x2e, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x56, 0x32, 0x52, 0x0f, 0x77, 0x61, 0x6c,
	0x6c, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x34, 0x0a, 0x0e,
	0x77, 0x61, 0x6c, 0x6c, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x53, 0x6c, 0x6f, 0x74,
	0x56, 0x32, 0x52, 0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x6c,
	0x6f, 0x74, 0x12, 0x35, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x50,
	0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x32, 0x52, 0x0b, 0x70, 0x72,
	0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x78, 0x61,
	0x74, 0x75, 0x2e, 0x6c, 0x69, 0x62, 0x70, 0x32, 0x70, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x32, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x40, 0x0a, 0x0c, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x3c, 0x0a, 0x0a,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x1a, 0x44, 0x0a, 0x1d, 0x41, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x74, 0x68, 0x56, 0x31, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x05, 0x65,
	0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x78, 0x61, 0x74,
	0x75, 0x2e, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x56, 0x32, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68,
	0x42, 0x10, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61,
	0x74, 0x61, 0x22, 0xca, 0x09, 0x0a, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x74,
	0x61, 0x12, 0x2c, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65,
	0x74, 0x61, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x2f, 0x0a, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x74,
	0x61, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x12, 0x6d, 0x0a, 0x16, 0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x50, 0x32, 0x50, 0x5f, 0x41,
	0x54, 0x54, 0x45, 0x53, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65,
	0x74, 0x61, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x65, 0x61,
	0x63, 0x6f, 0x6e, 0x50, 0x32, 0x50, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x16, 0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f,
	0x50, 0x32, 0x50, 0x5f, 0x41, 0x54, 0x54, 0x45, 0x53, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x12,
	0x6d, 0x0a, 0x16, 0x4c, 0x49, 0x42, 0x50, 0x32, 0x50, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x45, 0x5f,
	0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x74,
	0x61, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x62, 0x70,
	0x32, 0x50, 0x54, 0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x16, 0x4c, 0x49, 0x42, 0x50, 0x32, 0x50, 0x5f, 0x54,
	0x52, 0x41, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x12, 0x76,
	0x0a, 0x19, 0x4c, 0x49, 0x42, 0x50, 0x32, 0x50, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x45, 0x5f, 0x44,
	0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x36, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d,
	0x65, 0x74, 0x61, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4c, 0x69,
	0x62, 0x70, 0x32, 0x50, 0x54, 0x72, 0x61, 0x63, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x19, 0x4c, 0x49, 0x42,
	0x50, 0x32, 0x50, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e,
	0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x1a, 0x53, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x4a, 0x0a, 0x12, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x12, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x1a, 0xb7, 0x02, 0x0a, 0x03,
	0x47, 0x65, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x21, 0x0a, 0x0b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e,
	0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4c,
	0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c,
	0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x6f, 0x6e, 0x67, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x16, 0x41, 0x75, 0x74, 0x6f, 0x6e, 0x6f, 0x6d,
	0x6f, 0x75, 0x73, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x61, 0x75, 0x74, 0x6f, 0x6e, 0x6f, 0x6d, 0x6f, 0x75,
	0x73, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x44, 0x0a, 0x1c, 0x41, 0x75, 0x74, 0x6f, 0x6e, 0x6f, 0x6d, 0x6f, 0x75, 0x73, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e, 0x61, 0x75, 0x74, 0x6f, 0x6e, 0x6f, 0x6d, 0x6f, 0x75,
	0x73, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x40, 0x0a, 0x06, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x50, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12,
	0x26, 0x0a, 0x03, 0x67, 0x65, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x78,
	0x61, 0x74, 0x75, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x47,
	0x65, 0x6f, 0x52, 0x03, 0x67, 0x65, 0x6f, 0x1a, 0x2e, 0x0a, 0x04, 0x50, 0x65, 0x65, 0x72, 0x12,
	0x26, 0x0a, 0x03, 0x67, 0x65, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x78,
	0x61, 0x74, 0x75, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x47,
	0x65, 0x6f, 0x52, 0x03, 0x67, 0x65, 0x6f, 0x1a, 0x4f, 0x0a, 0x22, 0x41, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x50, 0x32, 0x50, 0x41, 0x74,
	0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x29, 0x0a,
	0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x61,
	0x74, 0x75, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x50, 0x65,
	0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x1a, 0x4f, 0x0a, 0x22, 0x41, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x62, 0x70, 0x32, 0x50, 0x54, 0x72, 0x61, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x29,
	0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78,
	0x61, 0x74, 0x75, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x50,
	0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x1a, 0x52, 0x0a, 0x25, 0x41, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x62, 0x70, 0x32, 0x50, 0x54, 0x72, 0x61,
	0x63, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x29, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65,
	0x74, 0x61, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x42, 0x10, 0x0a,
	0x0e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x22,
	0x5a, 0x0a, 0x04, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d,
	0x65, 0x74, 0x61, 0x52, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0xf4, 0x11, 0x0a, 0x05,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xfa, 0x10, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24,
	0x0a, 0x20, 0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x45, 0x54, 0x48,
	0x5f, 0x56, 0x31, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x41,
	0x50, 0x49, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x56, 0x31, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x53,
	0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x01, 0x12, 0x28, 0x0a, 0x24, 0x42, 0x45, 0x41, 0x43,
	0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x56, 0x31, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x53, 0x5f, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x4f, 0x52, 0x47,
	0x10, 0x02, 0x12, 0x31, 0x0a, 0x2d, 0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x49,
	0x5f, 0x45, 0x54, 0x48, 0x5f, 0x56, 0x31, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x46,
	0x49, 0x4e, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x50, 0x4f,
	0x49, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d, 0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f,
	0x41, 0x50, 0x49, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x56, 0x31, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x53, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x10, 0x04, 0x12, 0x2b, 0x0a, 0x27, 0x42, 0x45, 0x41, 0x43,
	0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x56, 0x31, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x53, 0x5f, 0x56, 0x4f, 0x4c, 0x55, 0x4e, 0x54, 0x41, 0x52, 0x59, 0x5f, 0x45,
	0x58, 0x49, 0x54, 0x10, 0x05, 0x12, 0x28, 0x0a, 0x24, 0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f,
	0x41, 0x50, 0x49, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x56, 0x31, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x53, 0x5f, 0x41, 0x54, 0x54, 0x45, 0x53, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x06, 0x12,
	0x33, 0x0a, 0x2f, 0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x45, 0x54,
	0x48, 0x5f, 0x56, 0x31, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x54,
	0x52, 0x49, 0x42, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x50, 0x52, 0x4f,
	0x4f, 0x46, 0x10, 0x07, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x45, 0x4d, 0x50, 0x4f, 0x4f, 0x4c, 0x5f,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x08, 0x12, 0x22, 0x0a,
	0x1e, 0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x45, 0x54, 0x48, 0x5f,
	0x56, 0x32, 0x5f, 0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x10,
	0x09, 0x12, 0x27, 0x0a, 0x23, 0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x49, 0x5f,
	0x45, 0x54, 0x48, 0x5f, 0x56, 0x31, 0x5f, 0x44, 0x45, 0x42, 0x55, 0x47, 0x5f, 0x46, 0x4f, 0x52,
	0x4b, 0x5f, 0x43, 0x48, 0x4f, 0x49, 0x43, 0x45, 0x10, 0x0a, 0x12, 0x2d, 0x0a, 0x29, 0x42, 0x45,
	0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x56, 0x31, 0x5f,
	0x44, 0x45, 0x42, 0x55, 0x47, 0x5f, 0x46, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x48, 0x4f, 0x49, 0x43,
	0x45, 0x5f, 0x52, 0x45, 0x4f, 0x52, 0x47, 0x10, 0x0b, 0x12, 0x26, 0x0a, 0x22, 0x42, 0x45, 0x41,
	0x43, 0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x56, 0x31, 0x5f, 0x42,
	0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x54, 0x45, 0x45, 0x10,
	0x0c, 0x12, 0x30, 0x0a, 0x2c, 0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x49, 0x5f,
	0x45, 0x54, 0x48, 0x5f, 0x56, 0x31, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x4f, 0x52,
	0x5f, 0x41, 0x54, 0x54, 0x45, 0x53, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x41, 0x54,
	0x41, 0x10, 0x0d, 0x12, 0x25, 0x0a, 0x21, 0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x41, 0x50,
	0x49, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x56, 0x31, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x53, 0x5f,
	0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x56, 0x32, 0x10, 0x0e, 0x12, 0x2b, 0x0a, 0x27, 0x42, 0x45,
	0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x56, 0x31, 0x5f,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x4f,
	0x52, 0x47, 0x5f, 0x56, 0x32, 0x10, 0x0f, 0x12, 0x34, 0x0a, 0x30, 0x42, 0x45, 0x41, 0x43, 0x4f,
	0x4e, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x56, 0x31, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x53, 0x5f, 0x46, 0x49, 0x4e, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x5f, 0x43, 0x48,
	0x45, 0x43, 0x4b, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x56, 0x32, 0x10, 0x10, 0x12, 0x24, 0x0a,
	0x20, 0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x45, 0x54, 0x48, 0x5f,
	0x56, 0x31, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x5f, 0x56,
	0x32, 0x10, 0x11, 0x12, 0x2e, 0x0a, 0x2a, 0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x41, 0x50,
	0x49, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x56, 0x31, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x53, 0x5f,
	0x56, 0x4f, 0x4c, 0x55, 0x4e, 0x54, 0x41, 0x52, 0x59, 0x5f, 0x45, 0x58, 0x49, 0x54, 0x5f, 0x56,
	0x32, 0x10, 0x12, 0x12, 0x2b, 0x0a, 0x27, 0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x41, 0x50,
	0x49, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x56, 0x31, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x53, 0x5f,
	0x41, 0x54, 0x54, 0x45, 0x53, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x56, 0x32, 0x10, 0x13,
	0x12, 0x36, 0x0a, 0x32, 0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x45,
	0x54, 0x48, 0x5f, 0x56, 0x31, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x43, 0x4f, 0x4e,
	0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x50, 0x52,
	0x4f, 0x4f, 0x46, 0x5f, 0x56, 0x32, 0x10, 0x14, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x45, 0x4d, 0x50,
	0x4f, 0x4f, 0x4c, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x56, 0x32, 0x10, 0x15, 0x12, 0x25, 0x0a, 0x21, 0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x41,
	0x50, 0x49, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x56, 0x32, 0x5f, 0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e,
	0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x56, 0x32, 0x10, 0x16, 0x12, 0x2a, 0x0a, 0x26, 0x42,
	0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x56, 0x31,
	0x5f, 0x44, 0x45, 0x42, 0x55, 0x47, 0x5f, 0x46, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x48, 0x4f, 0x49,
	0x43, 0x45, 0x5f, 0x56, 0x32, 0x10, 0x17, 0x12, 0x30, 0x0a, 0x2c, 0x42, 0x45, 0x41, 0x43, 0x4f,
	0x4e, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x56, 0x31, 0x5f, 0x44, 0x45, 0x42,
	0x55, 0x47, 0x5f, 0x46, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x48, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x52,
	0x45, 0x4f, 0x52, 0x47, 0x5f, 0x56, 0x32, 0x10, 0x18, 0x12, 0x34, 0x0a, 0x30, 0x42, 0x45, 0x41,
	0x43, 0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x56, 0x32, 0x5f, 0x42,
	0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x41, 0x54, 0x54, 0x45,
	0x53, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x4c, 0x41, 0x53, 0x48, 0x49, 0x4e, 0x47, 0x10, 0x19, 0x12,
	0x34, 0x0a, 0x30, 0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x45, 0x54,
	0x48, 0x5f, 0x56, 0x32, 0x5f, 0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x42, 0x4c, 0x4f, 0x43,
	0x4b, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x4c, 0x41, 0x53, 0x48,
	0x49, 0x4e, 0x47, 0x10, 0x1a, 0x12, 0x31, 0x0a, 0x2d, 0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f,
	0x41, 0x50, 0x49, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x56, 0x32, 0x5f, 0x42, 0x45, 0x41, 0x43, 0x4f,
	0x4e, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x56, 0x4f, 0x4c, 0x55, 0x4e, 0x54, 0x41, 0x52,
	0x59, 0x5f, 0x45, 0x58, 0x49, 0x54, 0x10, 0x1b, 0x12, 0x2a, 0x0a, 0x26, 0x42, 0x45, 0x41, 0x43,
	0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x56, 0x32, 0x5f, 0x42, 0x45,
	0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x44, 0x45, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x10, 0x1c, 0x12, 0x3a, 0x0a, 0x36, 0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x41,
	0x50, 0x49, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x56, 0x32, 0x5f, 0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e,
	0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x42, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x5f, 0x45, 0x58,
	0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x1d,
	0x12, 0x38, 0x0a, 0x34, 0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x45,
	0x54, 0x48, 0x5f, 0x56, 0x32, 0x5f, 0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x42, 0x4c, 0x4f,
	0x43, 0x4b, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x1e, 0x12, 0x2d, 0x0a, 0x29, 0x42, 0x45,
	0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x56, 0x32, 0x5f,
	0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x57, 0x49, 0x54,
	0x48, 0x44, 0x52, 0x41, 0x57, 0x41, 0x4c, 0x10, 0x1f, 0x12, 0x29, 0x0a, 0x25, 0x42, 0x45, 0x41,
	0x43, 0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x56, 0x31, 0x5f, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x42, 0x4c, 0x4f, 0x42, 0x5f, 0x53, 0x49, 0x44, 0x45, 0x43,
	0x41, 0x52, 0x10, 0x20, 0x12, 0x23, 0x0a, 0x1f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x50, 0x52, 0x49,
	0x4e, 0x54, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46,
	0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x21, 0x12, 0x29, 0x0a, 0x25, 0x42, 0x45, 0x41,
	0x43, 0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x56, 0x31, 0x5f, 0x42,
	0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x42, 0x4c, 0x4f, 0x42, 0x5f, 0x53, 0x49, 0x44, 0x45, 0x43,
	0x41, 0x52, 0x10, 0x22, 0x12, 0x1a, 0x0a, 0x16, 0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x50,
	0x32, 0x50, 0x5f, 0x41, 0x54, 0x54, 0x45, 0x53, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x23,
	0x12, 0x23, 0x0a, 0x1f, 0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x45,
	0x54, 0x48, 0x5f, 0x56, 0x31, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x45, 0x52, 0x5f, 0x44,
	0x55, 0x54, 0x59, 0x10, 0x24, 0x12, 0x39, 0x0a, 0x35, 0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f,
	0x41, 0x50, 0x49, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x56, 0x32, 0x5f, 0x42, 0x45, 0x41, 0x43, 0x4f,
	0x4e, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x45, 0x4c, 0x41, 0x42, 0x4f, 0x52, 0x41, 0x54,
	0x45, 0x44, 0x5f, 0x41, 0x54, 0x54, 0x45, 0x53, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x25,
	0x12, 0x1a, 0x0a, 0x16, 0x4c, 0x49, 0x42, 0x50, 0x32, 0x50, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x45,
	0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x26, 0x12, 0x1d, 0x0a, 0x19,
	0x4c, 0x49, 0x42, 0x50, 0x32, 0x50, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x45, 0x5f, 0x44, 0x49, 0x53,
	0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x27, 0x12, 0x19, 0x0a, 0x15, 0x4c,
	0x49, 0x42, 0x50, 0x32, 0x50, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x5f,
	0x50, 0x45, 0x45, 0x52, 0x10, 0x28, 0x12, 0x1c, 0x0a, 0x18, 0x4c, 0x49, 0x42, 0x50, 0x32, 0x50,
	0x5f, 0x54, 0x52, 0x41, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x50, 0x45,
	0x45, 0x52, 0x10, 0x29, 0x12, 0x19, 0x0a, 0x15, 0x4c, 0x49, 0x42, 0x50, 0x32, 0x50, 0x5f, 0x54,
	0x52, 0x41, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x56, 0x5f, 0x52, 0x50, 0x43, 0x10, 0x2a, 0x12,
	0x19, 0x0a, 0x15, 0x4c, 0x49, 0x42, 0x50, 0x32, 0x50, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x45, 0x5f,
	0x53, 0x45, 0x4e, 0x44, 0x5f, 0x52, 0x50, 0x43, 0x10, 0x2b, 0x12, 0x19, 0x0a, 0x15, 0x4c, 0x49,
	0x42, 0x50, 0x32, 0x50, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x45, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f,
	0x52, 0x50, 0x43, 0x10, 0x2c, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x49, 0x42, 0x50, 0x32, 0x50, 0x5f,
	0x54, 0x52, 0x41, 0x43, 0x45, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x10, 0x2d, 0x12, 0x18, 0x0a, 0x14,
	0x4c, 0x49, 0x42, 0x50, 0x32, 0x50, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x2e, 0x12, 0x20, 0x0a, 0x1c, 0x4c, 0x49, 0x42, 0x50, 0x32, 0x50,
	0x5f, 0x54, 0x52, 0x41, 0x43, 0x45, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x4d, 0x45,
	0x54, 0x41, 0x44, 0x41, 0x54, 0x41, 0x10, 0x2f, 0x12, 0x1e, 0x0a, 0x1a, 0x4c, 0x49, 0x42, 0x50,
	0x32, 0x50, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x45, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x30, 0x12, 0x27, 0x0a, 0x23, 0x4c, 0x49, 0x42, 0x50,
	0x32, 0x50, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x45, 0x5f, 0x47, 0x4f, 0x53, 0x53, 0x49, 0x50, 0x53,
	0x55, 0x42, 0x5f, 0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x10,
	0x31, 0x12, 0x2d, 0x0a, 0x29, 0x4c, 0x49, 0x42, 0x50, 0x32, 0x50, 0x5f, 0x54, 0x52, 0x41, 0x43,
	0x45, 0x5f, 0x47, 0x4f, 0x53, 0x53, 0x49, 0x50, 0x53, 0x55, 0x42, 0x5f, 0x42, 0x45, 0x41, 0x43,
	0x4f, 0x4e, 0x5f, 0x41, 0x54, 0x54, 0x45, 0x53, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x32,
	0x12, 0x27, 0x0a, 0x23, 0x4c, 0x49, 0x42, 0x50, 0x32, 0x50, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x45,
	0x5f, 0x47, 0x4f, 0x53, 0x53, 0x49, 0x50, 0x53, 0x55, 0x42, 0x5f, 0x42, 0x4c, 0x4f, 0x42, 0x5f,
	0x53, 0x49, 0x44, 0x45, 0x43, 0x41, 0x52, 0x10, 0x33, 0x12, 0x27, 0x0a, 0x23, 0x42, 0x45, 0x41,
	0x43, 0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x56, 0x31, 0x5f, 0x42,
	0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x4f, 0x52, 0x53,
	0x10, 0x34, 0x22, 0x9e, 0x2a, 0x0a, 0x0e, 0x44, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x67, 0x0a, 0x19, 0x65, 0x74, 0x68, 0x5f,
	0x76, 0x31, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x78, 0x61,
	0x74, 0x75, 0x2e, 0x65, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x24, 0x42, 0x45, 0x41,
	0x43, 0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x56, 0x31, 0x5f, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x41, 0x54, 0x54, 0x45, 0x53, 0x54, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x12, 0x5a, 0x0a, 0x13, 0x65, 0x74, 0x68, 0x5f, 0x76, 0x31, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x65, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x1e, 0x42,
	0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x56, 0x31,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x12, 0x6b, 0x0a,
	0x19, 0x65, 0x74, 0x68, 0x5f, 0x76, 0x31, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x6f, 0x72, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x65, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x6f, 0x72, 0x67, 0x42, 0x02,
	0x18, 0x01, 0x48, 0x00, 0x52, 0x24, 0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x49,
	0x5f, 0x45, 0x54, 0x48, 0x5f, 0x56, 0x31, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x43,
	0x48, 0x41, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x4f, 0x52, 0x47, 0x12, 0x86, 0x01, 0x0a, 0x22, 0x65,
	0x74, 0x68, 0x5f, 0x76, 0x31, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x66, 0x69, 0x6e,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x65,
	0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x02,
	0x18, 0x01, 0x48, 0x00, 0x52, 0x2d, 0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x49,
	0x5f, 0x45, 0x54, 0x48, 0x5f, 0x56, 0x31, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x46,
	0x49, 0x4e, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x50, 0x4f,
	0x49, 0x4e, 0x54, 0x12, 0x57, 0x0a, 0x12, 0x65, 0x74, 0x68, 0x5f, 0x76, 0x31, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x65, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x48, 0x65, 0x61, 0x64, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x1d, 0x42,
	0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x56, 0x31,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x12, 0x74, 0x0a, 0x1c,
	0x65, 0x74, 0x68, 0x5f, 0x76, 0x31, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x76, 0x6f,
	0x6c, 0x75, 0x6e, 0x74, 0x61, 0x72, 0x79, 0x5f, 0x65, 0x78, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x65, 0x74, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6e, 0x74, 0x61, 0x72, 0x79, 0x45,
	0x78, 0x69, 0x74, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x27, 0x42, 0x45, 0x41, 0x43, 0x4f,
	0x4e, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x56, 0x31, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x53, 0x5f, 0x56, 0x4f, 0x4c, 0x55, 0x4e, 0x54, 0x41, 0x52, 0x59, 0x5f, 0x45, 0x58,
	0x49, 0x54, 0x12, 0x8b, 0x01, 0x0a, 0x24, 0x65, 0x74, 0x68, 0x5f, 0x76, 0x31, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x65, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52,
	0x2f, 0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x45, 0x54, 0x48, 0x5f,
	0x56, 0x31, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x49,
	0x42, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x4f, 0x46,
	0x12, 0x36, 0x0a, 0x13, 0x6d, 0x65, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18,
	0x01, 0x48, 0x00, 0x52, 0x13, 0x4d, 0x45, 0x4d, 0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x12, 0x5a, 0x0a, 0x13, 0x65, 0x74, 0x68, 0x5f,
	0x76, 0x32, 0x5f, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x65, 0x74, 0x68,
	0x2e, 0x76, 0x32, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x02,
	0x18, 0x01, 0x48, 0x00, 0x52, 0x1e, 0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x49,
	0x5f, 0x45, 0x54, 0x48, 0x5f, 0x56, 0x32, 0x5f, 0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x42,
	0x4c, 0x4f, 0x43, 0x4b, 0x12, 0x5e, 0x0a, 0x12, 0x65, 0x74, 0x68, 0x5f, 0x76, 0x31, 0x5f, 0x66,
	0x6f, 0x72, 0x6b, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x65, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x6f, 0x72, 0x6b, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52,
	0x23, 0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x45, 0x54, 0x48, 0x5f,
	0x56, 0x31, 0x5f, 0x44, 0x45, 0x42, 0x55, 0x47, 0x5f, 0x46, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x48,
	0x4f, 0x49, 0x43, 0x45, 0x12, 0x6d, 0x0a, 0x18, 0x65, 0x74, 0x68, 0x5f, 0x76, 0x31, 0x5f, 0x66,
	0x6f, 0x72, 0x6b, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x6f, 0x72, 0x67,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x46, 0x6f, 0x72, 0x6b, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x6f,
	0x72, 0x67, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x29, 0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e,
	0x5f, 0x41, 0x50, 0x49, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x56, 0x31, 0x5f, 0x44, 0x45, 0x42, 0x55,
	0x47, 0x5f, 0x46, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x48, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x52, 0x45,
	0x4f, 0x52, 0x47, 0x12, 0x5d, 0x0a, 0x17, 0x65, 0x74, 0x68, 0x5f, 0x76, 0x31, 0x5f, 0x62, 0x65,
	0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x65, 0x74, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x48, 0x00, 0x52, 0x22,
	0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x56,
	0x31, 0x5f, 0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x54,
	0x45, 0x45, 0x12, 0x79, 0x0a, 0x21, 0x65, 0x74, 0x68, 0x5f, 0x76, 0x31, 0x5f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x78, 0x61, 0x74, 0x75, 0x2e, 0x65, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x74, 0x74, 0x65,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x56, 0x32, 0x48, 0x00, 0x52,
	0x2c, 0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x45, 0x54, 0x48, 0x5f,
	0x56, 0x31, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x41, 0x54, 0x54,
	0x45, 0x53, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x12, 0x6b, 0x0a,
	0x1c, 0x65, 0x74, 0x68, 0x5f, 0x76, 0x31, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x61,
	0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x32, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x65, 0x74, 0x68, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x32, 0x48,
	0x00, 0x52, 0x27, 0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x45, 0x54,
	0x48, 0x5f, 0x56, 0x31, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x41, 0x54, 0x54, 0x45,
	0x53, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x56, 0x32, 0x12, 0x5e, 0x0a, 0x16, 0x65, 0x74,
	0x68, 0x5f, 0x76, 0x31, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x76, 0x32, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x78, 0x61, 0x74,
	0x75, 0x2e, 0x65, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x56, 0x32, 0x48, 0x00, 0x52, 0x21, 0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f,
	0x41, 0x50, 0x49, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x56, 0x31, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x53, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x56, 0x32, 0x12, 0x6f, 0x0a, 0x1c, 0x65, 0x74,
	0x68, 0x5f, 0x76, 0x31, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x5f, 0x72, 0x65, 0x6f, 0x72, 0x67, 0x5f, 0x76, 0x32, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x65, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x6f, 0x72, 0x67, 0x56, 0x32,
	0x48, 0x00, 0x52, 0x27, 0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x45,
	0x54, 0x48, 0x5f, 0x56, 0x31, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x43, 0x48, 0x41,
	0x49, 0x4e, 0x5f, 0x52, 0x45, 0x4f, 0x52, 0x47, 0x5f, 0x56, 0x32, 0x12, 0x8a, 0x01, 0x0a, 0x25,
	0x65, 0x74, 0x68, 0x5f, 0x76, 0x31, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x66, 0x69,
	0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x5f, 0x76, 0x32, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x78, 0x61,
	0x74, 0x75, 0x2e, 0x65, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46,
	0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x56, 0x32, 0x48, 0x00, 0x52, 0x30, 0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x41,
	0x50, 0x49, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x56, 0x31, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x53,
	0x5f, 0x46, 0x49, 0x4e, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b,
	0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x56, 0x32, 0x12, 0x5b, 0x0a, 0x15, 0x65, 0x74, 0x68, 0x5f,
	0x76, 0x31, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x76,
	0x32, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x65,
	0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x61, 0x64, 0x56,
	0x32, 0x48, 0x00, 0x52, 0x20, 0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x49, 0x5f,
	0x45, 0x54, 0x48, 0x5f, 0x56, 0x31, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x48, 0x45,
	0x41, 0x44, 0x5f, 0x56, 0x32, 0x12, 0x78, 0x0a, 0x1f, 0x65, 0x74, 0x68, 0x5f, 0x76, 0x31, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6e, 0x74, 0x61, 0x72, 0x79,
	0x5f, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x76, 0x32, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x65, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6e, 0x74, 0x61, 0x72, 0x79, 0x45, 0x78, 0x69, 0x74, 0x56,
	0x32, 0x48, 0x00, 0x52, 0x2a, 0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x49, 0x5f,
	0x45, 0x54, 0x48, 0x5f, 0x56, 0x31, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x56, 0x4f,
	0x4c, 0x55, 0x4e, 0x54, 0x41, 0x52, 0x59, 0x5f, 0x45, 0x58, 0x49, 0x54, 0x5f, 0x56, 0x32, 0x12,
	0x8f, 0x01, 0x0a, 0x27, 0x65, 0x74, 0x68, 0x5f, 0x76, 0x31, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61,
	0x6e, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x76, 0x32, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x65, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x56, 0x32, 0x48, 0x00, 0x52, 0x32, 0x42,
	0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x56, 0x31,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x49, 0x42, 0x55,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x4f, 0x46, 0x5f, 0x56,
	0x32, 0x12, 0x38, 0x0a, 0x16, 0x6d, 0x65, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x32, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x16, 0x4d, 0x45, 0x4d, 0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x56, 0x32, 0x12, 0x5e, 0x0a, 0x16, 0x65,
	0x74, 0x68, 0x5f, 0x76, 0x32, 0x5f, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x76, 0x32, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x78, 0x61,
	0x74, 0x75, 0x2e, 0x65, 0x74, 0x68, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x56, 0x32, 0x48, 0x00, 0x52, 0x21, 0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e,
	0x5f, 0x41, 0x50, 0x49, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x56, 0x32, 0x5f, 0x42, 0x45, 0x41, 0x43,
	0x4f, 0x4e, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x56, 0x32, 0x12, 0x62, 0x0a, 0x15, 0x65,
	0x74, 0x68, 0x5f, 0x76, 0x31, 0x5f, 0x66, 0x6f, 0x72, 0x6b, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x5f, 0x76, 0x32, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x78, 0x61, 0x74,
	0x75, 0x2e, 0x65, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6f, 0x72, 0x6b, 0x43, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x56, 0x32, 0x48, 0x00, 0x52, 0x26, 0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f,
	0x41, 0x50, 0x49, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x56, 0x31, 0x5f, 0x44, 0x45, 0x42, 0x55, 0x47,
	0x5f, 0x46, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x48, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x56, 0x32, 0x12,
	0x71, 0x0a, 0x1b, 0x65, 0x74, 0x68, 0x5f, 0x76, 0x31, 0x5f, 0x66, 0x6f, 0x72, 0x6b, 0x5f, 0x63,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x6f, 0x72, 0x67, 0x5f, 0x76, 0x32, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x46, 0x6f, 0x72, 0x6b, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x6f, 0x72, 0x67,
	0x56, 0x32, 0x48, 0x00, 0x52, 0x2c, 0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x49,
	0x5f, 0x45, 0x54, 0x48, 0x5f, 0x56, 0x31, 0x5f, 0x44, 0x45, 0x42, 0x55, 0x47, 0x5f, 0x46, 0x4f,
	0x52, 0x4b, 0x5f, 0x43, 0x48, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x4f, 0x52, 0x47, 0x5f,
	0x56, 0x32, 0x12, 0x82, 0x01, 0x0a, 0x25, 0x65, 0x74, 0x68, 0x5f, 0x76, 0x32, 0x5f, 0x62, 0x65,
	0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x65, 0x74, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x72, 0x53, 0x6c, 0x61, 0x73, 0x68, 0x69, 0x6e,
	0x67, 0x56, 0x32, 0x48, 0x00, 0x52, 0x30, 0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x41, 0x50,
	0x49, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x56, 0x32, 0x5f, 0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f,
	0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x41, 0x54, 0x54, 0x45, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x53,
	0x4c, 0x41, 0x53, 0x48, 0x49, 0x4e, 0x47, 0x12, 0x82, 0x01, 0x0a, 0x25, 0x65, 0x74, 0x68, 0x5f,
	0x76, 0x32, 0x5f, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x69, 0x6e,
	0x67, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x65,
	0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x53, 0x6c,
	0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x56, 0x32, 0x48, 0x00, 0x52, 0x30, 0x42, 0x45, 0x41, 0x43,
	0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x56, 0x32, 0x5f, 0x42, 0x45,
	0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x4f,
	0x53, 0x45, 0x52, 0x5f, 0x53, 0x4c, 0x41, 0x53, 0x48, 0x49, 0x4e, 0x47, 0x12, 0x7f, 0x0a, 0x22,
	0x65, 0x74, 0x68, 0x5f, 0x76, 0x32, 0x5f, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6e, 0x74, 0x61, 0x72, 0x79, 0x5f, 0x65, 0x78,
	0x69, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e,
	0x65, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x56, 0x6f, 0x6c,
	0x75, 0x6e, 0x74, 0x61, 0x72, 0x79, 0x45, 0x78, 0x69, 0x74, 0x56, 0x32, 0x48, 0x00, 0x52, 0x2d,
	0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x56,
	0x32, 0x5f, 0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x56,
	0x4f, 0x4c, 0x55, 0x4e, 0x54, 0x41, 0x52, 0x59, 0x5f, 0x45, 0x58, 0x49, 0x54, 0x12, 0x65, 0x0a,
	0x1b, 0x65, 0x74, 0x68, 0x5f, 0x76, 0x32, 0x5f, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x65, 0x74, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x56, 0x32, 0x48, 0x00, 0x52, 0x26, 0x42, 0x45,
	0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x56, 0x32, 0x5f,
	0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x44, 0x45, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x12, 0x98, 0x01, 0x0a, 0x2b, 0x65, 0x74, 0x68, 0x5f, 0x76, 0x32, 0x5f,
	0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x62, 0x6c, 0x73,
	0x5f, 0x74, 0x6f, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x78, 0x61, 0x74,
	0x75, 0x2e, 0x65, 0x74, 0x68, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x42,
	0x4c, 0x53, 0x54, 0x6f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x56, 0x32, 0x48, 0x00, 0x52, 0x36, 0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f,
	0x41, 0x50, 0x49, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x56, 0x32, 0x5f, 0x42, 0x45, 0x41, 0x43, 0x4f,
	0x4e, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x42, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x5f, 0x45,
	0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x12,
	0x83, 0x01, 0x0a, 0x29, 0x65, 0x74, 0x68, 0x5f, 0x76, 0x32, 0x5f, 0x62, 0x65, 0x61, 0x63, 0x6f,
	0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x65, 0x74, 0x68, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x34, 0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x45, 0x54, 0x48, 0x5f,
	0x56, 0x32, 0x5f, 0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f,
	0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x12, 0x6e, 0x0a, 0x1e, 0x65, 0x74, 0x68, 0x5f, 0x76, 0x32, 0x5f,
	0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x77, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x78, 0x61, 0x74, 0x75, 0x2e, 0x65, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x56, 0x32, 0x48, 0x00, 0x52, 0x29, 0x42, 0x45, 0x41, 0x43,
	0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x56, 0x32, 0x5f, 0x42, 0x45,
	0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x44,
	0x52, 0x41, 0x57, 0x41, 0x4c, 0x12, 0x6a, 0x0a, 0x1a, 0x65, 0x74, 0x68, 0x5f, 0x76, 0x31, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x73, 0x69, 0x64, 0x65,
	0x63, 0x61, 0x72, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x78, 0x61, 0x74, 0x75,
	0x2e, 0x65, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f,
	0x62, 0x53, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x48, 0x00, 0x52, 0x25, 0x42, 0x45, 0x41, 0x43,
	0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x56, 0x31, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x53, 0x5f, 0x42, 0x4c, 0x4f, 0x42, 0x5f, 0x53, 0x49, 0x44, 0x45, 0x43, 0x41,
	0x52, 0x12, 0x70, 0x0a, 0x1f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x78, 0x61, 0x74,
	0x75, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x2e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x1f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x50, 0x52, 0x49, 0x4e, 0x54, 0x5f, 0x42,
	0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x12, 0x6b, 0x0a, 0x20, 0x65, 0x74, 0x68, 0x5f, 0x76, 0x31, 0x5f, 0x62, 0x65,
	0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x62, 0x6c, 0x6f, 0x62, 0x5f,
	0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x78, 0x61, 0x74, 0x75, 0x2e, 0x65, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x62,
	0x53, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x48, 0x00, 0x52, 0x25, 0x42, 0x45, 0x41, 0x43, 0x4f,
	0x4e, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x56, 0x31, 0x5f, 0x42, 0x45, 0x41,
	0x43, 0x4f, 0x4e, 0x5f, 0x42, 0x4c, 0x4f, 0x42, 0x5f, 0x53, 0x49, 0x44, 0x45, 0x43, 0x41, 0x52,
	0x12, 0x54, 0x0a, 0x16, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x70, 0x32, 0x70, 0x5f, 0x61,
	0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x65, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x32, 0x48, 0x00, 0x52, 0x16,
	0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x50, 0x32, 0x50, 0x5f, 0x41, 0x54, 0x54, 0x45, 0x53,
	0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x12, 0x5a, 0x0a, 0x14, 0x65, 0x74, 0x68, 0x5f, 0x76, 0x31,
	0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x75, 0x74, 0x79, 0x18, 0x26,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x65, 0x74, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x44, 0x75, 0x74, 0x79, 0x48,
	0x00, 0x52, 0x1f, 0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x45, 0x54,
	0x48, 0x5f, 0x56, 0x31, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x45, 0x52, 0x5f, 0x44, 0x55,
	0x54, 0x59, 0x12, 0x8f, 0x01, 0x0a, 0x2a, 0x65, 0x74, 0x68, 0x5f, 0x76, 0x32, 0x5f, 0x62, 0x65,
	0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x65, 0x6c, 0x61, 0x62, 0x6f,
	0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x65,
	0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x35, 0x42,
	0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x56, 0x32,
	0x5f, 0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x45, 0x4c,
	0x41, 0x42, 0x4f, 0x52, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x41, 0x54, 0x54, 0x45, 0x53, 0x54, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x12, 0x4c, 0x0a, 0x15, 0x6c, 0x69, 0x62, 0x70, 0x32, 0x70, 0x5f, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x18, 0x28, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x6c, 0x69, 0x62, 0x70, 0x32,
	0x70, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x65, 0x65, 0x72, 0x48, 0x00, 0x52, 0x15, 0x4c, 0x49, 0x42,
	0x50, 0x32, 0x50, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x50, 0x45,
	0x45, 0x52, 0x12, 0x55, 0x0a, 0x18, 0x6c, 0x69, 0x62, 0x70, 0x32, 0x70, 0x5f, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x18, 0x29,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x6c, 0x69, 0x62, 0x70,
	0x32, 0x70, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x65, 0x65, 0x72, 0x48, 0x00, 0x52,
	0x18, 0x4c, 0x49, 0x42, 0x50, 0x32, 0x50, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x45, 0x5f, 0x52, 0x45,
	0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x12, 0x4c, 0x0a, 0x15, 0x6c, 0x69, 0x62,
	0x70, 0x32, 0x70, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x76, 0x5f, 0x72,
	0x70, 0x63, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e,
	0x6c, 0x69, 0x62, 0x70, 0x32, 0x70, 0x2e, 0x52, 0x65, 0x63, 0x76, 0x52, 0x50, 0x43, 0x48, 0x00,
	0x52, 0x15, 0x4c, 0x49, 0x42, 0x50, 0x32, 0x50, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x45, 0x5f, 0x52,
	0x45, 0x43, 0x56, 0x5f, 0x52, 0x50, 0x43, 0x12, 0x4c, 0x0a, 0x15, 0x6c, 0x69, 0x62, 0x70, 0x32,
	0x70, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x72, 0x70, 0x63,
	0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x6c, 0x69,
	0x62, 0x70, 0x32, 0x70, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x50, 0x43, 0x48, 0x00, 0x52, 0x15,
	0x4c, 0x49, 0x42, 0x50, 0x32, 0x50, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x45, 0x5f, 0x53, 0x45, 0x4e,
	0x44, 0x5f, 0x52, 0x50, 0x43, 0x12, 0x41, 0x0a, 0x11, 0x6c, 0x69, 0x62, 0x70, 0x32, 0x70, 0x5f,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x6c, 0x69, 0x62, 0x70, 0x32, 0x70, 0x2e, 0x4a,
	0x6f, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x11, 0x4c, 0x49, 0x42, 0x50, 0x32, 0x50, 0x5f, 0x54, 0x52,
	0x41, 0x43, 0x45, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x12, 0x50, 0x0a, 0x16, 0x6c, 0x69, 0x62, 0x70,
	0x32, 0x70, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e,
	0x6c, 0x69, 0x62, 0x70, 0x32, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x48, 0x00, 0x52, 0x16, 0x4c, 0x49, 0x42, 0x50, 0x32, 0x50, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x45,
	0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x12, 0x59, 0x0a, 0x19, 0x6c, 0x69,
	0x62, 0x70, 0x32, 0x70, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x78, 0x61, 0x74, 0x75, 0x2e, 0x6c, 0x69, 0x62, 0x70, 0x32, 0x70, 0x2e, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x19, 0x4c, 0x49, 0x42, 0x50,
	0x32, 0x50, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e,
	0x45, 0x43, 0x54, 0x45, 0x44, 0x12, 0x61, 0x0a, 0x1c, 0x6c, 0x69, 0x62, 0x70, 0x32, 0x70, 0x5f,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x78, 0x61,
	0x74, 0x75, 0x2e, 0x6c, 0x69, 0x62, 0x70, 0x32, 0x70, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x1c, 0x4c, 0x49, 0x42, 0x50,
	0x32, 0x50, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x45, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x5f,
	0x4d, 0x45, 0x54, 0x41, 0x44, 0x41, 0x54, 0x41, 0x12, 0x5b, 0x0a, 0x1a, 0x6c, 0x69, 0x62, 0x70,
	0x32, 0x70, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x78,
	0x61, 0x74, 0x75, 0x2e, 0x6c, 0x69, 0x62, 0x70, 0x32, 0x70, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x1a, 0x4c, 0x49, 0x42, 0x50, 0x32,
	0x50, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x45, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x12, 0x7a, 0x0a, 0x23, 0x6c, 0x69, 0x62, 0x70, 0x32, 0x70, 0x5f,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x67, 0x6f, 0x73, 0x73, 0x69, 0x70, 0x73, 0x75, 0x62, 0x5f,
	0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x31, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x6c, 0x69, 0x62, 0x70, 0x32, 0x70,
	0x2e, 0x67, 0x6f, 0x73, 0x73, 0x69, 0x70, 0x73, 0x75, 0x62, 0x2e, 0x65, 0x74, 0x68, 0x2e, 0x42,
	0x65, 0x61, 0x63, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x23, 0x4c, 0x49,
	0x42, 0x50, 0x32, 0x50, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x45, 0x5f, 0x47, 0x4f, 0x53, 0x53, 0x49,
	0x50, 0x53, 0x55, 0x42, 0x5f, 0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x42, 0x4c, 0x4f, 0x43,
	0x4b, 0x12, 0x78, 0x0a, 0x29, 0x6c, 0x69, 0x62, 0x70, 0x32, 0x70, 0x5f, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x5f, 0x67, 0x6f, 0x73, 0x73, 0x69, 0x70, 0x73, 0x75, 0x62, 0x5f, 0x62, 0x65, 0x61, 0x63,
	0x6f, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x32,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x65, 0x74, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x29, 0x4c, 0x49, 0x42, 0x50, 0x32, 0x50, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x45, 0x5f, 0x47,
	0x4f, 0x53, 0x53, 0x49, 0x50, 0x53, 0x55, 0x42, 0x5f, 0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f,
	0x41, 0x54, 0x54, 0x45, 0x53, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x12, 0x7a, 0x0a, 0x23, 0x6c,
	0x69, 0x62, 0x70, 0x32, 0x70, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x67, 0x6f, 0x73, 0x73,
	0x69, 0x70, 0x73, 0x75, 0x62, 0x5f, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x63,
	0x61, 0x72, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e,
	0x6c, 0x69, 0x62, 0x70, 0x32, 0x70, 0x2e, 0x67, 0x6f, 0x73, 0x73, 0x69, 0x70, 0x73, 0x75, 0x62,
	0x2e, 0x65, 0x74, 0x68, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x53, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72,
	0x48, 0x00, 0x52, 0x23, 0x4c, 0x49, 0x42, 0x50, 0x32, 0x50, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x45,
	0x5f, 0x47, 0x4f, 0x53, 0x53, 0x49, 0x50, 0x53, 0x55, 0x42, 0x5f, 0x42, 0x4c, 0x4f, 0x42, 0x5f,
	0x53, 0x49, 0x44, 0x45, 0x43, 0x41, 0x52, 0x12, 0x52, 0x0a, 0x11, 0x65, 0x74, 0x68, 0x5f, 0x76,
	0x31, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x34, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x73, 0x48, 0x00, 0x52, 0x23, 0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x41,
	0x50, 0x49, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x56, 0x31, 0x5f, 0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e,
	0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x4f, 0x52, 0x53, 0x42, 0x06, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x32, 0x58, 0x0a, 0x0d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x67, 0x65,
	0x73, 0x74, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x19, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1a, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x2c, 0x5a,
	0x2a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x74, 0x68, 0x70,
	0x61, 0x6e, 0x64, 0x61, 0x6f, 0x70, 0x73, 0x2f, 0x78, 0x61, 0x74, 0x75, 0x2f, 0x70, 0x6b, 0x67,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x78, 0x61, 0x74, 0x75, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_pkg_proto_xatu_event_ingester_proto_rawDescOnce sync.Once
	file_pkg_proto_xatu_event_ingester_proto_rawDescData = file_pkg_proto_xatu_event_ingester_proto_rawDesc
)

func file_pkg_proto_xatu_event_ingester_proto_rawDescGZIP() []byte {
	file_pkg_proto_xatu_event_ingester_proto_rawDescOnce.Do(func() {
		file_pkg_proto_xatu_event_ingester_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_proto_xatu_event_ingester_proto_rawDescData)
	})
	return file_pkg_proto_xatu_event_ingester_proto_rawDescData
}

var file_pkg_proto_xatu_event_ingester_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_pkg_proto_xatu_event_ingester_proto_msgTypes = make([]protoimpl.MessageInfo, 93)
var file_pkg_proto_xatu_event_ingester_proto_goTypes = []interface{}{
	(Event_Name)(0),                // 0: xatu.Event.Name
	(*CreateEventsRequest)(nil),    // 1: xatu.CreateEventsRequest
	(*CreateEventsResponse)(nil),   // 2: xatu.CreateEventsResponse
	(*Epoch)(nil),                  // 3: xatu.Epoch
	(*EpochV2)(nil),                // 4: xatu.EpochV2
	(*Slot)(nil),                   // 5: xatu.Slot
	(*SlotV2)(nil),                 // 6: xatu.SlotV2
	(*ForkID)(nil),                 // 7: xatu.ForkID
	(*Propagation)(nil),            // 8: xatu.Propagation
	(*PropagationV2)(nil),          // 9: xatu.PropagationV2
	(*AttestingValidator)(nil),     // 10: xatu.AttestingValidator
	(*AttestingValidatorV2)(nil),   // 11: xatu.AttestingValidatorV2
	(*DebugForkChoiceReorg)(nil),   // 12: xatu.DebugForkChoiceReorg
	(*DebugForkChoiceReorgV2)(nil), // 13: xatu.DebugForkChoiceReorgV2
	(*Validators)(nil),             // 14: xatu.Validators
	(*BlockIdentifier)(nil),        // 15: xatu.BlockIdentifier
	(*ClientMeta)(nil),             // 16: xatu.ClientMeta
	(*ServerMeta)(nil),             // 17: xatu.ServerMeta
	(*Meta)(nil),                   // 18: xatu.Meta
	(*Event)(nil),                  // 19: xatu.Event
	(*DecoratedEvent)(nil),         // 20: xatu.DecoratedEvent
	(*ClientMeta_Ethereum)(nil),    // 21: xatu.ClientMeta.Ethereum
	nil,                            // 22: xatu.ClientMeta.LabelsEntry
	(*ClientMeta_AdditionalEthV1AttestationSourceData)(nil),                        // 23: xatu.ClientMeta.AdditionalEthV1AttestationSourceData
	(*ClientMeta_AdditionalEthV1AttestationSourceV2Data)(nil),                      // 24: xatu.ClientMeta.AdditionalEthV1AttestationSourceV2Data
	(*ClientMeta_AdditionalEthV1AttestationTargetData)(nil),                        // 25: xatu.ClientMeta.AdditionalEthV1AttestationTargetData
	(*ClientMeta_AdditionalEthV1AttestationTargetV2Data)(nil),                      // 26: xatu.ClientMeta.AdditionalEthV1AttestationTargetV2Data
	(*ClientMeta_AdditionalEthV1EventsAttestationData)(nil),                        // 27: xatu.ClientMeta.AdditionalEthV1EventsAttestationData
	(*ClientMeta_AdditionalEthV1EventsAttestationV2Data)(nil),                      // 28: xatu.ClientMeta.AdditionalEthV1EventsAttestationV2Data
	(*ClientMeta_AdditionalEthV1EventsHeadData)(nil),                               // 29: xatu.ClientMeta.AdditionalEthV1EventsHeadData
	(*ClientMeta_AdditionalEthV1EventsHeadV2Data)(nil),                             // 30: xatu.ClientMeta.AdditionalEthV1EventsHeadV2Data
	(*ClientMeta_AdditionalEthV1EventsBlockData)(nil),                              // 31: xatu.ClientMeta.AdditionalEthV1EventsBlockData
	(*ClientMeta_AdditionalEthV1EventsBlockV2Data)(nil),                            // 32: xatu.ClientMeta.AdditionalEthV1EventsBlockV2Data
	(*ClientMeta_AdditionalEthV1EventsVoluntaryExitData)(nil),                      // 33: xatu.ClientMeta.AdditionalEthV1EventsVoluntaryExitData
	(*ClientMeta_AdditionalEthV1EventsVoluntaryExitV2Data)(nil),                    // 34: xatu.ClientMeta.AdditionalEthV1EventsVoluntaryExitV2Data
	(*ClientMeta_AdditionalEthV1EventsFinalizedCheckpointData)(nil),                // 35: xatu.ClientMeta.AdditionalEthV1EventsFinalizedCheckpointData
	(*ClientMeta_AdditionalEthV1EventsFinalizedCheckpointV2Data)(nil),              // 36: xatu.ClientMeta.AdditionalEthV1EventsFinalizedCheckpointV2Data
	(*ClientMeta_AdditionalEthV1EventsChainReorgData)(nil),                         // 37: xatu.ClientMeta.AdditionalEthV1EventsChainReorgData
	(*ClientMeta_AdditionalEthV1EventsChainReorgV2Data)(nil),                       // 38: xatu.ClientMeta.AdditionalEthV1EventsChainReorgV2Data
	(*ClientMeta_AdditionalEthV1EventsContributionAndProofContributionData)(nil),   // 39: xatu.ClientMeta.AdditionalEthV1EventsContributionAndProofContributionData
	(*ClientMeta_AdditionalEthV1EventsContributionAndProofContributionV2Data)(nil), // 40: xatu.ClientMeta.AdditionalEthV1EventsContributionAndProofContributionV2Data
	(*ClientMeta_AdditionalEthV1EventsContributionAndProofData)(nil),               // 41: xatu.ClientMeta.AdditionalEthV1EventsContributionAndProofData
	(*ClientMeta_AdditionalEthV1EventsContributionAndProofV2Data)(nil),             // 42: xatu.ClientMeta.AdditionalEthV1EventsContributionAndProofV2Data
	(*ClientMeta_ForkChoiceSnapshot)(nil),                                          // 43: xatu.ClientMeta.ForkChoiceSnapshot
	(*ClientMeta_ForkChoiceSnapshotV2)(nil),                                        // 44: xatu.ClientMeta.ForkChoiceSnapshotV2
	(*ClientMeta_AdditionalEthV1DebugForkChoiceData)(nil),                          // 45: xatu.ClientMeta.AdditionalEthV1DebugForkChoiceData
	(*ClientMeta_AdditionalEthV1DebugForkChoiceV2Data)(nil),                        // 46: xatu.ClientMeta.AdditionalEthV1DebugForkChoiceV2Data
	(*ClientMeta_AdditionalEthV1DebugForkChoiceReOrgData)(nil),                     // 47: xatu.ClientMeta.AdditionalEthV1DebugForkChoiceReOrgData
	(*ClientMeta_AdditionalEthV1DebugForkChoiceReOrgV2Data)(nil),                   // 48: xatu.ClientMeta.AdditionalEthV1DebugForkChoiceReOrgV2Data
	(*ClientMeta_AdditionalEthV1BeaconCommitteeData)(nil),                          // 49: xatu.ClientMeta.AdditionalEthV1BeaconCommitteeData
	(*ClientMeta_AdditionalMempoolTransactionData)(nil),                            // 50: xatu.ClientMeta.AdditionalMempoolTransactionData
	(*ClientMeta_AdditionalMempoolTransactionV2Data)(nil),                          // 51: xatu.ClientMeta.AdditionalMempoolTransactionV2Data
	(*ClientMeta_AdditionalEthV2BeaconBlockData)(nil),                              // 52: xatu.ClientMeta.AdditionalEthV2BeaconBlockData
	(*ClientMeta_AdditionalEthV2BeaconBlockV2Data)(nil),                            // 53: xatu.ClientMeta.AdditionalEthV2BeaconBlockV2Data
	(*ClientMeta_AdditionalEthV2BeaconBlockAttesterSlashingData)(nil),              // 54: xatu.ClientMeta.AdditionalEthV2BeaconBlockAttesterSlashingData
	(*ClientMeta_AdditionalEthV2BeaconBlockProposerSlashingData)(nil),              // 55: xatu.ClientMeta.AdditionalEthV2BeaconBlockProposerSlashingData
	(*ClientMeta_AdditionalEthV2BeaconBlockVoluntaryExitData)(nil),                 // 56: xatu.ClientMeta.AdditionalEthV2BeaconBlockVoluntaryExitData
	(*ClientMeta_AdditionalEthV2BeaconBlockDepositData)(nil),                       // 57: xatu.ClientMeta.AdditionalEthV2BeaconBlockDepositData
	(*ClientMeta_AdditionalEthV2BeaconBlockBLSToExecutionChangeData)(nil),          // 58: xatu.ClientMeta.AdditionalEthV2BeaconBlockBLSToExecutionChangeData
	(*ClientMeta_AdditionalEthV2BeaconBlockExecutionTransactionData)(nil),          // 59: xatu.ClientMeta.AdditionalEthV2BeaconBlockExecutionTransactionData
	(*ClientMeta_AdditionalEthV2BeaconBlockWithdrawalData)(nil),                    // 60: xatu.ClientMeta.AdditionalEthV2BeaconBlockWithdrawalData
	(*ClientMeta_AdditionalBlockprintBlockClassificationData)(nil),                 // 61: xatu.ClientMeta.AdditionalBlockprintBlockClassificationData
	(*ClientMeta_AttestationDataSnapshot)(nil),                                     // 62: xatu.ClientMeta.AttestationDataSnapshot
	(*ClientMeta_AdditionalEthV1ValidatorAttestationDataData)(nil),                 // 63: xatu.ClientMeta.AdditionalEthV1ValidatorAttestationDataData
	(*ClientMeta_AdditionalEthV1EventsBlobSidecarData)(nil),                        // 64: xatu.ClientMeta.AdditionalEthV1EventsBlobSidecarData
	(*ClientMeta_AdditionalEthV1BeaconBlobSidecarData)(nil),                        // 65: xatu.ClientMeta.AdditionalEthV1BeaconBlobSidecarData
	(*ClientMeta_AdditionalBeaconP2PAttestationData)(nil),                          // 66: xatu.ClientMeta.AdditionalBeaconP2PAttestationData
	(*ClientMeta_AdditionalEthV1ProposerDutyData)(nil),                             // 67: xatu.ClientMeta.AdditionalEthV1ProposerDutyData
	(*ClientMeta_AdditionalEthV2BeaconBlockElaboratedAttestationData)(nil),         // 68: xatu.ClientMeta.AdditionalEthV2BeaconBlockElaboratedAttestationData
	(*ClientMeta_AdditionalLibP2PTraceAddPeerData)(nil),                            // 69: xatu.ClientMeta.AdditionalLibP2PTraceAddPeerData
	(*ClientMeta_AdditionalLibP2PTraceRemovePeerData)(nil),                         // 70: xatu.ClientMeta.AdditionalLibP2PTraceRemovePeerData
	(*ClientMeta_AdditionalLibP2PTraceRecvRPCData)(nil),                            // 71: xatu.ClientMeta.AdditionalLibP2PTraceRecvRPCData
	(*ClientMeta_AdditionalLibP2PTraceSendRPCData)(nil),                            // 72: xatu.ClientMeta.AdditionalLibP2PTraceSendRPCData
	(*ClientMeta_AdditionalLibP2PTraceJoinData)(nil),                               // 73: xatu.ClientMeta.AdditionalLibP2PTraceJoinData
	(*ClientMeta_AdditionalLibP2PTraceConnectedData)(nil),                          // 74: xatu.ClientMeta.AdditionalLibP2PTraceConnectedData
	(*ClientMeta_AdditionalLibP2PTraceDisconnectedData)(nil),                       // 75: xatu.ClientMeta.AdditionalLibP2PTraceDisconnectedData
	(*ClientMeta_AdditionalLibP2PTraceHandleMetadataData)(nil),                     // 76: xatu.ClientMeta.AdditionalLibP2PTraceHandleMetadataData
	(*ClientMeta_AdditionalLibP2PTraceHandleStatusData)(nil),                       // 77: xatu.ClientMeta.AdditionalLibP2PTraceHandleStatusData
	(*ClientMeta_AdditionalLibP2PTraceGossipSubBeaconBlockData)(nil),               // 78: xatu.ClientMeta.AdditionalLibP2PTraceGossipSubBeaconBlockData
	(*ClientMeta_AdditionalLibP2PTraceGossipSubBeaconAttestationSourceData)(nil),   // 79: xatu.ClientMeta.AdditionalLibP2PTraceGossipSubBeaconAttestationSourceData
	(*ClientMeta_AdditionalLibP2PTraceGossipSubBeaconAttestationTargetData)(nil),   // 80: xatu.ClientMeta.AdditionalLibP2PTraceGossipSubBeaconAttestationTargetData
	(*ClientMeta_AdditionalLibP2PTraceGossipSubBeaconAttestationData)(nil),         // 81: xatu.ClientMeta.AdditionalLibP2PTraceGossipSubBeaconAttestationData
	(*ClientMeta_AdditionalLibP2PTraceGossipSubBlobSidecarData)(nil),               // 82: xatu.ClientMeta.AdditionalLibP2PTraceGossipSubBlobSidecarData
	(*ClientMeta_AdditionalEthV1ValidatorsData)(nil),                               // 83: xatu.ClientMeta.AdditionalEthV1ValidatorsData
	(*ClientMeta_Ethereum_Network)(nil),                                            // 84: xatu.ClientMeta.Ethereum.Network
	(*ClientMeta_Ethereum_Execution)(nil),                                          // 85: xatu.ClientMeta.Ethereum.Execution
	(*ClientMeta_Ethereum_Consensus)(nil),                                          // 86: xatu.ClientMeta.Ethereum.Consensus
	(*ServerMeta_Event)(nil),                                                       // 87: xatu.ServerMeta.Event
	(*ServerMeta_Geo)(nil),                                                         // 88: xatu.ServerMeta.Geo
	(*ServerMeta_Client)(nil),                                                      // 89: xatu.ServerMeta.Client
	(*ServerMeta_Peer)(nil),                                                        // 90: xatu.ServerMeta.Peer
	(*ServerMeta_AdditionalBeaconP2PAttestationData)(nil),                          // 91: xatu.ServerMeta.AdditionalBeaconP2PAttestationData
	(*ServerMeta_AdditionalLibp2PTraceConnectedData)(nil),                          // 92: xatu.ServerMeta.AdditionalLibp2PTraceConnectedData
	(*ServerMeta_AdditionalLibp2PTraceDisconnectedData)(nil),                       // 93: xatu.ServerMeta.AdditionalLibp2PTraceDisconnectedData
	(*timestamppb.Timestamp)(nil),                                                  // 94: google.protobuf.Timestamp
	(*wrapperspb.UInt64Value)(nil),                                                 // 95: google.protobuf.UInt64Value
	(*v1.ForkChoice)(nil),                                                          // 96: xatu.eth.v1.ForkChoice
	(*v1.EventChainReorg)(nil),                                                     // 97: xatu.eth.v1.EventChainReorg
	(*v1.ForkChoiceV2)(nil),                                                        // 98: xatu.eth.v1.ForkChoiceV2
	(*v1.EventChainReorgV2)(nil),                                                   // 99: xatu.eth.v1.EventChainReorgV2
	(*v1.Validator)(nil),                                                           // 100: xatu.eth.v1.Validator
	(*v1.Attestation)(nil),                                                         // 101: xatu.eth.v1.Attestation
	(*v1.EventBlock)(nil),                                                          // 102: xatu.eth.v1.EventBlock
	(*v1.EventFinalizedCheckpoint)(nil),                                            // 103: xatu.eth.v1.EventFinalizedCheckpoint
	(*v1.EventHead)(nil),                                                           // 104: xatu.eth.v1.EventHead
	(*v1.EventVoluntaryExit)(nil),                                                  // 105: xatu.eth.v1.EventVoluntaryExit
	(*v1.EventContributionAndProof)(nil),                                           // 106: xatu.eth.v1.EventContributionAndProof
	(*v2.EventBlock)(nil),                                                          // 107: xatu.eth.v2.EventBlock
	(*v1.Committee)(nil),                                                           // 108: xatu.eth.v1.Committee
	(*v1.AttestationDataV2)(nil),                                                   // 109: xatu.eth.v1.AttestationDataV2
	(*v1.AttestationV2)(nil),                                                       // 110: xatu.eth.v1.AttestationV2
	(*v1.EventBlockV2)(nil),                                                        // 111: xatu.eth.v1.EventBlockV2
	(*v1.EventFinalizedCheckpointV2)(nil),                                          // 112: xatu.eth.v1.EventFinalizedCheckpointV2
	(*v1.EventHeadV2)(nil),                                                         // 113: xatu.eth.v1.EventHeadV2
	(*v1.EventVoluntaryExitV2)(nil),                                                // 114: xatu.eth.v1.EventVoluntaryExitV2
	(*v1.EventContributionAndProofV2)(nil),                                         // 115: xatu.eth.v1.EventContributionAndProofV2
	(*v2.EventBlockV2)(nil),                                                        // 116: xatu.eth.v2.EventBlockV2
	(*v1.AttesterSlashingV2)(nil),                                                  // 117: xatu.eth.v1.AttesterSlashingV2
	(*v1.ProposerSlashingV2)(nil),                                                  // 118: xatu.eth.v1.ProposerSlashingV2
	(*v1.SignedVoluntaryExitV2)(nil),                                               // 119: xatu.eth.v1.SignedVoluntaryExitV2
	(*v1.DepositV2)(nil),                                                           // 120: xatu.eth.v1.DepositV2
	(*v2.SignedBLSToExecutionChangeV2)(nil),                                        // 121: xatu.eth.v2.SignedBLSToExecutionChangeV2
	(*v1.Transaction)(nil),                                                         // 122: xatu.eth.v1.Transaction
	(*v1.WithdrawalV2)(nil),                                                        // 123: xatu.eth.v1.WithdrawalV2
	(*v1.EventBlobSidecar)(nil),                                                    // 124: xatu.eth.v1.EventBlobSidecar
	(*blockprint.BlockClassification)(nil),                                         // 125: xatu.blockprint.BlockClassification
	(*v1.BlobSidecar)(nil),                                                         // 126: xatu.eth.v1.BlobSidecar
	(*v1.ProposerDuty)(nil),                                                        // 127: xatu.eth.v1.ProposerDuty
	(*v1.ElaboratedAttestation)(nil),                                               // 128: xatu.eth.v1.ElaboratedAttestation
	(*libp2p.AddPeer)(nil),                                                         // 129: xatu.libp2p.AddPeer
	(*libp2p.RemovePeer)(nil),                                                      // 130: xatu.libp2p.RemovePeer
	(*libp2p.RecvRPC)(nil),                                                         // 131: xatu.libp2p.RecvRPC
	(*libp2p.SendRPC)(nil),                                                         // 132: xatu.libp2p.SendRPC
	(*libp2p.Join)(nil),                                                            // 133: xatu.libp2p.Join
	(*libp2p.Connected)(nil),                                                       // 134: xatu.libp2p.Connected
	(*libp2p.Disconnected)(nil),                                                    // 135: xatu.libp2p.Disconnected
	(*libp2p.HandleMetadata)(nil),                                                  // 136: xatu.libp2p.HandleMetadata
	(*libp2p.HandleStatus)(nil),                                                    // 137: xatu.libp2p.HandleStatus
	(*gossipsub.BeaconBlock)(nil),                                                  // 138: xatu.libp2p.gossipsub.eth.BeaconBlock
	(*gossipsub.BlobSidecar)(nil),                                                  // 139: xatu.libp2p.gossipsub.eth.BlobSidecar
	(*wrapperspb.UInt32Value)(nil),                                                 // 140: google.protobuf.UInt32Value
	(*libp2p.Peer)(nil),                                                            // 141: xatu.libp2p.Peer
	(*wrapperspb.BoolValue)(nil),                                                   // 142: google.protobuf.BoolValue
	(*libp2p.TraceEventMetadata)(nil),                                              // 143: xatu.libp2p.TraceEventMetadata
	(*wrapperspb.StringValue)(nil),                                                 // 144: google.protobuf.StringValue
}
var file_pkg_proto_xatu_event_ingester_proto_depIdxs = []int32{
	20,  // 0: xatu.CreateEventsRequest.events:type_name -> xatu.DecoratedEvent
	94,  // 1: xatu.Epoch.start_date_time:type_name -> google.protobuf.Timestamp
	95,  // 2: xatu.EpochV2.number:type_name -> google.protobuf.UInt64Value
	94,  // 3: xatu.EpochV2.start_date_time:type_name -> google.protobuf.Timestamp
	94,  // 4: xatu.Slot.start_date_time:type_name -> google.protobuf.Timestamp
	95,  // 5: xatu.SlotV2.number:type_name -> google.protobuf.UInt64Value
	94,  // 6: xatu.SlotV2.start_date_time:type_name -> google.protobuf.Timestamp
	95,  // 7: xatu.PropagationV2.slot_start_diff:type_name -> google.protobuf.UInt64Value
	95,  // 8: xatu.AttestingValidatorV2.committee_index:type_name -> google.protobuf.UInt64Value
	95,  // 9: xatu.AttestingValidatorV2.index:type_name -> google.protobuf.UInt64Value
	96,  // 10: xatu.DebugForkChoiceReorg.before:type_name -> xatu.eth.v1.ForkChoice
	96,  // 11: xatu.DebugForkChoiceReorg.after:type_name -> xatu.eth.v1.ForkChoice
	97,  // 12: xatu.DebugForkChoiceReorg.event:type_name -> xatu.eth.v1.EventChainReorg
	98,  // 13: xatu.DebugForkChoiceReorgV2.before:type_name -> xatu.eth.v1.ForkChoiceV2
	98,  // 14: xatu.DebugForkChoiceReorgV2.after:type_name -> xatu.eth.v1.ForkChoiceV2
	99,  // 15: xatu.DebugForkChoiceReorgV2.event:type_name -> xatu.eth.v1.EventChainReorgV2
	100, // 16: xatu.Validators.validators:type_name -> xatu.eth.v1.Validator
	4,   // 17: xatu.BlockIdentifier.epoch:type_name -> xatu.EpochV2
	6,   // 18: xatu.BlockIdentifier.slot:type_name -> xatu.SlotV2
	21,  // 19: xatu.ClientMeta.ethereum:type_name -> xatu.ClientMeta.Ethereum
	22,  // 20: xatu.ClientMeta.labels:type_name -> xatu.ClientMeta.LabelsEntry
	27,  // 21: xatu.ClientMeta.eth_v1_events_attestation:type_name -> xatu.ClientMeta.AdditionalEthV1EventsAttestationData
	29,  // 22: xatu.ClientMeta.eth_v1_events_head:type_name -> xatu.ClientMeta.AdditionalEthV1EventsHeadData
	31,  // 23: xatu.ClientMeta.eth_v1_events_block:type_name -> xatu.ClientMeta.AdditionalEthV1EventsBlockData
	33,  // 24: xatu.ClientMeta.eth_v1_events_voluntary_exit:type_name -> xatu.ClientMeta.AdditionalEthV1EventsVoluntaryExitData
	35,  // 25: xatu.ClientMeta.eth_v1_events_finalized_checkpoint:type_name -> xatu.ClientMeta.AdditionalEthV1EventsFinalizedCheckpointData
	37,  // 26: xatu.ClientMeta.eth_v1_events_chain_reorg:type_name -> xatu.ClientMeta.AdditionalEthV1EventsChainReorgData
	41,  // 27: xatu.ClientMeta.eth_v1_events_contribution_and_proof:type_name -> xatu.ClientMeta.AdditionalEthV1EventsContributionAndProofData
	50,  // 28: xatu.ClientMeta.mempool_transaction:type_name -> xatu.ClientMeta.AdditionalMempoolTransactionData
	52,  // 29: xatu.ClientMeta.eth_v2_beacon_block:type_name -> xatu.ClientMeta.AdditionalEthV2BeaconBlockData
	45,  // 30: xatu.ClientMeta.eth_v1_debug_fork_choice:type_name -> xatu.ClientMeta.AdditionalEthV1DebugForkChoiceData
	47,  // 31: xatu.ClientMeta.eth_v1_debug_fork_choice_reorg:type_name -> xatu.ClientMeta.AdditionalEthV1DebugForkChoiceReOrgData
	49,  // 32: xatu.ClientMeta.eth_v1_beacon_committee:type_name -> xatu.ClientMeta.AdditionalEthV1BeaconCommitteeData
	63,  // 33: xatu.ClientMeta.eth_v1_validator_attestation_data:type_name -> xatu.ClientMeta.AdditionalEthV1ValidatorAttestationDataData
	28,  // 34: xatu.ClientMeta.eth_v1_events_attestation_v2:type_name -> xatu.ClientMeta.AdditionalEthV1EventsAttestationV2Data
	30,  // 35: xatu.ClientMeta.eth_v1_events_head_v2:type_name -> xatu.ClientMeta.AdditionalEthV1EventsHeadV2Data
	32,  // 36: xatu.ClientMeta.eth_v1_events_block_v2:type_name -> xatu.ClientMeta.AdditionalEthV1EventsBlockV2Data
	34,  // 37: xatu.ClientMeta.eth_v1_events_voluntary_exit_v2:type_name -> xatu.ClientMeta.AdditionalEthV1EventsVoluntaryExitV2Data
	36,  // 38: xatu.ClientMeta.eth_v1_events_finalized_checkpoint_v2:type_name -> xatu.ClientMeta.AdditionalEthV1EventsFinalizedCheckpointV2Data
	38,  // 39: xatu.ClientMeta.eth_v1_events_chain_reorg_v2:type_name -> xatu.ClientMeta.AdditionalEthV1EventsChainReorgV2Data
	42,  // 40: xatu.ClientMeta.eth_v1_events_contribution_and_proof_v2:type_name -> xatu.ClientMeta.AdditionalEthV1EventsContributionAndProofV2Data
	51,  // 41: xatu.ClientMeta.mempool_transaction_v2:type_name -> xatu.ClientMeta.AdditionalMempoolTransactionV2Data
	53,  // 42: xatu.ClientMeta.eth_v2_beacon_block_v2:type_name -> xatu.ClientMeta.AdditionalEthV2BeaconBlockV2Data
	46,  // 43: xatu.ClientMeta.eth_v1_debug_fork_choice_v2:type_name -> xatu.ClientMeta.AdditionalEthV1DebugForkChoiceV2Data
	48,  // 44: xatu.ClientMeta.eth_v1_debug_fork_choice_reorg_v2:type_name -> xatu.ClientMeta.AdditionalEthV1DebugForkChoiceReOrgV2Data
	54,  // 45: xatu.ClientMeta.eth_v2_beacon_block_attester_slashing:type_name -> xatu.ClientMeta.AdditionalEthV2BeaconBlockAttesterSlashingData
	55,  // 46: xatu.ClientMeta.eth_v2_beacon_block_proposer_slashing:type_name -> xatu.ClientMeta.AdditionalEthV2BeaconBlockProposerSlashingData
	56,  // 47: xatu.ClientMeta.eth_v2_beacon_block_voluntary_exit:type_name -> xatu.ClientMeta.AdditionalEthV2BeaconBlockVoluntaryExitData
	57,  // 48: xatu.ClientMeta.eth_v2_beacon_block_deposit:type_name -> xatu.ClientMeta.AdditionalEthV2BeaconBlockDepositData
	58,  // 49: xatu.ClientMeta.eth_v2_beacon_block_bls_to_execution_change:type_name -> xatu.ClientMeta.AdditionalEthV2BeaconBlockBLSToExecutionChangeData
	59,  // 50: xatu.ClientMeta.eth_v2_beacon_block_execution_transaction:type_name -> xatu.ClientMeta.AdditionalEthV2BeaconBlockExecutionTransactionData
	60,  // 51: xatu.ClientMeta.eth_v2_beacon_block_withdrawal:type_name -> xatu.ClientMeta.AdditionalEthV2BeaconBlockWithdrawalData
	64,  // 52: xatu.ClientMeta.eth_v1_events_blob_sidecar:type_name -> xatu.ClientMeta.AdditionalEthV1EventsBlobSidecarData
	61,  // 53: xatu.ClientMeta.blockprint_block_classification:type_name -> xatu.ClientMeta.AdditionalBlockprintBlockClassificationData
	65,  // 54: xatu.ClientMeta.eth_v1_beacon_blob_sidecar:type_name -> xatu.ClientMeta.AdditionalEthV1BeaconBlobSidecarData
	66,  // 55: xatu.ClientMeta.beacon_p2p_attestation:type_name -> xatu.ClientMeta.AdditionalBeaconP2PAttestationData
	67,  // 56: xatu.ClientMeta.eth_v1_proposer_duty:type_name -> xatu.ClientMeta.AdditionalEthV1ProposerDutyData
	68,  // 57: xatu.ClientMeta.eth_v2_beacon_block_elaborated_attestation:type_name -> xatu.ClientMeta.AdditionalEthV2BeaconBlockElaboratedAttestationData
	69,  // 58: xatu.ClientMeta.libp2p_trace_add_peer:type_name -> xatu.ClientMeta.AdditionalLibP2PTraceAddPeerData
	70,  // 59: xatu.ClientMeta.libp2p_trace_remove_peer:type_name -> xatu.ClientMeta.AdditionalLibP2PTraceRemovePeerData
	71,  // 60: xatu.ClientMeta.libp2p_trace_recv_rpc:type_name -> xatu.ClientMeta.AdditionalLibP2PTraceRecvRPCData
	72,  // 61: xatu.ClientMeta.libp2p_trace_send_rpc:type_name -> xatu.ClientMeta.AdditionalLibP2PTraceSendRPCData
	73,  // 62: xatu.ClientMeta.libp2p_trace_join:type_name -> xatu.ClientMeta.AdditionalLibP2PTraceJoinData
	74,  // 63: xatu.ClientMeta.libp2p_trace_connected:type_name -> xatu.ClientMeta.AdditionalLibP2PTraceConnectedData
	75,  // 64: xatu.ClientMeta.libp2p_trace_disconnected:type_name -> xatu.ClientMeta.AdditionalLibP2PTraceDisconnectedData
	76,  // 65: xatu.ClientMeta.libp2p_trace_handle_metadata:type_name -> xatu.ClientMeta.AdditionalLibP2PTraceHandleMetadataData
	77,  // 66: xatu.ClientMeta.libp2p_trace_handle_status:type_name -> xatu.ClientMeta.AdditionalLibP2PTraceHandleStatusData
	78,  // 67: xatu.ClientMeta.libp2p_trace_gossipsub_beacon_block:type_name -> xatu.ClientMeta.AdditionalLibP2PTraceGossipSubBeaconBlockData
	81,  // 68: xatu.ClientMeta.libp2p_trace_gossipsub_beacon_attestation:type_name -> xatu.ClientMeta.AdditionalLibP2PTraceGossipSubBeaconAttestationData
	82,  // 69: xatu.ClientMeta.libp2p_trace_gossipsub_blob_sidecar:type_name -> xatu.ClientMeta.AdditionalLibP2PTraceGossipSubBlobSidecarData
	83,  // 70: xatu.ClientMeta.eth_v1_validators:type_name -> xatu.ClientMeta.AdditionalEthV1ValidatorsData
	87,  // 71: xatu.ServerMeta.event:type_name -> xatu.ServerMeta.Event
	89,  // 72: xatu.ServerMeta.client:type_name -> xatu.ServerMeta.Client
	91,  // 73: xatu.ServerMeta.BEACON_P2P_ATTESTATION:type_name -> xatu.ServerMeta.AdditionalBeaconP2PAttestationData
	92,  // 74: xatu.ServerMeta.LIBP2P_TRACE_CONNECTED:type_name -> xatu.ServerMeta.AdditionalLibp2PTraceConnectedData
	93,  // 75: xatu.ServerMeta.LIBP2P_TRACE_DISCONNECTED:type_name -> xatu.ServerMeta.AdditionalLibp2PTraceDisconnectedData
	16,  // 76: xatu.Meta.client:type_name -> xatu.ClientMeta
	17,  // 77: xatu.Meta.server:type_name -> xatu.ServerMeta
	0,   // 78: xatu.Event.name:type_name -> xatu.Event.Name
	94,  // 79: xatu.Event.date_time:type_name -> google.protobuf.Timestamp
	19,  // 80: xatu.DecoratedEvent.event:type_name -> xatu.Event
	18,  // 81: xatu.DecoratedEvent.meta:type_name -> xatu.Meta
	101, // 82: xatu.DecoratedEvent.eth_v1_events_attestation:type_name -> xatu.eth.v1.Attestation
	102, // 83: xatu.DecoratedEvent.eth_v1_events_block:type_name -> xatu.eth.v1.EventBlock
	97,  // 84: xatu.DecoratedEvent.eth_v1_events_chain_reorg:type_name -> xatu.eth.v1.EventChainReorg
	103, // 85: xatu.DecoratedEvent.eth_v1_events_finalized_checkpoint:type_name -> xatu.eth.v1.EventFinalizedCheckpoint
	104, // 86: xatu.DecoratedEvent.eth_v1_events_head:type_name -> xatu.eth.v1.EventHead
	105, // 87: xatu.DecoratedEvent.eth_v1_events_voluntary_exit:type_name -> xatu.eth.v1.EventVoluntaryExit
	106, // 88: xatu.DecoratedEvent.eth_v1_events_contribution_and_proof:type_name -> xatu.eth.v1.EventContributionAndProof
	107, // 89: xatu.DecoratedEvent.eth_v2_beacon_block:type_name -> xatu.eth.v2.EventBlock
	96,  // 90: xatu.DecoratedEvent.eth_v1_fork_choice:type_name -> xatu.eth.v1.ForkChoice
	12,  // 91: xatu.DecoratedEvent.eth_v1_fork_choice_reorg:type_name -> xatu.DebugForkChoiceReorg
	108, // 92: xatu.DecoratedEvent.eth_v1_beacon_committee:type_name -> xatu.eth.v1.Committee
	109, // 93: xatu.DecoratedEvent.eth_v1_validator_attestation_data:type_name -> xatu.eth.v1.AttestationDataV2
	110, // 94: xatu.DecoratedEvent.eth_v1_events_attestation_v2:type_name -> xatu.eth.v1.AttestationV2
	111, // 95: xatu.DecoratedEvent.eth_v1_events_block_v2:type_name -> xatu.eth.v1.EventBlockV2
	99,  // 96: xatu.DecoratedEvent.eth_v1_events_chain_reorg_v2:type_name -> xatu.eth.v1.EventChainReorgV2
	112, // 97: xatu.DecoratedEvent.eth_v1_events_finalized_checkpoint_v2:type_name -> xatu.eth.v1.EventFinalizedCheckpointV2
	113, // 98: xatu.DecoratedEvent.eth_v1_events_head_v2:type_name -> xatu.eth.v1.EventHeadV2
	114, // 99: xatu.DecoratedEvent.eth_v1_events_voluntary_exit_v2:type_name -> xatu.eth.v1.EventVoluntaryExitV2
	115, // 100: xatu.DecoratedEvent.eth_v1_events_contribution_and_proof_v2:type_name -> xatu.eth.v1.EventContributionAndProofV2
	116, // 101: xatu.DecoratedEvent.eth_v2_beacon_block_v2:type_name -> xatu.eth.v2.EventBlockV2
	98,  // 102: xatu.DecoratedEvent.eth_v1_fork_choice_v2:type_name -> xatu.eth.v1.ForkChoiceV2
	13,  // 103: xatu.DecoratedEvent.eth_v1_fork_choice_reorg_v2:type_name -> xatu.DebugForkChoiceReorgV2
	117, // 104: xatu.DecoratedEvent.eth_v2_beacon_block_attester_slashing:type_name -> xatu.eth.v1.AttesterSlashingV2
	118, // 105: xatu.DecoratedEvent.eth_v2_beacon_block_proposer_slashing:type_name -> xatu.eth.v1.ProposerSlashingV2
	119, // 106: xatu.DecoratedEvent.eth_v2_beacon_block_voluntary_exit:type_name -> xatu.eth.v1.SignedVoluntaryExitV2
	120, // 107: xatu.DecoratedEvent.eth_v2_beacon_block_deposit:type_name -> xatu.eth.v1.DepositV2
	121, // 108: xatu.DecoratedEvent.eth_v2_beacon_block_bls_to_execution_change:type_name -> xatu.eth.v2.SignedBLSToExecutionChangeV2
	122, // 109: xatu.DecoratedEvent.eth_v2_beacon_block_execution_transaction:type_name -> xatu.eth.v1.Transaction
	123, // 110: xatu.DecoratedEvent.eth_v2_beacon_block_withdrawal:type_name -> xatu.eth.v1.WithdrawalV2
	124, // 111: xatu.DecoratedEvent.eth_v1_events_blob_sidecar:type_name -> xatu.eth.v1.EventBlobSidecar
	125, // 112: xatu.DecoratedEvent.blockprint_block_classification:type_name -> xatu.blockprint.BlockClassification
	126, // 113: xatu.DecoratedEvent.eth_v1_beacon_block_blob_sidecar:type_name -> xatu.eth.v1.BlobSidecar
	110, // 114: xatu.DecoratedEvent.beacon_p2p_attestation:type_name -> xatu.eth.v1.AttestationV2
	127, // 115: xatu.DecoratedEvent.eth_v1_proposer_duty:type_name -> xatu.eth.v1.ProposerDuty
	128, // 116: xatu.DecoratedEvent.eth_v2_beacon_block_elaborated_attestation:type_name -> xatu.eth.v1.ElaboratedAttestation
	129, // 117: xatu.DecoratedEvent.libp2p_trace_add_peer:type_name -> xatu.libp2p.AddPeer
	130, // 118: xatu.DecoratedEvent.libp2p_trace_remove_peer:type_name -> xatu.libp2p.RemovePeer
	131, // 119: xatu.DecoratedEvent.libp2p_trace_recv_rpc:type_name -> xatu.libp2p.RecvRPC
	132, // 120: xatu.DecoratedEvent.libp2p_trace_send_rpc:type_name -> xatu.libp2p.SendRPC
	133, // 121: xatu.DecoratedEvent.libp2p_trace_join:type_name -> xatu.libp2p.Join
	134, // 122: xatu.DecoratedEvent.libp2p_trace_connected:type_name -> xatu.libp2p.Connected
	135, // 123: xatu.DecoratedEvent.libp2p_trace_disconnected:type_name -> xatu.libp2p.Disconnected
	136, // 124: xatu.DecoratedEvent.libp2p_trace_handle_metadata:type_name -> xatu.libp2p.HandleMetadata
	137, // 125: xatu.DecoratedEvent.libp2p_trace_handle_status:type_name -> xatu.libp2p.HandleStatus
	138, // 126: xatu.DecoratedEvent.libp2p_trace_gossipsub_beacon_block:type_name -> xatu.libp2p.gossipsub.eth.BeaconBlock
	101, // 127: xatu.DecoratedEvent.libp2p_trace_gossipsub_beacon_attestation:type_name -> xatu.eth.v1.Attestation
	139, // 128: xatu.DecoratedEvent.libp2p_trace_gossipsub_blob_sidecar:type_name -> xatu.libp2p.gossipsub.eth.BlobSidecar
	14,  // 129: xatu.DecoratedEvent.eth_v1_validators:type_name -> xatu.Validators
	84,  // 130: xatu.ClientMeta.Ethereum.network:type_name -> xatu.ClientMeta.Ethereum.Network
	85,  // 131: xatu.ClientMeta.Ethereum.execution:type_name -> xatu.ClientMeta.Ethereum.Execution
	86,  // 132: xatu.ClientMeta.Ethereum.consensus:type_name -> xatu.ClientMeta.Ethereum.Consensus
	3,   // 133: xatu.ClientMeta.AdditionalEthV1AttestationSourceData.epoch:type_name -> xatu.Epoch
	4,   // 134: xatu.ClientMeta.AdditionalEthV1AttestationSourceV2Data.epoch:type_name -> xatu.EpochV2
	3,   // 135: xatu.ClientMeta.AdditionalEthV1AttestationTargetData.epoch:type_name -> xatu.Epoch
	4,   // 136: xatu.ClientMeta.AdditionalEthV1AttestationTargetV2Data.epoch:type_name -> xatu.EpochV2
	23,  // 137: xatu.ClientMeta.AdditionalEthV1EventsAttestationData.source:type_name -> xatu.ClientMeta.AdditionalEthV1AttestationSourceData
	25,  // 138: xatu.ClientMeta.AdditionalEthV1EventsAttestationData.target:type_name -> xatu.ClientMeta.AdditionalEthV1AttestationTargetData
	5,   // 139: xatu.ClientMeta.AdditionalEthV1EventsAttestationData.slot:type_name -> xatu.Slot
	3,   // 140: xatu.ClientMeta.AdditionalEthV1EventsAttestationData.epoch:type_name -> xatu.Epoch
	8,   // 141: xatu.ClientMeta.AdditionalEthV1EventsAttestationData.propagation:type_name -> xatu.Propagation
	10,  // 142: xatu.ClientMeta.AdditionalEthV1EventsAttestationData.attesting_validator:type_name -> xatu.AttestingValidator
	24,  // 143: xatu.ClientMeta.AdditionalEthV1EventsAttestationV2Data.source:type_name -> xatu.ClientMeta.AdditionalEthV1AttestationSourceV2Data
	26,  // 144: xatu.ClientMeta.AdditionalEthV1EventsAttestationV2Data.target:type_name -> xatu.ClientMeta.AdditionalEthV1AttestationTargetV2Data
	6,   // 145: xatu.ClientMeta.AdditionalEthV1EventsAttestationV2Data.slot:type_name -> xatu.SlotV2
	4,   // 146: xatu.ClientMeta.AdditionalEthV1EventsAttestationV2Data.epoch:type_name -> xatu.EpochV2
	9,   // 147: xatu.ClientMeta.AdditionalEthV1EventsAttestationV2Data.propagation:type_name -> xatu.PropagationV2
	11,  // 148: xatu.ClientMeta.AdditionalEthV1EventsAttestationV2Data.attesting_validator:type_name -> xatu.AttestingValidatorV2
	3,   // 149: xatu.ClientMeta.AdditionalEthV1EventsHeadData.epoch:type_name -> xatu.Epoch
	5,   // 150: xatu.ClientMeta.AdditionalEthV1EventsHeadData.slot:type_name -> xatu.Slot
	8,   // 151: xatu.ClientMeta.AdditionalEthV1EventsHeadData.propagation:type_name -> xatu.Propagation
	4,   // 152: xatu.ClientMeta.AdditionalEthV1EventsHeadV2Data.epoch:type_name -> xatu.EpochV2
	6,   // 153: xatu.ClientMeta.AdditionalEthV1EventsHeadV2Data.slot:type_name -> xatu.SlotV2
	9,   // 154: xatu.ClientMeta.AdditionalEthV1EventsHeadV2Data.propagation:type_name -> xatu.PropagationV2
	3,   // 155: xatu.ClientMeta.AdditionalEthV1EventsBlockData.epoch:type_name -> xatu.Epoch
	5,   // 156: xatu.ClientMeta.AdditionalEthV1EventsBlockData.slot:type_name -> xatu.Slot
	8,   // 157: xatu.ClientMeta.AdditionalEthV1EventsBlockData.propagation:type_name -> xatu.Propagation
	4,   // 158: xatu.ClientMeta.AdditionalEthV1EventsBlockV2Data.epoch:type_name -> xatu.EpochV2
	6,   // 159: xatu.ClientMeta.AdditionalEthV1EventsBlockV2Data.slot:type_name -> xatu.SlotV2
	9,   // 160: xatu.ClientMeta.AdditionalEthV1EventsBlockV2Data.propagation:type_name -> xatu.PropagationV2
	3,   // 161: xatu.ClientMeta.AdditionalEthV1EventsVoluntaryExitData.epoch:type_name -> xatu.Epoch
	4,   // 162: xatu.ClientMeta.AdditionalEthV1EventsVoluntaryExitV2Data.epoch:type_name -> xatu.EpochV2
	3,   // 163: xatu.ClientMeta.AdditionalEthV1EventsFinalizedCheckpointData.epoch:type_name -> xatu.Epoch
	4,   // 164: xatu.ClientMeta.AdditionalEthV1EventsFinalizedCheckpointV2Data.epoch:type_name -> xatu.EpochV2
	3,   // 165: xatu.ClientMeta.AdditionalEthV1EventsChainReorgData.epoch:type_name -> xatu.Epoch
	5,   // 166: xatu.ClientMeta.AdditionalEthV1EventsChainReorgData.slot:type_name -> xatu.Slot
	8,   // 167: xatu.ClientMeta.AdditionalEthV1EventsChainReorgData.propagation:type_name -> xatu.Propagation
	4,   // 168: xatu.ClientMeta.AdditionalEthV1EventsChainReorgV2Data.epoch:type_name -> xatu.EpochV2
	6,   // 169: xatu.ClientMeta.AdditionalEthV1EventsChainReorgV2Data.slot:type_name -> xatu.SlotV2
	9,   // 170: xatu.ClientMeta.AdditionalEthV1EventsChainReorgV2Data.propagation:type_name -> xatu.PropagationV2
	3,   // 171: xatu.ClientMeta.AdditionalEthV1EventsContributionAndProofContributionData.epoch:type_name -> xatu.Epoch
	5,   // 172: xatu.ClientMeta.AdditionalEthV1EventsContributionAndProofContributionData.slot:type_name -> xatu.Slot
	8,   // 173: xatu.ClientMeta.AdditionalEthV1EventsContributionAndProofContributionData.propagation:type_name -> xatu.Propagation
	4,   // 174: xatu.ClientMeta.AdditionalEthV1EventsContributionAndProofContributionV2Data.epoch:type_name -> xatu.EpochV2
	6,   // 175: xatu.ClientMeta.AdditionalEthV1EventsContributionAndProofContributionV2Data.slot:type_name -> xatu.SlotV2
	9,   // 176: xatu.ClientMeta.AdditionalEthV1EventsContributionAndProofContributionV2Data.propagation:type_name -> xatu.PropagationV2
	39,  // 177: xatu.ClientMeta.AdditionalEthV1EventsContributionAndProofData.contribution:type_name -> xatu.ClientMeta.AdditionalEthV1EventsContributionAndProofContributionData
	40,  // 178: xatu.ClientMeta.AdditionalEthV1EventsContributionAndProofV2Data.contribution:type_name -> xatu.ClientMeta.AdditionalEthV1EventsContributionAndProofContributionV2Data
	3,   // 179: xatu.ClientMeta.ForkChoiceSnapshot.request_epoch:type_name -> xatu.Epoch
	5,   // 180: xatu.ClientMeta.ForkChoiceSnapshot.request_slot:type_name -> xatu.Slot
	94,  // 181: xatu.ClientMeta.ForkChoiceSnapshot.timestamp:type_name -> google.protobuf.Timestamp
	4,   // 182: xatu.ClientMeta.ForkChoiceSnapshotV2.request_epoch:type_name -> xatu.EpochV2
	6,   // 183: xatu.ClientMeta.ForkChoiceSnapshotV2.request_slot:type_name -> xatu.SlotV2
	95,  // 184: xatu.ClientMeta.ForkChoiceSnapshotV2.requested_at_slot_start_diff_ms:type_name -> google.protobuf.UInt64Value
	95,  // 185: xatu.ClientMeta.ForkChoiceSnapshotV2.request_duration_ms:type_name -> google.protobuf.UInt64Value
	94,  // 186: xatu.ClientMeta.ForkChoiceSnapshotV2.timestamp:type_name -> google.protobuf.Timestamp
	43,  // 187: xatu.ClientMeta.AdditionalEthV1DebugForkChoiceData.Snapshot:type_name -> xatu.ClientMeta.ForkChoiceSnapshot
	44,  // 188: xatu.ClientMeta.AdditionalEthV1DebugForkChoiceV2Data.Snapshot:type_name -> xatu.ClientMeta.ForkChoiceSnapshotV2
	43,  // 189: xatu.ClientMeta.AdditionalEthV1DebugForkChoiceReOrgData.before:type_name -> xatu.ClientMeta.ForkChoiceSnapshot
	43,  // 190: xatu.ClientMeta.AdditionalEthV1DebugForkChoiceReOrgData.after:type_name -> xatu.ClientMeta.ForkChoiceSnapshot
	44,  // 191: xatu.ClientMeta.AdditionalEthV1DebugForkChoiceReOrgV2Data.before:type_name -> xatu.ClientMeta.ForkChoiceSnapshotV2
	44,  // 192: xatu.ClientMeta.AdditionalEthV1DebugForkChoiceReOrgV2Data.after:type_name -> xatu.ClientMeta.ForkChoiceSnapshotV2
	4,   // 193: xatu.ClientMeta.AdditionalEthV1BeaconCommitteeData.epoch:type_name -> xatu.EpochV2
	6,   // 194: xatu.ClientMeta.AdditionalEthV1BeaconCommitteeData.slot:type_name -> xatu.SlotV2
	95,  // 195: xatu.ClientMeta.AdditionalMempoolTransactionV2Data.nonce:type_name -> google.protobuf.UInt64Value
	95,  // 196: xatu.ClientMeta.AdditionalMempoolTransactionV2Data.gas:type_name -> google.protobuf.UInt64Value
	140, // 197: xatu.ClientMeta.AdditionalMempoolTransactionV2Data.type:type_name -> google.protobuf.UInt32Value
	95,  // 198: xatu.ClientMeta.AdditionalMempoolTransactionV2Data.blob_gas:type_name -> google.protobuf.UInt64Value
	3,   // 199: xatu.ClientMeta.AdditionalEthV2BeaconBlockData.epoch:type_name -> xatu.Epoch
	5,   // 200: xatu.ClientMeta.AdditionalEthV2BeaconBlockData.slot:type_name -> xatu.Slot
	4,   // 201: xatu.ClientMeta.AdditionalEthV2BeaconBlockV2Data.epoch:type_name -> xatu.EpochV2
	6,   // 202: xatu.ClientMeta.AdditionalEthV2BeaconBlockV2Data.slot:type_name -> xatu.SlotV2
	95,  // 203: xatu.ClientMeta.AdditionalEthV2BeaconBlockV2Data.transactions_count:type_name -> google.protobuf.UInt64Value
	95,  // 204: xatu.ClientMeta.AdditionalEthV2BeaconBlockV2Data.transactions_total_bytes:type_name -> google.protobuf.UInt64Value
	95,  // 205: xatu.ClientMeta.AdditionalEthV2BeaconBlockV2Data.transactions_total_bytes_compressed:type_name -> google.protobuf.UInt64Value
	95,  // 206: xatu.ClientMeta.AdditionalEthV2BeaconBlockV2Data.total_bytes:type_name -> google.protobuf.UInt64Value
	95,  // 207: xatu.ClientMeta.AdditionalEthV2BeaconBlockV2Data.total_bytes_compressed:type_name -> google.protobuf.UInt64Value
	15,  // 208: xatu.ClientMeta.AdditionalEthV2BeaconBlockAttesterSlashingData.block:type_name -> xatu.BlockIdentifier
	15,  // 209: xatu.ClientMeta.AdditionalEthV2BeaconBlockProposerSlashingData.block:type_name -> xatu.BlockIdentifier
	15,  // 210: xatu.ClientMeta.AdditionalEthV2BeaconBlockVoluntaryExitData.block:type_name -> xatu.BlockIdentifier
	15,  // 211: xatu.ClientMeta.AdditionalEthV2BeaconBlockDepositData.block:type_name -> xatu.BlockIdentifier
	15,  // 212: xatu.ClientMeta.AdditionalEthV2BeaconBlockBLSToExecutionChangeData.block:type_name -> xatu.BlockIdentifier
	15,  // 213: xatu.ClientMeta.AdditionalEthV2BeaconBlockExecutionTransactionData.block:type_name -> xatu.BlockIdentifier
	95,  // 214: xatu.ClientMeta.AdditionalEthV2BeaconBlockExecutionTransactionData.position_in_block:type_name -> google.protobuf.UInt64Value
	15,  // 215: xatu.ClientMeta.AdditionalEthV2BeaconBlockWithdrawalData.block:type_name -> xatu.BlockIdentifier
	4,   // 216: xatu.ClientMeta.AdditionalBlockprintBlockClassificationData.epoch:type_name -> xatu.EpochV2
	6,   // 217: xatu.ClientMeta.AdditionalBlockprintBlockClassificationData.slot:type_name -> xatu.SlotV2
	95,  // 218: xatu.ClientMeta.AttestationDataSnapshot.requested_at_slot_start_diff_ms:type_name -> google.protobuf.UInt64Value
	95,  // 219: xatu.ClientMeta.AttestationDataSnapshot.request_duration_ms:type_name -> google.protobuf.UInt64Value
	94,  // 220: xatu.ClientMeta.AttestationDataSnapshot.timestamp:type_name -> google.protobuf.Timestamp
	24,  // 221: xatu.ClientMeta.AdditionalEthV1ValidatorAttestationDataData.source:type_name -> xatu.ClientMeta.AdditionalEthV1AttestationSourceV2Data
	26,  // 222: xatu.ClientMeta.AdditionalEthV1ValidatorAttestationDataData.target:type_name -> xatu.ClientMeta.AdditionalEthV1AttestationTargetV2Data
	4,   // 223: xatu.ClientMeta.AdditionalEthV1ValidatorAttestationDataData.epoch:type_name -> xatu.EpochV2
	6,   // 224: xatu.ClientMeta.AdditionalEthV1ValidatorAttestationDataData.slot:type_name -> xatu.SlotV2
	62,  // 225: xatu.ClientMeta.AdditionalEthV1ValidatorAttestationDataData.Snapshot:type_name -> xatu.ClientMeta.AttestationDataSnapshot
	4,   // 226: xatu.ClientMeta.AdditionalEthV1EventsBlobSidecarData.epoch:type_name -> xatu.EpochV2
	6,   // 227: xatu.ClientMeta.AdditionalEthV1EventsBlobSidecarData.slot:type_name -> xatu.SlotV2
	9,   // 228: xatu.ClientMeta.AdditionalEthV1EventsBlobSidecarData.propagation:type_name -> xatu.PropagationV2
	4,   // 229: xatu.ClientMeta.AdditionalEthV1BeaconBlobSidecarData.epoch:type_name -> xatu.EpochV2
	6,   // 230: xatu.ClientMeta.AdditionalEthV1BeaconBlobSidecarData.slot:type_name -> xatu.SlotV2
	95,  // 231: xatu.ClientMeta.AdditionalEthV1BeaconBlobSidecarData.data_size:type_name -> google.protobuf.UInt64Value
	95,  // 232: xatu.ClientMeta.AdditionalEthV1BeaconBlobSidecarData.data_empty_size:type_name -> google.protobuf.UInt64Value
	24,  // 233: xatu.ClientMeta.AdditionalBeaconP2PAttestationData.source:type_name -> xatu.ClientMeta.AdditionalEthV1AttestationSourceV2Data
	26,  // 234: xatu.ClientMeta.AdditionalBeaconP2PAttestationData.target:type_name -> xatu.ClientMeta.AdditionalEthV1AttestationTargetV2Data
	6,   // 235: xatu.ClientMeta.AdditionalBeaconP2PAttestationData.slot:type_name -> xatu.SlotV2
	4,   // 236: xatu.ClientMeta.AdditionalBeaconP2PAttestationData.epoch:type_name -> xatu.EpochV2
	9,   // 237: xatu.ClientMeta.AdditionalBeaconP2PAttestationData.propagation:type_name -> xatu.PropagationV2
	11,  // 238: xatu.ClientMeta.AdditionalBeaconP2PAttestationData.attesting_validator:type_name -> xatu.AttestingValidatorV2
	141, // 239: xatu.ClientMeta.AdditionalBeaconP2PAttestationData.peer:type_name -> xatu.libp2p.Peer
	140, // 240: xatu.ClientMeta.AdditionalBeaconP2PAttestationData.subnet:type_name -> google.protobuf.UInt32Value
	142, // 241: xatu.ClientMeta.AdditionalBeaconP2PAttestationData.validated:type_name -> google.protobuf.BoolValue
	4,   // 242: xatu.ClientMeta.AdditionalEthV1ProposerDutyData.epoch:type_name -> xatu.EpochV2
	6,   // 243: xatu.ClientMeta.AdditionalEthV1ProposerDutyData.slot:type_name -> xatu.SlotV2
	15,  // 244: xatu.ClientMeta.AdditionalEthV2BeaconBlockElaboratedAttestationData.block:type_name -> xatu.BlockIdentifier
	95,  // 245: xatu.ClientMeta.AdditionalEthV2BeaconBlockElaboratedAttestationData.position_in_block:type_name -> google.protobuf.UInt64Value
	4,   // 246: xatu.ClientMeta.AdditionalEthV2BeaconBlockElaboratedAttestationData.epoch:type_name -> xatu.EpochV2
	6,   // 247: xatu.ClientMeta.AdditionalEthV2BeaconBlockElaboratedAttestationData.slot:type_name -> xatu.SlotV2
	24,  // 248: xatu.ClientMeta.AdditionalEthV2BeaconBlockElaboratedAttestationData.source:type_name -> xatu.ClientMeta.AdditionalEthV1AttestationSourceV2Data
	26,  // 249: xatu.ClientMeta.AdditionalEthV2BeaconBlockElaboratedAttestationData.target:type_name -> xatu.ClientMeta.AdditionalEthV1AttestationTargetV2Data
	143, // 250: xatu.ClientMeta.AdditionalLibP2PTraceAddPeerData.metadata:type_name -> xatu.libp2p.TraceEventMetadata
	143, // 251: xatu.ClientMeta.AdditionalLibP2PTraceRemovePeerData.metadata:type_name -> xatu.libp2p.TraceEventMetadata
	143, // 252: xatu.ClientMeta.AdditionalLibP2PTraceRecvRPCData.metadata:type_name -> xatu.libp2p.TraceEventMetadata
	143, // 253: xatu.ClientMeta.AdditionalLibP2PTraceSendRPCData.metadata:type_name -> xatu.libp2p.TraceEventMetadata
	143, // 254: xatu.ClientMeta.AdditionalLibP2PTraceJoinData.metadata:type_name -> xatu.libp2p.TraceEventMetadata
	143, // 255: xatu.ClientMeta.AdditionalLibP2PTraceConnectedData.metadata:type_name -> xatu.libp2p.TraceEventMetadata
	143, // 256: xatu.ClientMeta.AdditionalLibP2PTraceDisconnectedData.metadata:type_name -> xatu.libp2p.TraceEventMetadata
	143, // 257: xatu.ClientMeta.AdditionalLibP2PTraceHandleMetadataData.metadata:type_name -> xatu.libp2p.TraceEventMetadata
	143, // 258: xatu.ClientMeta.AdditionalLibP2PTraceHandleStatusData.metadata:type_name -> xatu.libp2p.TraceEventMetadata
	4,   // 259: xatu.ClientMeta.AdditionalLibP2PTraceGossipSubBeaconBlockData.epoch:type_name -> xatu.EpochV2
	6,   // 260: xatu.ClientMeta.AdditionalLibP2PTraceGossipSubBeaconBlockData.slot:type_name -> xatu.SlotV2
	4,   // 261: xatu.ClientMeta.AdditionalLibP2PTraceGossipSubBeaconBlockData.wallclock_epoch:type_name -> xatu.EpochV2
	6,   // 262: xatu.ClientMeta.AdditionalLibP2PTraceGossipSubBeaconBlockData.wallclock_slot:type_name -> xatu.SlotV2
	9,   // 263: xatu.ClientMeta.AdditionalLibP2PTraceGossipSubBeaconBlockData.propagation:type_name -> xatu.PropagationV2
	143, // 264: xatu.ClientMeta.AdditionalLibP2PTraceGossipSubBeaconBlockData.metadata:type_name -> xatu.libp2p.TraceEventMetadata
	144, // 265: xatu.ClientMeta.AdditionalLibP2PTraceGossipSubBeaconBlockData.topic:type_name -> google.protobuf.StringValue
	140, // 266: xatu.ClientMeta.AdditionalLibP2PTraceGossipSubBeaconBlockData.message_size:type_name -> google.protobuf.UInt32Value
	144, // 267: xatu.ClientMeta.AdditionalLibP2PTraceGossipSubBeaconBlockData.message_id:type_name -> google.protobuf.StringValue
	4,   // 268: xatu.ClientMeta.AdditionalLibP2PTraceGossipSubBeaconAttestationSourceData.epoch:type_name -> xatu.EpochV2
	4,   // 269: xatu.ClientMeta.AdditionalLibP2PTraceGossipSubBeaconAttestationTargetData.epoch:type_name -> xatu.EpochV2
	79,  // 270: xatu.ClientMeta.AdditionalLibP2PTraceGossipSubBeaconAttestationData.source:type_name -> xatu.ClientMeta.AdditionalLibP2PTraceGossipSubBeaconAttestationSourceData
	80,  // 271: xatu.ClientMeta.AdditionalLibP2PTraceGossipSubBeaconAttestationData.target:type_name -> xatu.ClientMeta.AdditionalLibP2PTraceGossipSubBeaconAttestationTargetData
	6,   // 272: xatu.ClientMeta.AdditionalLibP2PTraceGossipSubBeaconAttestationData.slot:type_name -> xatu.SlotV2
	4,   // 273: xatu.ClientMeta.AdditionalLibP2PTraceGossipSubBeaconAttestationData.epoch:type_name -> xatu.EpochV2
	9,   // 274: xatu.ClientMeta.AdditionalLibP2PTraceGossipSubBeaconAttestationData.propagation:type_name -> xatu.PropagationV2
	11,  // 275: xatu.ClientMeta.AdditionalLibP2PTraceGossipSubBeaconAttestationData.attesting_validator:type_name -> xatu.AttestingValidatorV2
	4,   // 276: xatu.ClientMeta.AdditionalLibP2PTraceGossipSubBeaconAttestationData.wallclock_epoch:type_name -> xatu.EpochV2
	6,   // 277: xatu.ClientMeta.AdditionalLibP2PTraceGossipSubBeaconAttestationData.wallclock_slot:type_name -> xatu.SlotV2
	143, // 278: xatu.ClientMeta.AdditionalLibP2PTraceGossipSubBeaconAttestationData.metadata:type_name -> xatu.libp2p.TraceEventMetadata
	144, // 279: xatu.ClientMeta.AdditionalLibP2PTraceGossipSubBeaconAttestationData.topic:type_name -> google.protobuf.StringValue
	140, // 280: xatu.ClientMeta.AdditionalLibP2PTraceGossipSubBeaconAttestationData.message_size:type_name -> google.protobuf.UInt32Value
	144, // 281: xatu.ClientMeta.AdditionalLibP2PTraceGossipSubBeaconAttestationData.message_id:type_name -> google.protobuf.StringValue
	4,   // 282: xatu.ClientMeta.AdditionalLibP2PTraceGossipSubBlobSidecarData.epoch:type_name -> xatu.EpochV2
	6,   // 283: xatu.ClientMeta.AdditionalLibP2PTraceGossipSubBlobSidecarData.slot:type_name -> xatu.SlotV2
	4,   // 284: xatu.ClientMeta.AdditionalLibP2PTraceGossipSubBlobSidecarData.wallclock_epoch:type_name -> xatu.EpochV2
	6,   // 285: xatu.ClientMeta.AdditionalLibP2PTraceGossipSubBlobSidecarData.wallclock_slot:type_name -> xatu.SlotV2
	9,   // 286: xatu.ClientMeta.AdditionalLibP2PTraceGossipSubBlobSidecarData.propagation:type_name -> xatu.PropagationV2
	143, // 287: xatu.ClientMeta.AdditionalLibP2PTraceGossipSubBlobSidecarData.metadata:type_name -> xatu.libp2p.TraceEventMetadata
	144, // 288: xatu.ClientMeta.AdditionalLibP2PTraceGossipSubBlobSidecarData.topic:type_name -> google.protobuf.StringValue
	140, // 289: xatu.ClientMeta.AdditionalLibP2PTraceGossipSubBlobSidecarData.message_size:type_name -> google.protobuf.UInt32Value
	144, // 290: xatu.ClientMeta.AdditionalLibP2PTraceGossipSubBlobSidecarData.message_id:type_name -> google.protobuf.StringValue
	4,   // 291: xatu.ClientMeta.AdditionalEthV1ValidatorsData.epoch:type_name -> xatu.EpochV2
	7,   // 292: xatu.ClientMeta.Ethereum.Execution.fork_id:type_name -> xatu.ForkID
	94,  // 293: xatu.ServerMeta.Event.received_date_time:type_name -> google.protobuf.Timestamp
	88,  // 294: xatu.ServerMeta.Client.geo:type_name -> xatu.ServerMeta.Geo
	88,  // 295: xatu.ServerMeta.Peer.geo:type_name -> xatu.ServerMeta.Geo
	90,  // 296: xatu.ServerMeta.AdditionalBeaconP2PAttestationData.peer:type_name -> xatu.ServerMeta.Peer
	90,  // 297: xatu.ServerMeta.AdditionalLibp2PTraceConnectedData.peer:type_name -> xatu.ServerMeta.Peer
	90,  // 298: xatu.ServerMeta.AdditionalLibp2PTraceDisconnectedData.peer:type_name -> xatu.ServerMeta.Peer
	1,   // 299: xatu.EventIngester.CreateEvents:input_type -> xatu.CreateEventsRequest
	2,   // 300: xatu.EventIngester.CreateEvents:output_type -> xatu.CreateEventsResponse
	300, // [300:301] is the sub-list for method output_type
	299, // [299:300] is the sub-list for method input_type
	299, // [299:299] is the sub-list for extension type_name
	299, // [299:299] is the sub-list for extension extendee
	0,   // [0:299] is the sub-list for field type_name
}

func init() { file_pkg_proto_xatu_event_ingester_proto_init() }
func file_pkg_proto_xatu_event_ingester_proto_init() {
	if File_pkg_proto_xatu_event_ingester_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pkg_proto_xatu_event_ingester_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_xatu_event_ingester_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateEventsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_xatu_event_ingester_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Epoch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_xatu_event_ingester_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EpochV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_xatu_event_ingester_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Slot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_xatu_event_ingester_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlotV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_xatu_event_ingester_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForkID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_xatu_event_ingester_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Propagation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_xatu_event_ingester_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropagationV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_xatu_event_ingester_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttestingValidator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_xatu_event_ingester_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttestingValidatorV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_xatu_event_ingester_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DebugForkChoiceReorg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_xatu_event_ingester_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DebugForkChoiceReorgV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_xatu_event_ingester_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Validators); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_xatu_event_ingester_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_xatu_event_ingester_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_xatu_event_ingester_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_xatu_event_ingester_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Meta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_xatu_event_ingester_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_xatu_event_ingester_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecoratedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_xatu_event_ingester_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientMeta_Ethereum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_xatu_event_ingester_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientMeta_AdditionalEthV1AttestationSourceData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_xatu_event_ingester_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientMeta_AdditionalEthV1AttestationSourceV2Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_xatu_event_ingester_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientMeta_AdditionalEthV1AttestationTargetData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_xatu_event_ingester_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientMeta_AdditionalEthV1AttestationTargetV2Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_xatu_event_ingester_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientMeta_AdditionalEthV1EventsAttestationData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_xatu_event_ingester_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientMeta_AdditionalEthV1EventsAttestationV2Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_xatu_event_ingester_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientMeta_AdditionalEthV1EventsHeadData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_xatu_event_ingester_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientMeta_AdditionalEthV1EventsHeadV2Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_xatu_event_ingester_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientMeta_AdditionalEthV1EventsBlockData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_xatu_event_ingester_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientMeta_AdditionalEthV1EventsBlockV2Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_xatu_event_ingester_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientMeta_AdditionalEthV1EventsVoluntaryExitData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_xatu_event_ingester_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientMeta_AdditionalEthV1EventsVoluntaryExitV2Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_xatu_event_ingester_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientMeta_AdditionalEthV1EventsFinalizedCheckpointData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_xatu_event_ingester_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientMeta_AdditionalEthV1EventsFinalizedCheckpointV2Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_xatu_event_ingester_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientMeta_AdditionalEthV1EventsChainReorgData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_xatu_event_ingester_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientMeta_AdditionalEthV1EventsChainReorgV2Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_xatu_event_ingester_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientMeta_AdditionalEthV1EventsContributionAndProofContributionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_xatu_event_ingester_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientMeta_AdditionalEthV1EventsContributionAndProofContributionV2Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_xatu_event_ingester_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientMeta_AdditionalEthV1EventsContributionAndProofData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_xatu_event_ingester_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientMeta_AdditionalEthV1EventsContributionAndProofV2Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_xatu_event_ingester_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientMeta_ForkChoiceSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_xatu_event_ingester_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientMeta_ForkChoiceSnapshotV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_xatu_event_ingester_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientMeta_AdditionalEthV1DebugForkChoiceData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_xatu_event_ingester_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientMeta_AdditionalEthV1DebugForkChoiceV2Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_xatu_event_ingester_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientMeta_AdditionalEthV1DebugForkChoiceReOrgData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_xatu_event_ingester_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientMeta_AdditionalEthV1DebugForkChoiceReOrgV2Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_xatu_event_ingester_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientMeta_AdditionalEthV1BeaconCommitteeData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_xatu_event_ingester_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientMeta_AdditionalMempoolTransactionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_xatu_event_ingester_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientMeta_AdditionalMempoolTransactionV2Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_xatu_event_ingester_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientMeta_AdditionalEthV2BeaconBlockData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_xatu_event_ingester_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientMeta_AdditionalEthV2BeaconBlockV2Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_xatu_event_ingester_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientMeta_AdditionalEthV2BeaconBlockAttesterSlashingData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_xatu_event_ingester_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientMeta_AdditionalEthV2BeaconBlockProposerSlashingData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_xatu_event_ingester_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientMeta_AdditionalEthV2BeaconBlockVoluntaryExitData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_xatu_event_ingester_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientMeta_AdditionalEthV2BeaconBlockDepositData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_xatu_event_ingester_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientMeta_AdditionalEthV2BeaconBlockBLSToExecutionChangeData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_xatu_event_ingester_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientMeta_AdditionalEthV2BeaconBlockExecutionTransactionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_xatu_event_ingester_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientMeta_AdditionalEthV2BeaconBlockWithdrawalData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_xatu_event_ingester_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientMeta_AdditionalBlockprintBlockClassificationData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_xatu_event_ingester_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientMeta_AttestationDataSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_xatu_event_ingester_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientMeta_AdditionalEthV1ValidatorAttestationDataData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_xatu_event_ingester_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientMeta_AdditionalEthV1EventsBlobSidecarData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_xatu_event_ingester_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientMeta_AdditionalEthV1BeaconBlobSidecarData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_xatu_event_ingester_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientMeta_AdditionalBeaconP2PAttestationData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_xatu_event_ingester_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientMeta_AdditionalEthV1ProposerDutyData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_xatu_event_ingester_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientMeta_AdditionalEthV2BeaconBlockElaboratedAttestationData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_xatu_event_ingester_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientMeta_AdditionalLibP2PTraceAddPeerData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_xatu_event_ingester_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientMeta_AdditionalLibP2PTraceRemovePeerData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_xatu_event_ingester_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientMeta_AdditionalLibP2PTraceRecvRPCData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_xatu_event_ingester_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientMeta_AdditionalLibP2PTraceSendRPCData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_xatu_event_ingester_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientMeta_AdditionalLibP2PTraceJoinData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_xatu_event_ingester_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientMeta_AdditionalLibP2PTraceConnectedData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_xatu_event_ingester_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientMeta_AdditionalLibP2PTraceDisconnectedData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_xatu_event_ingester_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientMeta_AdditionalLibP2PTraceHandleMetadataData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_xatu_event_ingester_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientMeta_AdditionalLibP2PTraceHandleStatusData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_xatu_event_ingester_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientMeta_AdditionalLibP2PTraceGossipSubBeaconBlockData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_xatu_event_ingester_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientMeta_AdditionalLibP2PTraceGossipSubBeaconAttestationSourceData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_xatu_event_ingester_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientMeta_AdditionalLibP2PTraceGossipSubBeaconAttestationTargetData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_xatu_event_ingester_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientMeta_AdditionalLibP2PTraceGossipSubBeaconAttestationData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_xatu_event_ingester_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientMeta_AdditionalLibP2PTraceGossipSubBlobSidecarData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_xatu_event_ingester_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientMeta_AdditionalEthV1ValidatorsData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_xatu_event_ingester_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientMeta_Ethereum_Network); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_xatu_event_ingester_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientMeta_Ethereum_Execution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_xatu_event_ingester_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientMeta_Ethereum_Consensus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_xatu_event_ingester_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerMeta_Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_xatu_event_ingester_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerMeta_Geo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_xatu_event_ingester_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerMeta_Client); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_xatu_event_ingester_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerMeta_Peer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_xatu_event_ingester_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerMeta_AdditionalBeaconP2PAttestationData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_xatu_event_ingester_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerMeta_AdditionalLibp2PTraceConnectedData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_xatu_event_ingester_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerMeta_AdditionalLibp2PTraceDisconnectedData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_pkg_proto_xatu_event_ingester_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*ClientMeta_EthV1EventsAttestation)(nil),
		(*ClientMeta_EthV1EventsHead)(nil),
		(*ClientMeta_EthV1EventsBlock)(nil),
		(*ClientMeta_EthV1EventsVoluntaryExit)(nil),
		(*ClientMeta_EthV1EventsFinalizedCheckpoint)(nil),
		(*ClientMeta_EthV1EventsChainReorg)(nil),
		(*ClientMeta_EthV1EventsContributionAndProof)(nil),
		(*ClientMeta_MempoolTransaction)(nil),
		(*ClientMeta_EthV2BeaconBlock)(nil),
		(*ClientMeta_EthV1DebugForkChoice)(nil),
		(*ClientMeta_EthV1DebugForkChoiceReorg)(nil),
		(*ClientMeta_EthV1BeaconCommittee)(nil),
		(*ClientMeta_EthV1ValidatorAttestationData)(nil),
		(*ClientMeta_EthV1EventsAttestationV2)(nil),
		(*ClientMeta_EthV1EventsHeadV2)(nil),
		(*ClientMeta_EthV1EventsBlockV2)(nil),
		(*ClientMeta_EthV1EventsVoluntaryExitV2)(nil),
		(*ClientMeta_EthV1EventsFinalizedCheckpointV2)(nil),
		(*ClientMeta_EthV1EventsChainReorgV2)(nil),
		(*ClientMeta_EthV1EventsContributionAndProofV2)(nil),
		(*ClientMeta_MempoolTransactionV2)(nil),
		(*ClientMeta_EthV2BeaconBlockV2)(nil),
		(*ClientMeta_EthV1DebugForkChoiceV2)(nil),
		(*ClientMeta_EthV1DebugForkChoiceReorgV2)(nil),
		(*ClientMeta_EthV2BeaconBlockAttesterSlashing)(nil),
		(*ClientMeta_EthV2BeaconBlockProposerSlashing)(nil),
		(*ClientMeta_EthV2BeaconBlockVoluntaryExit)(nil),
		(*ClientMeta_EthV2BeaconBlockDeposit)(nil),
		(*ClientMeta_EthV2BeaconBlockBlsToExecutionChange)(nil),
		(*ClientMeta_EthV2BeaconBlockExecutionTransaction)(nil),
		(*ClientMeta_EthV2BeaconBlockWithdrawal)(nil),
		(*ClientMeta_EthV1EventsBlobSidecar)(nil),
		(*ClientMeta_BlockprintBlockClassification)(nil),
		(*ClientMeta_EthV1BeaconBlobSidecar)(nil),
		(*ClientMeta_BeaconP2PAttestation)(nil),
		(*ClientMeta_EthV1ProposerDuty)(nil),
		(*ClientMeta_EthV2BeaconBlockElaboratedAttestation)(nil),
		(*ClientMeta_Libp2PTraceAddPeer)(nil),
		(*ClientMeta_Libp2PTraceRemovePeer)(nil),
		(*ClientMeta_Libp2PTraceRecvRpc)(nil),
		(*ClientMeta_Libp2PTraceSendRpc)(nil),
		(*ClientMeta_Libp2PTraceJoin)(nil),
		(*ClientMeta_Libp2PTraceConnected)(nil),
		(*ClientMeta_Libp2PTraceDisconnected)(nil),
		(*ClientMeta_Libp2PTraceHandleMetadata)(nil),
		(*ClientMeta_Libp2PTraceHandleStatus)(nil),
		(*ClientMeta_Libp2PTraceGossipsubBeaconBlock)(nil),
		(*ClientMeta_Libp2PTraceGossipsubBeaconAttestation)(nil),
		(*ClientMeta_Libp2PTraceGossipsubBlobSidecar)(nil),
		(*ClientMeta_EthV1Validators)(nil),
	}
	file_pkg_proto_xatu_event_ingester_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*ServerMeta_BEACON_P2P_ATTESTATION)(nil),
		(*ServerMeta_LIBP2P_TRACE_CONNECTED)(nil),
		(*ServerMeta_LIBP2P_TRACE_DISCONNECTED)(nil),
	}
	file_pkg_proto_xatu_event_ingester_proto_msgTypes[19].OneofWrappers = []interface{}{
		(*DecoratedEvent_EthV1EventsAttestation)(nil),
		(*DecoratedEvent_EthV1EventsBlock)(nil),
		(*DecoratedEvent_EthV1EventsChainReorg)(nil),
		(*DecoratedEvent_EthV1EventsFinalizedCheckpoint)(nil),
		(*DecoratedEvent_EthV1EventsHead)(nil),
		(*DecoratedEvent_EthV1EventsVoluntaryExit)(nil),
		(*DecoratedEvent_EthV1EventsContributionAndProof)(nil),
		(*DecoratedEvent_MempoolTransaction)(nil),
		(*DecoratedEvent_EthV2BeaconBlock)(nil),
		(*DecoratedEvent_EthV1ForkChoice)(nil),
		(*DecoratedEvent_EthV1ForkChoiceReorg)(nil),
		(*DecoratedEvent_EthV1BeaconCommittee)(nil),
		(*DecoratedEvent_EthV1ValidatorAttestationData)(nil),
		(*DecoratedEvent_EthV1EventsAttestationV2)(nil),
		(*DecoratedEvent_EthV1EventsBlockV2)(nil),
		(*DecoratedEvent_EthV1EventsChainReorgV2)(nil),
		(*DecoratedEvent_EthV1EventsFinalizedCheckpointV2)(nil),
		(*DecoratedEvent_EthV1EventsHeadV2)(nil),
		(*DecoratedEvent_EthV1EventsVoluntaryExitV2)(nil),
		(*DecoratedEvent_EthV1EventsContributionAndProofV2)(nil),
		(*DecoratedEvent_MempoolTransactionV2)(nil),
		(*DecoratedEvent_EthV2BeaconBlockV2)(nil),
		(*DecoratedEvent_EthV1ForkChoiceV2)(nil),
		(*DecoratedEvent_EthV1ForkChoiceReorgV2)(nil),
		(*DecoratedEvent_EthV2BeaconBlockAttesterSlashing)(nil),
		(*DecoratedEvent_EthV2BeaconBlockProposerSlashing)(nil),
		(*DecoratedEvent_EthV2BeaconBlockVoluntaryExit)(nil),
		(*DecoratedEvent_EthV2BeaconBlockDeposit)(nil),
		(*DecoratedEvent_EthV2BeaconBlockBlsToExecutionChange)(nil),
		(*DecoratedEvent_EthV2BeaconBlockExecutionTransaction)(nil),
		(*DecoratedEvent_EthV2BeaconBlockWithdrawal)(nil),
		(*DecoratedEvent_EthV1EventsBlobSidecar)(nil),
		(*DecoratedEvent_BlockprintBlockClassification)(nil),
		(*DecoratedEvent_EthV1BeaconBlockBlobSidecar)(nil),
		(*DecoratedEvent_BeaconP2PAttestation)(nil),
		(*DecoratedEvent_EthV1ProposerDuty)(nil),
		(*DecoratedEvent_EthV2BeaconBlockElaboratedAttestation)(nil),
		(*DecoratedEvent_Libp2PTraceAddPeer)(nil),
		(*DecoratedEvent_Libp2PTraceRemovePeer)(nil),
		(*DecoratedEvent_Libp2PTraceRecvRpc)(nil),
		(*DecoratedEvent_Libp2PTraceSendRpc)(nil),
		(*DecoratedEvent_Libp2PTraceJoin)(nil),
		(*DecoratedEvent_Libp2PTraceConnected)(nil),
		(*DecoratedEvent_Libp2PTraceDisconnected)(nil),
		(*DecoratedEvent_Libp2PTraceHandleMetadata)(nil),
		(*DecoratedEvent_Libp2PTraceHandleStatus)(nil),
		(*DecoratedEvent_Libp2PTraceGossipsubBeaconBlock)(nil),
		(*DecoratedEvent_Libp2PTraceGossipsubBeaconAttestation)(nil),
		(*DecoratedEvent_Libp2PTraceGossipsubBlobSidecar)(nil),
		(*DecoratedEvent_EthV1Validators)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_proto_xatu_event_ingester_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   93,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pkg_proto_xatu_event_ingester_proto_goTypes,
		DependencyIndexes: file_pkg_proto_xatu_event_ingester_proto_depIdxs,
		EnumInfos:         file_pkg_proto_xatu_event_ingester_proto_enumTypes,
		MessageInfos:      file_pkg_proto_xatu_event_ingester_proto_msgTypes,
	}.Build()
	File_pkg_proto_xatu_event_ingester_proto = out.File
	file_pkg_proto_xatu_event_ingester_proto_rawDesc = nil
	file_pkg_proto_xatu_event_ingester_proto_goTypes = nil
	file_pkg_proto_xatu_event_ingester_proto_depIdxs = nil
}
