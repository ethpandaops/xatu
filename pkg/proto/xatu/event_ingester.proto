syntax = "proto3";

package xatu;

option go_package = "github.com/ethpandaops/xatu/pkg/proto/xatu";
import "google/protobuf/timestamp.proto";

import "pkg/proto/eth/v1/attestation.proto";
import "pkg/proto/eth/v1/events.proto";
import "pkg/proto/eth/v2/events.proto";
import "pkg/proto/eth/v1/fork_choice.proto";

service EventIngester {
  rpc CreateEvents(CreateEventsRequest) returns (CreateEventsResponse) {}
}

message CreateEventsRequest { repeated DecoratedEvent events = 1; }

message CreateEventsResponse {}

message Epoch {
  // Number is the epoch number.
  uint64 number = 1;
  // StartDateTime is the epoch start time.
  google.protobuf.Timestamp start_date_time = 2
      [ json_name = "start_date_time" ];
}

message Slot {
  // Number is the slot number.
  uint64 number = 1;
  // StartDateTime is the slot start time.
  google.protobuf.Timestamp start_date_time = 2
      [ json_name = "start_date_time" ];
}

message ForkID {
  string hash = 1 [ json_name = "hash" ];
  string next = 2 [ json_name = "next" ];
}

message Propagation {
  // SlotStartDiff is the difference between the slot start time and the
  // attestation received time (in milliseconds).
  uint64 slot_start_diff = 3 [ json_name = "slot_start_diff" ];
}

message DebugForkChoiceReorg {
  xatu.eth.v1.ForkChoice before = 1 [ json_name = "before" ];
  xatu.eth.v1.ForkChoice after = 2 [ json_name = "after" ];
}

message ClientMeta {
  // Name is the name of the client.
  string name = 1;
  // Version is the Xatu-sentry version of the client.
  string version = 2;
  // ID is the unique ID of the client.
  string id = 3;
  // Implmentation is the implementation of the client.
  string implementation = 4;
  // OS is the operating system of the client.
  string os = 5;
  // ClockDrift is the NTP calculated clock drift of the client.
  uint64 clock_drift = 6 [ json_name = "clock_drift" ];

  message Ethereum {
    message Network {
      // Name is the name of the network.
      string name = 1;
      // ID is the network ID of the network.
      uint64 id = 2;
    }
    // Network contains information about the network.
    Network network = 1;

    message Execution {
      // ForkID is the fork ID of the execution client.
      ForkID fork_id = 1 [ json_name = "fork_id" ];
    }
    message Consensus {
      // Implementation is the name of the consensus client.
      string implementation = 1;
      // Version is the version of the consensus client.
      string version = 2;
    }
    // ExecutionClient is the name of the execution client.
    Execution execution = 2;
    // ConsensusClient is the name of the consensus client.
    Consensus consensus = 3;
  }

  // Ethereum contains information about the Ethereum network and configuration.
  Ethereum ethereum = 8;

  // Labels contains additional labels as set by the client.
  map<string, string> labels = 9;

  message AdditionalEthV1AttestationSourceData {
    // Epoch contains the epoch information for the source.
    Epoch epoch = 1;
  }

  message AdditionalEthV1AttestationTargetData {
    // Epoch contains the epoch information for the source.
    Epoch epoch = 1;
  }

  message AdditionalEthV1EventsAttestationData {
    // Source contains information for the best currently justified checkpoint.
    AdditionalEthV1AttestationSourceData source = 1;

    // Target contains information of the block at the start of the current
    // epoch.
    AdditionalEthV1AttestationTargetData target = 2;

    // Slot contains the slot information for the attestation.
    Slot slot = 3;

    // Epoch contains the epoch information for the attestation.
    Epoch epoch = 4;

    // Propagation contains information about the propagation of the
    // attestation.
    Propagation propagation = 5;
  }

  message AdditionalEthV1EventsHeadData {
    // Epoch contains the epoch information for the head.
    Epoch epoch = 1;

    // Slot contains the slot information for the head event.
    Slot slot = 2;

    // Propagation contains information about the propagation of the head.
    Propagation propagation = 3;
  }

  message AdditionalEthV1EventsBlockData {
    // Epoch contains the epoch information for the block.
    Epoch epoch = 1;

    // Slot contains the slot information for the block.
    Slot slot = 2;

    // Propagation contains information about the propagation of the block.
    Propagation propagation = 3;
  }

  message AdditionalEthV1EventsVoluntaryExitData {
    // Epoch contains the epoch information for the voluntary exit.
    Epoch epoch = 1;
  }

  message AdditionalEthV1EventsFinalizedCheckpointData {
    // Epoch contains the epoch information for the finalized checkpoint.
    Epoch epoch = 1;
  }

  message AdditionalEthV1EventsChainReorgData {
    // Epoch contains the epoch information for the chain reorg.
    Epoch epoch = 1;

    // Slot contains the slot information for the chain reorg.
    Slot slot = 2;

    // Propagation contains information about the propagation of the chain
    // reorg.
    Propagation propagation = 3;
  }

  message AdditionalEthV1EventsContributionAndProofContributionData {
    // Epoch contains the epoch information for the contribution and proof.
    Epoch epoch = 1;

    // Slot contains the slot information for the contribution and proof.
    Slot slot = 2;

    // Propagation contains information about the propagation of the
    // contribution and proof.
    Propagation propagation = 3;
  }

  message AdditionalEthV1EventsContributionAndProofData {
    AdditionalEthV1EventsContributionAndProofContributionData contribution = 1;
  }

  message ForkChoiceSnapshot {
    // RequestEpoch contains the wall clock epoch for when the fork choice was requested.
    Epoch request_epoch = 1 [ json_name = "request_epoch" ];

    // RequestSlot contains the wall clock slot for when the fork choice was requested.
    Slot request_slot = 2 [ json_name = "request_slot" ];

    // RequestedAtSlotStartDiffMs is the difference how far in to the slot the
    // sentry was when it requested the fork choice snapshot (in milliseconds).
    uint64 requested_at_slot_start_diff_ms = 3 [ json_name = "requested_at_slot_start_diff_ms" ];

    // RequestDurationMs is the duration of the fork choice snapshot request
    // (in milliseconds).
    uint64 request_duration_ms = 4 [ json_name = "request_duration_ms" ];

    // Timestamp is the timestamp of the fork choice snapshot.
    google.protobuf.Timestamp timestamp = 5
    [ json_name = "timestamp" ];
  }

  message AdditionalEthV1DebugForkChoiceData {
    ForkChoiceSnapshot Snapshot = 1 [ json_name = "snapshot" ];
  }

  message AdditionalEthV1DebugForkChoiceReOrgData {
    ForkChoiceSnapshot before = 1 [ json_name = "before" ];
    ForkChoiceSnapshot after = 2 [ json_name = "after" ];
  }

  message AdditionalMempoolTransactionData {
    // Hash is the transaction hash.
    string hash = 1 [ json_name = "hash" ];

    // From is the transaction sender hash.
    string from = 2 [ json_name = "from" ];

    // To is the transaction receiver hash.
    string to = 3 [ json_name = "to" ];

    // Nonce is the transaction nonce.
    uint64 nonce = 4 [ json_name = "nonce" ];

    // GasPrice is the transaction gas price.
    string gas_price = 5 [ json_name = "gas_price" ];

    // Gas is the transaction gas.
    uint64 gas = 6 [ json_name = "gas" ];

    // Value is the transaction value.
    string value = 7 [ json_name = "value" ];

    // Size is the transaction size in bytes.
    string size = 8;

    // CallDataSize is the call data size in bytes.
    string call_data_size = 9 [ json_name = "call_data_size" ];
  }

  message AdditionalEthV2BeaconBlockData {
    // Epoch contains the epoch information for the block.
    Epoch epoch = 1;

    // Slot contains the slot information for the block.
    Slot slot = 2;

    // Version contains information about the version of the block.
    string version = 3;
  }

  // AdditionalData contains additional, computed data as set by the client
  // about the event.
  oneof AdditionalData {
    // AdditionalEthV1EventsAttestationData contains additional data about an eth v1
    // attestation event.
    AdditionalEthV1EventsAttestationData eth_v1_events_attestation = 10
        [ json_name = "additional_data" ];
    // AdditionalEthV1EventsHeadData contains additional data about the eth v1 head
    // event.
    AdditionalEthV1EventsHeadData eth_v1_events_head = 11 [ json_name = "additional_data" ];
    // AdditionalEthV1EventsBlockData contains additional data about the eth v1 block
    // event.
    AdditionalEthV1EventsBlockData eth_v1_events_block = 12
        [ json_name = "additional_data" ];
    // AdditionalEthV1EventsVoluntaryExitData contains additional data about the eth
    // v1 voluntary exit event.
    AdditionalEthV1EventsVoluntaryExitData eth_v1_events_voluntary_exit = 13
        [ json_name = "additional_data" ];
    // AdditionalEthV1EventsFinalizedCheckpointData contains additional data about the
    // eth v1 finalized checkpoint event.
    AdditionalEthV1EventsFinalizedCheckpointData eth_v1_events_finalized_checkpoint = 14
        [ json_name = "additional_data" ];
    // AdditionalEthV1EventsChainReorgData contains additional data about the eth v1
    // chain reorg event.
    AdditionalEthV1EventsChainReorgData eth_v1_events_chain_reorg = 15
        [ json_name = "additional_data" ];
    // AdditionalEthV1EventsContributionAndProofData contains additional data about
    // the eth v1 contribution and proof.
    AdditionalEthV1EventsContributionAndProofData eth_v1_events_contribution_and_proof = 16
        [ json_name = "additional_data" ];
    // AdditionalMempoolTransactionData contains additional data about the
    // mempool transaction event.
    AdditionalMempoolTransactionData mempool_transaction = 17
        [ json_name = "additional_data" ];
    // AdditionalEthV2BeaconBlockData contains additional data about the eth v2
    // beacon block event.
    AdditionalEthV2BeaconBlockData eth_v2_beacon_block = 18
        [ json_name = "additional_data" ];
    // AdditionalEthV1DebugForkChoice contains additional data about the eth v1
    // debug fork choice event.
    AdditionalEthV1DebugForkChoiceData eth_v1_debug_fork_choice = 19
    [ json_name = "additional_data" ];
    // AdditionalEthV1DebugForkChoiceReorg contains additional data about the eth v1
    // debug fork choice reorg event.
    AdditionalEthV1DebugForkChoiceReOrgData eth_v1_debug_fork_choice_reorg = 20
    [ json_name = "additional_data" ];
  }
}

message ServerMeta {
  message Event {
    /// DateTime is the date and time of the event as seen by the server.
    google.protobuf.Timestamp received_date_time = 1
        [ json_name = "received_date_time" ];
  }

  message Client {
    message Geo {
      // City is the city of the client as far as the server is concerned.
      string City = 1 [ json_name = "city" ];
      // Country is the country of the client as far as the server is concerned.
      string Country = 2 [ json_name = "country" ];
      // CountryCode is the country code of the client as far as the server is
      // concerned.
      string CountryCode = 3 [ json_name = "country_code" ];
      // ContinentCode is the continent code of the client as far as the server
      // is concerned.
      string ContinentCode = 4 [ json_name = "continent_code" ];
      // Latitude is the latitude of the client as far as the server is
      // concerned.
      double Latitude = 5 [ json_name = "latitude" ];
      // Longitude is the longitude of the client as far as the server is
      // concerned.
      double Longitude = 6 [ json_name = "longitude" ];
      // AutonomousSystemNumber is the autonomous system number of the client as
      // far as the server is concerned.
      uint32 AutonomousSystemNumber = 7
          [ json_name = "autonomous_system_number" ];
      // AutonomousSystemOrganization is the autonomous system organization of
      // the client as far as the server is concerned.
      string AutonomousSystemOrganization = 8
          [ json_name = "autonomous_system_organization" ];
    }

    // IP is the ip of the client as far as the server is concerned.
    string IP = 1 [ json_name = "ip" ];

    // Geo contains geo information about the client as far as the server is
    // concerned.
    Geo geo = 2;
  }

  // Event contains information about the event from the server's perspective.
  Event event = 1;

  // Client contains information about the client from the server's perspective.
  Client client = 2;

  // AdditionalData contains additional data as set by the server.
  map<string, string> additional_data = 3 [ json_name = "additional_data" ];
}

message Meta {
  // Client contains information about the event that is from the client.
  ClientMeta client = 1;
  // Server contains information about the event that is from the server.
  ServerMeta server = 2;
}

message Event {
  enum Name {
    BEACON_API_ETH_V1_EVENTS_UNKNOWN = 0;
    BEACON_API_ETH_V1_EVENTS_BLOCK = 1;
    BEACON_API_ETH_V1_EVENTS_CHAIN_REORG = 2;
    BEACON_API_ETH_V1_EVENTS_FINALIZED_CHECKPOINT = 3;
    BEACON_API_ETH_V1_EVENTS_HEAD = 4;
    BEACON_API_ETH_V1_EVENTS_VOLUNTARY_EXIT = 5;
    BEACON_API_ETH_V1_EVENTS_ATTESTATION = 6;
    BEACON_API_ETH_V1_EVENTS_CONTRIBUTION_AND_PROOF = 7;
    MEMPOOL_TRANSACTION = 8;
    BEACON_API_ETH_V2_BEACON_BLOCK = 9;
    BEACON_API_ETH_V1_DEBUG_FORK_CHOICE = 10;
    BEACON_API_ETH_V1_DEBUG_FORK_CHOICE_REORG = 11;
  }
  // Name is the name of the event.
  Name name = 1;
  // DateTime is the date and time of the event as seen by the client.
  google.protobuf.Timestamp date_time = 2 [ json_name = "date_time" ];
  // ID is the id of the event.
  string id = 3 [ json_name = "id" ];
}

// DecoratedEvent is an event that has been decorated with additional
// information.
message DecoratedEvent {
  Event event = 1;
  Meta meta = 2;
  oneof data {
    xatu.eth.v1.Attestation eth_v1_events_attestation = 3 [ json_name = "data" ];
    xatu.eth.v1.EventBlock eth_v1_events_block = 4 [ json_name = "data" ];
    xatu.eth.v1.EventChainReorg eth_v1_events_chain_reorg = 5 [ json_name = "data" ];
    xatu.eth.v1.EventFinalizedCheckpoint eth_v1_events_finalized_checkpoint = 6
        [ json_name = "data" ];
    xatu.eth.v1.EventHead eth_v1_events_head = 7 [ json_name = "data" ];
    xatu.eth.v1.EventVoluntaryExit eth_v1_events_voluntary_exit = 8
        [ json_name = "data" ];
    xatu.eth.v1.EventContributionAndProof eth_v1_events_contribution_and_proof = 9
        [ json_name = "data" ];
    string mempool_transaction = 10 [ json_name = "data" ];
    xatu.eth.v2.EventBlock eth_v2_beacon_block = 11 [ json_name = "data" ];
    xatu.eth.v1.ForkChoice eth_v1_fork_choice = 12 [ json_name = "data" ];
    DebugForkChoiceReorg eth_v1_fork_choice_reorg = 13 [ json_name = "data" ];
  };
}
