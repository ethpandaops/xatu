// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ethpandaops/xatu/pkg/sentry/execution (interfaces: ClientProvider)
//
// Generated by this command:
//
//	mockgen -package mock -destination mock/client.mock.go github.com/ethpandaops/xatu/pkg/sentry/execution ClientProvider
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	json "encoding/json"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockClientProvider is a mock of ClientProvider interface.
type MockClientProvider struct {
	ctrl     *gomock.Controller
	recorder *MockClientProviderMockRecorder
	isgomock struct{}
}

// MockClientProviderMockRecorder is the mock recorder for MockClientProvider.
type MockClientProviderMockRecorder struct {
	mock *MockClientProvider
}

// NewMockClientProvider creates a new mock instance.
func NewMockClientProvider(ctrl *gomock.Controller) *MockClientProvider {
	mock := &MockClientProvider{ctrl: ctrl}
	mock.recorder = &MockClientProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientProvider) EXPECT() *MockClientProviderMockRecorder {
	return m.recorder
}

// BatchGetTransactionsByHash mocks base method.
func (m *MockClientProvider) BatchGetTransactionsByHash(ctx context.Context, hashes []string) ([]json.RawMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetTransactionsByHash", ctx, hashes)
	ret0, _ := ret[0].([]json.RawMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetTransactionsByHash indicates an expected call of BatchGetTransactionsByHash.
func (mr *MockClientProviderMockRecorder) BatchGetTransactionsByHash(ctx, hashes any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetTransactionsByHash", reflect.TypeOf((*MockClientProvider)(nil).BatchGetTransactionsByHash), ctx, hashes)
}

// CallContext mocks base method.
func (m *MockClientProvider) CallContext(ctx context.Context, result any, method string, args ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, result, method}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CallContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallContext indicates an expected call of CallContext.
func (mr *MockClientProviderMockRecorder) CallContext(ctx, result, method any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, result, method}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallContext", reflect.TypeOf((*MockClientProvider)(nil).CallContext), varargs...)
}

// Close mocks base method.
func (m *MockClientProvider) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockClientProviderMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClientProvider)(nil).Close))
}

// GetPendingTransactions mocks base method.
func (m *MockClientProvider) GetPendingTransactions(ctx context.Context) ([]json.RawMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingTransactions", ctx)
	ret0, _ := ret[0].([]json.RawMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPendingTransactions indicates an expected call of GetPendingTransactions.
func (mr *MockClientProviderMockRecorder) GetPendingTransactions(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingTransactions", reflect.TypeOf((*MockClientProvider)(nil).GetPendingTransactions), ctx)
}

// GetTxpoolContent mocks base method.
func (m *MockClientProvider) GetTxpoolContent(ctx context.Context) (json.RawMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTxpoolContent", ctx)
	ret0, _ := ret[0].(json.RawMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTxpoolContent indicates an expected call of GetTxpoolContent.
func (mr *MockClientProviderMockRecorder) GetTxpoolContent(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTxpoolContent", reflect.TypeOf((*MockClientProvider)(nil).GetTxpoolContent), ctx)
}

// SubscribeToNewPendingTxs mocks base method.
func (m *MockClientProvider) SubscribeToNewPendingTxs(ctx context.Context) (<-chan string, <-chan error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeToNewPendingTxs", ctx)
	ret0, _ := ret[0].(<-chan string)
	ret1, _ := ret[1].(<-chan error)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SubscribeToNewPendingTxs indicates an expected call of SubscribeToNewPendingTxs.
func (mr *MockClientProviderMockRecorder) SubscribeToNewPendingTxs(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeToNewPendingTxs", reflect.TypeOf((*MockClientProvider)(nil).SubscribeToNewPendingTxs), ctx)
}
